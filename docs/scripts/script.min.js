/**
 * Pokémon data, accessible by name or id.
 * @type {{}}
 */
const pokemonMap = {};
const pokemonMapId = {};
const pokemonDevolutionMap = {};
/**
 * Datalist that contains all Pokémon data
 */
const pokemonList = [
    {
        "id": 1,
        "name": "Bulbasaur",
        "catchRate": 45,
        "evolution": "Ivysaur",
        "evoLevel": 16,
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 65,
        "levelType": "mediumslow",
        "exp": 64,
        "eggCycles": 20
    },
    {
        "id": 2,
        "name": "Ivysaur",
        "catchRate": 45,
        "evolution": "Venusaur",
        "evoLevel": 32,
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 80,
        "levelType": "mediumslow",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 3,
        "name": "Venusaur",
        "catchRate": 45,
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 100,
        "levelType": "mediumslow",
        "exp": 236,
        "eggCycles": 20
    },
    {
        "id": 4,
        "name": "Charmander",
        "catchRate": 45,
        "evolution": "Charmeleon",
        "evoLevel": 16,
        "type": [
            "Fire"
        ],
        "attack": 60,
        "levelType": "mediumslow",
        "exp": 62,
        "eggCycles": 20
    },
    {
        "id": 5,
        "name": "Charmeleon",
        "catchRate": 45,
        "evolution": "Charizard",
        "evoLevel": 36,
        "type": [
            "Fire"
        ],
        "attack": 80,
        "levelType": "mediumslow",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 6,
        "name": "Charizard",
        "catchRate": 45,
        "type": [
            "Fire",
            "Flying"
        ],
        "attack": 105,
        "levelType": "mediumslow",
        "exp": 240,
        "eggCycles": 20
    },
    {
        "id": 7,
        "name": "Squirtle",
        "catchRate": 45,
        "evolution": "Wartortle",
        "evoLevel": 16,
        "type": [
            "Water"
        ],
        "attack": 50,
        "levelType": "mediumslow",
        "exp": 63,
        "eggCycles": 20
    },
    {
        "id": 8,
        "name": "Wartortle",
        "catchRate": 45,
        "evolution": "Blastoise",
        "evoLevel": 36,
        "type": [
            "Water"
        ],
        "attack": 65,
        "levelType": "mediumslow",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 9,
        "name": "Blastoise",
        "catchRate": 45,
        "type": [
            "Water"
        ],
        "attack": 85,
        "levelType": "mediumslow",
        "exp": 239,
        "eggCycles": 20
    },
    {
        "id": 10,
        "name": "Caterpie",
        "catchRate": 255,
        "evolution": "Metapod",
        "evoLevel": 7,
        "type": [
            "Bug"
        ],
        "attack": 30,
        "levelType": "mediumfast",
        "exp": 39,
        "eggCycles": 10
    },
    {
        "id": 11,
        "name": "Metapod",
        "catchRate": 120,
        "evolution": "Butterfree",
        "evoLevel": 10,
        "type": [
            "Bug"
        ],
        "attack": 25,
        "levelType": "mediumfast",
        "exp": 72,
        "eggCycles": 10
    },
    {
        "id": 12,
        "name": "Butterfree",
        "catchRate": 45,
        "type": [
            "Bug",
            "Flying"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 173,
        "eggCycles": 10
    },
    {
        "id": 13,
        "name": "Weedle",
        "catchRate": 255,
        "evolution": "Kakuna",
        "evoLevel": 7,
        "type": [
            "Bug",
            "Poison"
        ],
        "attack": 35,
        "levelType": "mediumfast",
        "exp": 39,
        "eggCycles": 10
    },
    {
        "id": 14,
        "name": "Kakuna",
        "catchRate": 120,
        "evolution": "Beedrill",
        "evoLevel": 10,
        "type": [
            "Bug",
            "Poison"
        ],
        "attack": 25,
        "levelType": "mediumfast",
        "exp": 72,
        "eggCycles": 10
    },
    {
        "id": 15,
        "name": "Beedrill",
        "catchRate": 45,
        "type": [
            "Bug",
            "Poison"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 173,
        "eggCycles": 10
    },
    {
        "id": 16,
        "name": "Pidgey",
        "catchRate": 255,
        "evolution": "Pidgeotto",
        "evoLevel": 18,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 45,
        "levelType": "mediumslow",
        "exp": 50,
        "eggCycles": 15
    },
    {
        "id": 17,
        "name": "Pidgeotto",
        "catchRate": 120,
        "evolution": "Pidgeot",
        "evoLevel": 36,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 60,
        "levelType": "mediumslow",
        "exp": 122,
        "eggCycles": 15
    },
    {
        "id": 18,
        "name": "Pidgeot",
        "catchRate": 45,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 80,
        "levelType": "mediumslow",
        "exp": 211,
        "eggCycles": 15
    },
    {
        "id": 19,
        "name": "Rattata",
        "catchRate": 255,
        "evolution": "Raticate",
        "evoLevel": 20,
        "type": [
            "Normal"
        ],
        "attack": 56,
        "levelType": "mediumfast",
        "exp": 51,
        "eggCycles": 15
    },
    {
        "id": 20,
        "name": "Raticate",
        "catchRate": 127,
        "type": [
            "Normal"
        ],
        "attack": 81,
        "levelType": "mediumfast",
        "exp": 145,
        "eggCycles": 15
    },
    {
        "id": 21,
        "name": "Spearow",
        "catchRate": 255,
        "evolution": "Fearow",
        "evoLevel": 20,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 60,
        "levelType": "mediumfast",
        "exp": 52,
        "eggCycles": 15
    },
    {
        "id": 22,
        "name": "Fearow",
        "catchRate": 90,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 155,
        "eggCycles": 15
    },
    {
        "id": 23,
        "name": "Ekans",
        "catchRate": 255,
        "evolution": "Arbok",
        "evoLevel": 22,
        "type": [
            "Poison"
        ],
        "attack": 60,
        "levelType": "mediumfast",
        "exp": 58,
        "eggCycles": 20
    },
    {
        "id": 24,
        "name": "Arbok",
        "catchRate": 90,
        "type": [
            "Poison"
        ],
        "attack": 85,
        "levelType": "mediumfast",
        "exp": 153,
        "eggCycles": 20
    },
    {
        "id": 25,
        "name": "Pikachu",
        "catchRate": 190,
        "evolution": "Raichu",
        "evoLevel": "Thunder_stone",
        "type": [
            "Electric"
        ],
        "attack": 55,
        "levelType": "mediumfast",
        "exp": 105,
        "eggCycles": 20
    },
    {
        "id": 26,
        "name": "Raichu",
        "catchRate": 75,
        "type": [
            "Electric"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 214,
        "eggCycles": 20
    },
    {
        "id": 27,
        "name": "Sandshrew",
        "catchRate": 255,
        "evolution": "Sandslash",
        "evoLevel": 22,
        "type": [
            "Ground"
        ],
        "attack": 75,
        "levelType": "mediumfast",
        "exp": 60,
        "eggCycles": 20
    },
    {
        "id": 28,
        "name": "Sandslash",
        "catchRate": 90,
        "type": [
            "Ground"
        ],
        "attack": 100,
        "levelType": "mediumfast",
        "exp": 158,
        "eggCycles": 20
    },
    {
        "id": 29,
        "name": "Nidoran(F)",
        "catchRate": 235,
        "evolution": "Nidorina",
        "evoLevel": 16,
        "type": [
            "Poison"
        ],
        "attack": 47,
        "levelType": "mediumslow",
        "exp": 55,
        "eggCycles": 20
    },
    {
        "id": 30,
        "name": "Nidorina",
        "catchRate": 120,
        "evolution": "Nidoqueen",
        "evoLevel": "Moon_stone",
        "type": [
            "Poison"
        ],
        "attack": 62,
        "levelType": "mediumslow",
        "exp": 128,
        "eggCycles": 20
    },
    {
        "id": 31,
        "name": "Nidoqueen",
        "catchRate": 45,
        "type": [
            "Poison",
            "Ground"
        ],
        "attack": 92,
        "levelType": "mediumslow",
        "exp": 223,
        "eggCycles": 20
    },
    {
        "id": 32,
        "name": "Nidoran(M)",
        "catchRate": 235,
        "evolution": "Nidorino",
        "evoLevel": 16,
        "type": [
            "Poison"
        ],
        "attack": 57,
        "levelType": "mediumslow",
        "exp": 55,
        "eggCycles": 20
    },
    {
        "id": 33,
        "name": "Nidorino",
        "catchRate": 120,
        "evolution": "Nidoking",
        "evoLevel": "Moon_stone",
        "type": [
            "Poison"
        ],
        "attack": 72,
        "levelType": "mediumslow",
        "exp": 128,
        "eggCycles": 20
    },
    {
        "id": 34,
        "name": "Nidoking",
        "catchRate": 45,
        "type": [
            "Poison",
            "Ground"
        ],
        "attack": 102,
        "levelType": "mediumslow",
        "exp": 223,
        "eggCycles": 20
    },
    {
        "id": 35,
        "name": "Clefairy",
        "catchRate": 150,
        "evolution": "Clefable",
        "evoLevel": "Moon_stone",
        "type": [
            "Fairy"
        ],
        "attack": 60,
        "levelType": "fast",
        "exp": 113,
        "eggCycles": 20
    },
    {
        "id": 36,
        "name": "Clefable",
        "catchRate": 25,
        "type": [
            "Fairy"
        ],
        "attack": 95,
        "levelType": "fast",
        "exp": 213,
        "eggCycles": 20
    },
    {
        "id": 37,
        "name": "Vulpix",
        "catchRate": 190,
        "evolution": "Ninetales",
        "evoLevel": "Fire_stone",
        "type": [
            "Fire"
        ],
        "attack": 50,
        "levelType": "mediumfast",
        "exp": 60,
        "eggCycles": 20
    },
    {
        "id": 38,
        "name": "Ninetales",
        "catchRate": 75,
        "type": [
            "Fire"
        ],
        "attack": 81,
        "levelType": "mediumfast",
        "exp": 177,
        "eggCycles": 20
    },
    {
        "id": 39,
        "name": "Jigglypuff",
        "catchRate": 170,
        "evolution": "Wigglytuff",
        "evoLevel": "Moon_stone",
        "type": [
            "Normal",
            "Fairy"
        ],
        "attack": 45,
        "levelType": "fast",
        "exp": 95,
        "eggCycles": 20
    },
    {
        "id": 40,
        "name": "Wigglytuff",
        "catchRate": 50,
        "type": [
            "Normal",
            "Fairy"
        ],
        "attack": 85,
        "levelType": "fast",
        "exp": 191,
        "eggCycles": 20
    },
    {
        "id": 41,
        "name": "Zubat",
        "catchRate": 255,
        "evolution": "Golbat",
        "evoLevel": 22,
        "type": [
            "Poison",
            "Flying"
        ],
        "attack": 45,
        "levelType": "mediumfast",
        "exp": 49,
        "eggCycles": 15
    },
    {
        "id": 42,
        "name": "Golbat",
        "catchRate": 90,
        "evolution": "Crobat",
        "evoLevel": 100,
        "type": [
            "Poison",
            "Flying"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 159,
        "eggCycles": 15
    },
    {
        "id": 43,
        "name": "Oddish",
        "catchRate": 255,
        "evolution": "Gloom",
        "evoLevel": 21,
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 75,
        "levelType": "mediumslow",
        "exp": 64,
        "eggCycles": 20
    },
    {
        "id": 44,
        "name": "Gloom",
        "catchRate": 120,
        "evolution": ["Vileplume", "Bellossom"],
        "evoLevel": ["Leaf_stone", "Sun_stone"],
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 85,
        "levelType": "mediumslow",
        "exp": 138,
        "eggCycles": 20
    },
    {
        "id": 45,
        "name": "Vileplume",
        "catchRate": 45,
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 110,
        "levelType": "mediumslow",
        "exp": 216,
        "eggCycles": 20
    },
    {
        "id": 46,
        "name": "Paras",
        "catchRate": 190,
        "evolution": "Parasect",
        "evoLevel": 24,
        "type": [
            "Bug",
            "Grass"
        ],
        "attack": 70,
        "levelType": "mediumfast",
        "exp": 57,
        "eggCycles": 20
    },
    {
        "id": 47,
        "name": "Parasect",
        "catchRate": 75,
        "type": [
            "Bug",
            "Grass"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 48,
        "name": "Venonat",
        "catchRate": 190,
        "evolution": "Venomoth",
        "evoLevel": 31,
        "type": [
            "Bug",
            "Poison"
        ],
        "attack": 55,
        "levelType": "mediumfast",
        "exp": 61,
        "eggCycles": 20
    },
    {
        "id": 49,
        "name": "Venomoth",
        "catchRate": 75,
        "type": [
            "Bug",
            "Poison"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 158,
        "eggCycles": 20
    },
    {
        "id": 50,
        "name": "Diglett",
        "catchRate": 255,
        "evolution": "Dugtrio",
        "evoLevel": 26,
        "type": [
            "Ground"
        ],
        "attack": 55,
        "levelType": "mediumfast",
        "exp": 53,
        "eggCycles": 20
    },
    {
        "id": 51,
        "name": "Dugtrio",
        "catchRate": 50,
        "type": [
            "Ground"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 52,
        "name": "Meowth",
        "catchRate": 255,
        "evolution": "Persian",
        "evoLevel": 28,
        "type": [
            "Normal"
        ],
        "attack": 45,
        "levelType": "mediumfast",
        "exp": 58,
        "eggCycles": 20
    },
    {
        "id": 53,
        "name": "Persian",
        "catchRate": 90,
        "type": [
            "Normal"
        ],
        "attack": 70,
        "levelType": "mediumfast",
        "exp": 154,
        "eggCycles": 20
    },
    {
        "id": 54,
        "name": "Psyduck",
        "catchRate": 190,
        "evolution": "Golduck",
        "evoLevel": 33,
        "type": [
            "Water"
        ],
        "attack": 65,
        "levelType": "mediumfast",
        "exp": 64,
        "eggCycles": 20
    },
    {
        "id": 55,
        "name": "Golduck",
        "catchRate": 75,
        "type": [
            "Water"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 175,
        "eggCycles": 20
    },
    {
        "id": 56,
        "name": "Mankey",
        "catchRate": 190,
        "evolution": "Primeape",
        "evoLevel": 28,
        "type": [
            "Fighting"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 61,
        "eggCycles": 20
    },
    {
        "id": 57,
        "name": "Primeape",
        "catchRate": 75,
        "type": [
            "Fighting"
        ],
        "attack": 105,
        "levelType": "mediumfast",
        "exp": 159,
        "eggCycles": 20
    },
    {
        "id": 58,
        "name": "Growlithe",
        "catchRate": 190,
        "evolution": "Arcanine",
        "evoLevel": "Fire_stone",
        "type": [
            "Fire"
        ],
        "attack": 70,
        "levelType": "slow",
        "exp": 70,
        "eggCycles": 20
    },
    {
        "id": 59,
        "name": "Arcanine",
        "catchRate": 75,
        "type": [
            "Fire"
        ],
        "attack": 110,
        "levelType": "slow",
        "exp": 194,
        "eggCycles": 20
    },
    {
        "id": 60,
        "name": "Poliwag",
        "catchRate": 255,
        "evolution": "Poliwhirl",
        "evoLevel": 25,
        "type": [
            "Water"
        ],
        "attack": 50,
        "levelType": "mediumslow",
        "exp": 60,
        "eggCycles": 20
    },
    {
        "id": 61,
        "name": "Poliwhirl",
        "catchRate": 120,
        "evolution": ["Poliwrath", "Politoed"],
        "evoLevel": ["Water_stone", "Kings_rock"],
        "type": [
            "Water"
        ],
        "attack": 65,
        "levelType": "mediumslow",
        "exp": 135,
        "eggCycles": 20
    },
    {
        "id": 62,
        "name": "Poliwrath",
        "catchRate": 45,
        "type": [
            "Water",
            "Fighting"
        ],
        "attack": 95,
        "levelType": "mediumslow",
        "exp": 225,
        "eggCycles": 20
    },
    {
        "id": 63,
        "name": "Abra",
        "catchRate": 200,
        "evolution": "Kadabra",
        "evoLevel": 16,
        "type": [
            "Psychic"
        ],
        "attack": 105,
        "levelType": "mediumslow",
        "exp": 62,
        "eggCycles": 20
    },
    {
        "id": 64,
        "name": "Kadabra",
        "catchRate": 100,
        "evolution": "Alakazam",
        "evoLevel": "Trade_stone",
        "type": [
            "Psychic"
        ],
        "attack": 120,
        "levelType": "mediumslow",
        "exp": 140,
        "eggCycles": 20
    },
    {
        "id": 65,
        "name": "Alakazam",
        "catchRate": 50,
        "type": [
            "Psychic"
        ],
        "attack": 135,
        "levelType": "mediumslow",
        "exp": 221,
        "eggCycles": 20
    },
    {
        "id": 66,
        "name": "Machop",
        "catchRate": 180,
        "evolution": "Machoke",
        "evoLevel": 28,
        "type": [
            "Fighting"
        ],
        "attack": 80,
        "levelType": "mediumslow",
        "exp": 61,
        "eggCycles": 20
    },
    {
        "id": 67,
        "name": "Machoke",
        "catchRate": 90,
        "evolution": "Machamp",
        "evoLevel": "Trade_stone",
        "type": [
            "Fighting"
        ],
        "attack": 100,
        "levelType": "mediumslow",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 68,
        "name": "Machamp",
        "catchRate": 45,
        "type": [
            "Fighting"
        ],
        "attack": 130,
        "levelType": "mediumslow",
        "exp": 227,
        "eggCycles": 20
    },
    {
        "id": 69,
        "name": "Bellsprout",
        "catchRate": 255,
        "evolution": "Weepinbell",
        "evoLevel": 21,
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 75,
        "levelType": "mediumslow",
        "exp": 60,
        "eggCycles": 20
    },
    {
        "id": 70,
        "name": "Weepinbell",
        "catchRate": 120,
        "evolution": "Victreebel",
        "evoLevel": "Leaf_stone",
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 90,
        "levelType": "mediumslow",
        "exp": 137,
        "eggCycles": 20
    },
    {
        "id": 71,
        "name": "Victreebel",
        "catchRate": 45,
        "type": [
            "Grass",
            "Poison"
        ],
        "attack": 105,
        "levelType": "mediumslow",
        "exp": 216,
        "eggCycles": 20
    },
    {
        "id": 72,
        "name": "Tentacool",
        "catchRate": 190,
        "evolution": "Tentacruel",
        "evoLevel": 30,
        "type": [
            "Water",
            "Poison"
        ],
        "attack": 50,
        "levelType": "slow",
        "exp": 67,
        "eggCycles": 20
    },
    {
        "id": 73,
        "name": "Tentacruel",
        "catchRate": 60,
        "type": [
            "Water",
            "Poison"
        ],
        "attack": 80,
        "levelType": "slow",
        "exp": 180,
        "eggCycles": 20
    },
    {
        "id": 74,
        "name": "Geodude",
        "catchRate": 255,
        "evolution": "Graveler",
        "evoLevel": 25,
        "type": [
            "Rock",
            "Ground"
        ],
        "attack": 80,
        "levelType": "mediumslow",
        "exp": 60,
        "eggCycles": 15
    },
    {
        "id": 75,
        "name": "Graveler",
        "catchRate": 120,
        "evolution": "Golem",
        "evoLevel": "Trade_stone",
        "type": [
            "Rock",
            "Ground"
        ],
        "attack": 95,
        "levelType": "mediumslow",
        "exp": 137,
        "eggCycles": 15
    },
    {
        "id": 76,
        "name": "Golem",
        "catchRate": 45,
        "type": [
            "Rock",
            "Ground"
        ],
        "attack": 120,
        "levelType": "mediumslow",
        "exp": 218,
        "eggCycles": 15
    },
    {
        "id": 77,
        "name": "Ponyta",
        "catchRate": 190,
        "evolution": "Rapidash",
        "evoLevel": 40,
        "type": [
            "Fire"
        ],
        "attack": 85,
        "levelType": "mediumfast",
        "exp": 82,
        "eggCycles": 20
    },
    {
        "id": 78,
        "name": "Rapidash",
        "catchRate": 60,
        "type": [
            "Fire"
        ],
        "attack": 100,
        "levelType": "mediumfast",
        "exp": 175,
        "eggCycles": 20
    },
    {
        "id": 79,
        "name": "Slowpoke",
        "catchRate": 190,
        "evolution": ["Slowbro", "Slowking"],
        "evoLevel": [37, "Kings_rock"],
        "type": [
            "Water",
            "Psychic"
        ],
        "attack": 65,
        "levelType": "mediumfast",
        "exp": 63,
        "eggCycles": 20
    },
    {
        "id": 80,
        "name": "Slowbro",
        "catchRate": 75,
        "type": [
            "Water",
            "Psychic"
        ],
        "attack": 100,
        "levelType": "mediumfast",
        "exp": 172,
        "eggCycles": 20
    },
    {
        "id": 81,
        "name": "Magnemite",
        "catchRate": 190,
        "evolution": "Magneton",
        "evoLevel": 30,
        "type": [
            "Electric",
            "Steel"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 65,
        "eggCycles": 20
    },
    {
        "id": 82,
        "name": "Magneton",
        "catchRate": 60,
        "type": [
            "Electric",
            "Steel"
        ],
        "attack": 120,
        "levelType": "mediumfast",
        "exp": 163,
        "eggCycles": 20
    },
    {
        "id": 83,
        "name": "Farfetch'd",
        "catchRate": 45,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 65,
        "levelType": "mediumfast",
        "exp": 123,
        "eggCycles": 20
    },
    {
        "id": 84,
        "name": "Doduo",
        "catchRate": 190,
        "evolution": "Dodrio",
        "evoLevel": 31,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 85,
        "levelType": "mediumfast",
        "exp": 62,
        "eggCycles": 20
    },
    {
        "id": 85,
        "name": "Dodrio",
        "catchRate": 45,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 110,
        "levelType": "mediumfast",
        "exp": 161,
        "eggCycles": 20
    },
    {
        "id": 86,
        "name": "Seel",
        "catchRate": 190,
        "evolution": "Dewgong",
        "evoLevel": 34,
        "type": [
            "Water"
        ],
        "attack": 45,
        "levelType": "mediumfast",
        "exp": 65,
        "eggCycles": 20
    },
    {
        "id": 87,
        "name": "Dewgong",
        "catchRate": 75,
        "type": [
            "Water",
            "Ice"
        ],
        "attack": 70,
        "levelType": "mediumfast",
        "exp": 166,
        "eggCycles": 20
    },
    {
        "id": 88,
        "name": "Grimer",
        "catchRate": 190,
        "evolution": "Muk",
        "evoLevel": 38,
        "type": [
            "Poison"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 65,
        "eggCycles": 20
    },
    {
        "id": 89,
        "name": "Muk",
        "catchRate": 75,
        "type": [
            "Poison"
        ],
        "attack": 105,
        "levelType": "mediumfast",
        "exp": 175,
        "eggCycles": 20
    },
    {
        "id": 90,
        "name": "Shellder",
        "catchRate": 190,
        "evolution": "Cloyster",
        "evoLevel": "Water_stone",
        "type": [
            "Water"
        ],
        "attack": 65,
        "levelType": "slow",
        "exp": 61,
        "eggCycles": 20
    },
    {
        "id": 91,
        "name": "Cloyster",
        "catchRate": 60,
        "type": [
            "Water",
            "Ice"
        ],
        "attack": 95,
        "levelType": "slow",
        "exp": 184,
        "eggCycles": 20
    },
    {
        "id": 92,
        "name": "Gastly",
        "catchRate": 190,
        "evolution": "Haunter",
        "evoLevel": 25,
        "type": [
            "Ghost",
            "Poison"
        ],
        "attack": 100,
        "levelType": "mediumslow",
        "exp": 62,
        "eggCycles": 20
    },
    {
        "id": 93,
        "name": "Haunter",
        "catchRate": 90,
        "evolution": "Gengar",
        "evoLevel": "Trade_stone",
        "type": [
            "Ghost",
            "Poison"
        ],
        "attack": 115,
        "levelType": "mediumslow",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 94,
        "name": "Gengar",
        "catchRate": 45,
        "type": [
            "Ghost",
            "Poison"
        ],
        "attack": 130,
        "levelType": "mediumslow",
        "exp": 225,
        "eggCycles": 20
    },
    {
        "id": 95,
        "name": "Onix",
        "catchRate": 45,
        "evolution": "Steelix",
        "evoLevel": "Metal_coat",
        "type": [
            "Rock",
            "Ground"
        ],
        "attack": 45,
        "levelType": "mediumfast",
        "exp": 77,
        "eggCycles": 25
    },
    {
        "id": 96,
        "name": "Drowzee",
        "catchRate": 190,
        "evolution": "Hypno",
        "evoLevel": 26,
        "type": [
            "Psychic"
        ],
        "attack": 48,
        "levelType": "mediumfast",
        "exp": 66,
        "eggCycles": 20
    },
    {
        "id": 97,
        "name": "Hypno",
        "catchRate": 75,
        "type": [
            "Psychic"
        ],
        "attack": 73,
        "levelType": "mediumfast",
        "exp": 169,
        "eggCycles": 20
    },
    {
        "id": 98,
        "name": "Krabby",
        "catchRate": 225,
        "evolution": "Kingler",
        "evoLevel": 28,
        "type": [
            "Water"
        ],
        "attack": 105,
        "levelType": "mediumfast",
        "exp": 65,
        "eggCycles": 20
    },
    {
        "id": 99,
        "name": "Kingler",
        "catchRate": 60,
        "type": [
            "Water"
        ],
        "attack": 130,
        "levelType": "mediumfast",
        "exp": 166,
        "eggCycles": 20
    },
    {
        "id": 100,
        "name": "Voltorb",
        "catchRate": 190,
        "evolution": "Electrode",
        "evoLevel": 30,
        "type": [
            "Electric"
        ],
        "attack": 55,
        "levelType": "mediumfast",
        "exp": 66,
        "eggCycles": 20
    },
    {
        "id": 101,
        "name": "Electrode",
        "catchRate": 60,
        "type": [
            "Electric"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 168,
        "eggCycles": 20
    },
    {
        "id": 102,
        "name": "Exeggcute",
        "catchRate": 90,
        "evolution": "Exeggutor",
        "evoLevel": "Leaf_stone",
        "type": [
            "Grass",
            "Psychic"
        ],
        "attack": 60,
        "levelType": "slow",
        "exp": 65,
        "eggCycles": 20
    },
    {
        "id": 103,
        "name": "Exeggutor",
        "catchRate": 45,
        "type": [
            "Grass",
            "Psychic"
        ],
        "attack": 125,
        "levelType": "slow",
        "exp": 182,
        "eggCycles": 20
    },
    {
        "id": 104,
        "name": "Cubone",
        "catchRate": 190,
        "evolution": "Marowak",
        "evoLevel": 28,
        "type": [
            "Ground"
        ],
        "attack": 50,
        "levelType": "mediumfast",
        "exp": 64,
        "eggCycles": 20
    },
    {
        "id": 105,
        "name": "Marowak",
        "catchRate": 75,
        "type": [
            "Ground"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 149,
        "eggCycles": 20
    },
    {
        "id": 106,
        "name": "Hitmonlee",
        "catchRate": 45,
        "type": [
            "Fighting"
        ],
        "attack": 120,
        "levelType": "mediumfast",
        "exp": 159,
        "eggCycles": 25
    },
    {
        "id": 107,
        "name": "Hitmonchan",
        "catchRate": 45,
        "type": [
            "Fighting"
        ],
        "attack": 105,
        "levelType": "mediumfast",
        "exp": 159,
        "eggCycles": 25
    },
    {
        "id": 108,
        "name": "Lickitung",
        "catchRate": 45,
        "type": [
            "Normal"
        ],
        "attack": 60,
        "levelType": "mediumfast",
        "exp": 77,
        "eggCycles": 20
    },
    {
        "id": 109,
        "name": "Koffing",
        "catchRate": 190,
        "evolution": "Weezing",
        "evoLevel": 35,
        "type": [
            "Poison"
        ],
        "attack": 65,
        "levelType": "mediumfast",
        "exp": 68,
        "eggCycles": 20
    },
    {
        "id": 110,
        "name": "Weezing",
        "catchRate": 60,
        "type": [
            "Poison"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 172,
        "eggCycles": 20
    },
    {
        "id": 111,
        "name": "Rhyhorn",
        "catchRate": 120,
        "evolution": "Rhydon",
        "evoLevel": 42,
        "type": [
            "Ground",
            "Rock"
        ],
        "attack": 85,
        "levelType": "slow",
        "exp": 69,
        "eggCycles": 20
    },
    {
        "id": 112,
        "name": "Rhydon",
        "catchRate": 60,
        "type": [
            "Ground",
            "Rock"
        ],
        "attack": 130,
        "levelType": "slow",
        "exp": 170,
        "eggCycles": 20
    },
    {
        "id": 113,
        "name": "Chansey",
        "catchRate": 30,
        "evolution": "Blissey",
        "evoLevel": 100,
        "type": [
            "Normal"
        ],
        "attack": 35,
        "levelType": "fast",
        "exp": 395,
        "eggCycles": 40
    },
    {
        "id": 114,
        "name": "Tangela",
        "catchRate": 45,
        "type": [
            "Grass"
        ],
        "attack": 100,
        "levelType": "mediumfast",
        "exp": 87,
        "eggCycles": 20
    },
    {
        "id": 115,
        "name": "Kangaskhan",
        "catchRate": 45,
        "type": [
            "Normal"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 172,
        "eggCycles": 20
    },
    {
        "id": 116,
        "name": "Horsea",
        "catchRate": 225,
        "evolution": "Seadra",
        "evoLevel": 32,
        "type": [
            "Water"
        ],
        "attack": 70,
        "levelType": "mediumfast",
        "exp": 59,
        "eggCycles": 20
    },
    {
        "id": 117,
        "name": "Seadra",
        "catchRate": 75,
        "evolution": "Kingdra",
        "evoLevel": "Dragon_scale",
        "type": [
            "Water"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 154,
        "eggCycles": 20
    },
    {
        "id": 118,
        "name": "Goldeen",
        "catchRate": 225,
        "evolution": "Seaking",
        "evoLevel": 33,
        "type": [
            "Water"
        ],
        "attack": 67,
        "levelType": "mediumfast",
        "exp": 64,
        "eggCycles": 20
    },
    {
        "id": 119,
        "name": "Seaking",
        "catchRate": 60,
        "type": [
            "Water"
        ],
        "attack": 92,
        "levelType": "mediumfast",
        "exp": 158,
        "eggCycles": 20
    },
    {
        "id": 120,
        "name": "Staryu",
        "catchRate": 225,
        "evolution": "Starmie",
        "evoLevel": "Water_stone",
        "type": [
            "Water"
        ],
        "attack": 70,
        "levelType": "slow",
        "exp": 68,
        "eggCycles": 20
    },
    {
        "id": 121,
        "name": "Starmie",
        "catchRate": 60,
        "type": [
            "Water",
            "Psychic"
        ],
        "attack": 100,
        "levelType": "slow",
        "exp": 182,
        "eggCycles": 20
    },
    {
        "id": 122,
        "name": "Mr. Mime",
        "catchRate": 45,
        "type": [
            "Psychic",
            "Fairy"
        ],
        "attack": 100,
        "levelType": "mediumfast",
        "exp": 161,
        "eggCycles": 25
    },
    {
        "id": 123,
        "name": "Scyther",
        "catchRate": 45,
        "evolution": "Scizor",
        "evoLevel": "Metal_coat",
        "type": [
            "Bug",
            "Flying"
        ],
        "attack": 110,
        "levelType": "mediumfast",
        "exp": 100,
        "eggCycles": 25
    },
    {
        "id": 124,
        "name": "Jynx",
        "catchRate": 45,
        "type": [
            "Ice",
            "Psychic"
        ],
        "attack": 115,
        "levelType": "mediumfast",
        "exp": 159,
        "eggCycles": 25
    },
    {
        "id": 125,
        "name": "Electabuzz",
        "catchRate": 45,
        "type": [
            "Electric"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 172,
        "eggCycles": 25
    },
    {
        "id": 126,
        "name": "Magmar",
        "catchRate": 45,
        "type": [
            "Fire"
        ],
        "attack": 100,
        "levelType": "mediumfast",
        "exp": 173,
        "eggCycles": 25
    },
    {
        "id": 127,
        "name": "Pinsir",
        "catchRate": 45,
        "type": [
            "Bug"
        ],
        "attack": 125,
        "levelType": "slow",
        "exp": 175,
        "eggCycles": 25
    },
    {
        "id": 128,
        "name": "Tauros",
        "catchRate": 45,
        "type": [
            "Normal"
        ],
        "attack": 100,
        "levelType": "slow",
        "exp": 172,
        "eggCycles": 20
    },
    {
        "id": 129,
        "name": "Magikarp",
        "catchRate": 255,
        "evolution": "Gyarados",
        "evoLevel": 20,
        "type": [
            "Water"
        ],
        "attack": 15,
        "levelType": "slow",
        "exp": 40,
        "eggCycles": 5
    },
    {
        "id": 130,
        "name": "Gyarados",
        "catchRate": 45,
        "type": [
            "Water",
            "Flying"
        ],
        "attack": 125,
        "levelType": "slow",
        "exp": 189,
        "eggCycles": 5
    },
    {
        "id": 131,
        "name": "Lapras",
        "catchRate": 45,
        "type": [
            "Water",
            "Ice"
        ],
        "attack": 85,
        "levelType": "slow",
        "exp": 187,
        "eggCycles": 40
    },
    {
        "id": 132,
        "name": "Ditto",
        "catchRate": 35,
        "type": [
            "Normal"
        ],
        "attack": 48,
        "levelType": "mediumfast",
        "exp": 101,
        "eggCycles": 20
    },
    {
        "id": 133,
        "name": "Eevee",
        "catchRate": 45,
        "evolution": ["Vaporeon", "Jolteon", "Flareon", ["Espeon", "Umbreon"]],
        "evoLevel": ["Water_stone", "Thunder_stone", "Fire_stone", "Time_stone"],
        "type": [
            "Normal"
        ],
        "attack": 55,
        "levelType": "mediumfast",
        "exp": 65,
        "eggCycles": 35
    },
    {
        "id": 134,
        "name": "Vaporeon",
        "catchRate": 45,
        "type": [
            "Water"
        ],
        "attack": 110,
        "levelType": "mediumfast",
        "exp": 184,
        "eggCycles": 35
    },
    {
        "id": 135,
        "name": "Jolteon",
        "catchRate": 45,
        "type": [
            "Electric"
        ],
        "attack": 110,
        "levelType": "mediumfast",
        "exp": 184,
        "eggCycles": 35
    },
    {
        "id": 136,
        "name": "Flareon",
        "catchRate": 45,
        "type": [
            "Fire"
        ],
        "attack": 130,
        "levelType": "mediumfast",
        "exp": 184,
        "eggCycles": 35
    },
    {
        "id": 137,
        "name": "Porygon",
        "catchRate": 45,
        "evolution": "Porygon2",
        "evoLevel": "Upgrade",
        "type": [
            "Normal"
        ],
        "attack": 85,
        "levelType": "mediumfast",
        "exp": 79,
        "eggCycles": 20
    },
    {
        "id": 138,
        "name": "Omanyte",
        "catchRate": 45,
        "evolution": "Omastar",
        "evoLevel": 40,
        "type": [
            "Rock",
            "Water"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 71,
        "eggCycles": 30
    },
    {
        "id": 139,
        "name": "Omastar",
        "catchRate": 45,
        "type": [
            "Rock",
            "Water"
        ],
        "attack": 115,
        "levelType": "mediumfast",
        "exp": 173,
        "eggCycles": 30
    },
    {
        "id": 140,
        "name": "Kabuto",
        "catchRate": 45,
        "evolution": "Kabutops",
        "evoLevel": 40,
        "type": [
            "Rock",
            "Water"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 71,
        "eggCycles": 30
    },
    {
        "id": 141,
        "name": "Kabutops",
        "catchRate": 45,
        "type": [
            "Rock",
            "Water"
        ],
        "attack": 115,
        "levelType": "mediumfast",
        "exp": 173,
        "eggCycles": 30
    },
    {
        "id": 142,
        "name": "Aerodactyl",
        "catchRate": 45,
        "type": [
            "Rock",
            "Flying"
        ],
        "attack": 105,
        "levelType": "slow",
        "exp": 180,
        "eggCycles": 30
    },
    {
        "id": 143,
        "name": "Snorlax",
        "catchRate": 25,
        "type": [
            "Normal"
        ],
        "attack": 110,
        "levelType": "slow",
        "exp": 189,
        "eggCycles": 40
    },
    {
        "id": 144,
        "name": "Articuno",
        "catchRate": 3,
        "type": [
            "Ice",
            "Flying"
        ],
        "attack": 95,
        "levelType": "slow",
        "exp": 261,
        "eggCycles": 80
    },
    {
        "id": 145,
        "name": "Zapdos",
        "catchRate": 3,
        "type": [
            "Electric",
            "Flying"
        ],
        "attack": 125,
        "levelType": "slow",
        "exp": 261,
        "eggCycles": 80
    },
    {
        "id": 146,
        "name": "Moltres",
        "catchRate": 3,
        "type": [
            "Fire",
            "Flying"
        ],
        "attack": 125,
        "levelType": "slow",
        "exp": 261,
        "eggCycles": 80
    },
    {
        "id": 147,
        "name": "Dratini",
        "catchRate": 45,
        "evolution": "Dragonair",
        "evoLevel": 30,
        "type": [
            "Dragon"
        ],
        "attack": 64,
        "levelType": "slow",
        "exp": 60,
        "eggCycles": 40
    },
    {
        "id": 148,
        "name": "Dragonair",
        "catchRate": 45,
        "evolution": "Dragonite",
        "evoLevel": 55,
        "type": [
            "Dragon"
        ],
        "attack": 84,
        "levelType": "slow",
        "exp": 147,
        "eggCycles": 40
    },
    {
        "id": 149,
        "name": "Dragonite",
        "catchRate": 45,
        "type": [
            "Dragon",
            "Flying"
        ],
        "attack": 134,
        "levelType": "slow",
        "exp": 270,
        "eggCycles": 40
    },
    {
        "id": 150,
        "name": "Mewtwo",
        "catchRate": 3,
        "type": [
            "Psychic"
        ],
        "attack": 154,
        "levelType": "slow",
        "exp": 306,
        "eggCycles": 120
    },
    {
        "id": 151,
        "name": "Mew",
        "catchRate": 45,
        "type": [
            "Psychic"
        ],
        "attack": 100,
        "levelType": "mediumslow",
        "exp": 270,
        "eggCycles": 120
    },
    {
        "id": 152,
        "name": "Chikorita",
        "catchRate": 45,
        "evolution": "Bayleef",
        "evoLevel": 16,
        "type": [
            "Grass"
        ],
        "attack": 65,
        "levelType": "mediumslow",
        "exp": 64,
        "eggCycles": 20
    },
    {
        "id": 153,
        "name": "Bayleef",
        "catchRate": 45,
        "evolution": "Meganium",
        "evoLevel": 32,
        "type": [
            "Grass"
        ],
        "attack": 80,
        "levelType": "mediumslow",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 154,
        "name": "Meganium",
        "catchRate": 45,
        "type": [
            "Grass"
        ],
        "attack": 100,
        "levelType": "mediumslow",
        "exp": 236,
        "eggCycles": 20
    },
    {
        "id": 155,
        "name": "Cyndaquil",
        "catchRate": 45,
        "evolution": "Quilava",
        "evoLevel": 14,
        "type": [
            "Fire"
        ],
        "attack": 52,
        "levelType": "mediumslow",
        "exp": 62,
        "eggCycles": 20
    },
    {
        "id": 156,
        "name": "Quilava",
        "catchRate": 45,
        "evolution": "Typhlosion",
        "evoLevel": 36,
        "type": [
            "Fire"
        ],
        "attack": 65,
        "levelType": "mediumslow",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 157,
        "name": "Typhlosion",
        "catchRate": 45,
        "type": [
            "Fire"
        ],
        "attack": 85,
        "levelType": "mediumslow",
        "exp": 240,
        "eggCycles": 20
    },
    {
        "id": 158,
        "name": "Totodile",
        "catchRate": 45,
        "evolution": "Croconaw",
        "evoLevel": 18,
        "type": [
            "Water"
        ],
        "attack": 65,
        "levelType": "mediumslow",
        "exp": 63,
        "eggCycles": 20
    },
    {
        "id": 159,
        "name": "Croconaw",
        "catchRate": 45,
        "evolution": "Feraligatr",
        "evoLevel": 30,
        "type": [
            "Water"
        ],
        "attack": 80,
        "levelType": "mediumslow",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 160,
        "name": "Feraligatr",
        "catchRate": 45,
        "type": [
            "Water"
        ],
        "attack": 105,
        "levelType": "mediumslow",
        "exp": 239,
        "eggCycles": 20
    },
    {
        "id": 161,
        "name": "Sentret",
        "catchRate": 255,
        "evolution": "Furret",
        "evoLevel": 15,
        "type": [
            "Normal"
        ],
        "attack": 46,
        "levelType": "mediumfast",
        "exp": 43,
        "eggCycles": 15
    },
    {
        "id": 162,
        "name": "Furret",
        "catchRate": 90,
        "type": [
            "Normal"
        ],
        "attack": 76,
        "levelType": "mediumfast",
        "exp": 145,
        "eggCycles": 15
    },
    {
        "id": 163,
        "name": "Hoothoot",
        "catchRate": 255,
        "evolution": "Noctowl",
        "evoLevel": 20,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 56,
        "levelType": "mediumfast",
        "exp": 52,
        "eggCycles": 15
    },
    {
        "id": 164,
        "name": "Noctowl",
        "catchRate": 90,
        "type": [
            "Normal",
            "Flying"
        ],
        "attack": 96,
        "levelType": "mediumfast",
        "exp": 158,
        "eggCycles": 15
    },
    {
        "id": 165,
        "name": "Ledyba",
        "catchRate": 255,
        "evolution": "Ledian",
        "evoLevel": 18,
        "type": [
            "Bug",
            "Flying"
        ],
        "attack": 80,
        "levelType": "fast",
        "exp": 53,
        "eggCycles": 15
    },
    {
        "id": 166,
        "name": "Ledian",
        "catchRate": 90,
        "type": [
            "Bug",
            "Flying"
        ],
        "attack": 110,
        "levelType": "fast",
        "exp": 137,
        "eggCycles": 15
    },
    {
        "id": 167,
        "name": "Spinarak",
        "catchRate": 255,
        "evolution": "Ariados",
        "evoLevel": 22,
        "type": [
            "Bug",
            "Poison"
        ],
        "attack": 60,
        "levelType": "fast",
        "exp": 50,
        "eggCycles": 15
    },
    {
        "id": 168,
        "name": "Ariados",
        "catchRate": 90,
        "type": [
            "Bug",
            "Poison"
        ],
        "attack": 90,
        "levelType": "fast",
        "exp": 140,
        "eggCycles": 15
    },
    {
        "id": 169,
        "name": "Crobat",
        "catchRate": 90,
        "type": [
            "Poison",
            "Flying"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 241,
        "eggCycles": 15
    },
    {
        "id": 170,
        "name": "Chinchou",
        "catchRate": 190,
        "evolution": "Lanturn",
        "evoLevel": 27,
        "type": [
            "Water",
            "Electric"
        ],
        "attack": 56,
        "levelType": "slow",
        "exp": 66,
        "eggCycles": 20
    },
    {
        "id": 171,
        "name": "Lanturn",
        "catchRate": 75,
        "type": [
            "Water",
            "Electric"
        ],
        "attack": 76,
        "levelType": "slow",
        "exp": 161,
        "eggCycles": 20
    },
    {
        "id": 172,
        "name": "Pichu",
        "catchRate": 190,
        "evolution": "Pikachu",
        "evoLevel": 100,
        "type": [
            "Electric"
        ],
        "attack": 40,
        "levelType": "mediumfast",
        "exp": 41,
        "eggCycles": 10
    },
    {
        "id": 173,
        "name": "Cleffa",
        "catchRate": 150,
        "evolution": "Clefairy",
        "evoLevel": 100,
        "type": [
            "Fairy"
        ],
        "attack": 55,
        "levelType": "fast",
        "exp": 44,
        "eggCycles": 10
    },
    {
        "id": 174,
        "name": "Igglybuff",
        "catchRate": 170,
        "evolution": "Jigglypuff",
        "evoLevel": 100,
        "type": [
            "Normal",
            "Fairy"
        ],
        "attack": 30,
        "levelType": "fast",
        "exp": 42,
        "eggCycles": 10
    },
    {
        "id": 175,
        "name": "Togepi",
        "catchRate": 190,
        "evolution": "Togetic",
        "evoLevel": 100,
        "type": [
            "Fairy"
        ],
        "attack": 65,
        "levelType": "fast",
        "exp": 49,
        "eggCycles": 10
    },
    {
        "id": 176,
        "name": "Togetic",
        "catchRate": 75,
        "type": [
            "Fairy",
            "Flying"
        ],
        "attack": 105,
        "levelType": "fast",
        "exp": 142,
        "eggCycles": 10
    },
    {
        "id": 177,
        "name": "Natu",
        "catchRate": 190,
        "evolution": "Xatu",
        "evoLevel": 25,
        "type": [
            "Psychic",
            "Flying"
        ],
        "attack": 50,
        "levelType": "mediumfast",
        "exp": 64,
        "eggCycles": 20
    },
    {
        "id": 178,
        "name": "Xatu",
        "catchRate": 75,
        "type": [
            "Psychic",
            "Flying"
        ],
        "attack": 75,
        "levelType": "mediumfast",
        "exp": 165,
        "eggCycles": 20
    },
    {
        "id": 179,
        "name": "Mareep",
        "catchRate": 235,
        "evolution": "Flaaffy",
        "evoLevel": 15,
        "type": [
            "Electric"
        ],
        "attack": 45,
        "levelType": "mediumslow",
        "exp": 56,
        "eggCycles": 20
    },
    {
        "id": 180,
        "name": "Flaaffy",
        "catchRate": 120,
        "evolution": "Ampharos",
        "evoLevel": 30,
        "type": [
            "Electric"
        ],
        "attack": 60,
        "levelType": "mediumslow",
        "exp": 128,
        "eggCycles": 20
    },
    {
        "id": 181,
        "name": "Ampharos",
        "catchRate": 45,
        "type": [
            "Electric"
        ],
        "attack": 110,
        "levelType": "mediumslow",
        "exp": 230,
        "eggCycles": 20
    },
    {
        "id": 182,
        "name": "Bellossom",
        "catchRate": 45,
        "type": [
            "Grass"
        ],
        "attack": 100,
        "levelType": "mediumslow",
        "exp": 221,
        "eggCycles": 20
    },
    {
        "id": 183,
        "name": "Marill",
        "catchRate": 190,
        "evolution": "Azumarill",
        "evoLevel": 18,
        "type": [
            "Water",
            "Fairy"
        ],
        "attack": 50,
        "levelType": "fast",
        "exp": 88,
        "eggCycles": 10
    },
    {
        "id": 184,
        "name": "Azumarill",
        "catchRate": 75,
        "type": [
            "Water",
            "Fairy"
        ],
        "attack": 80,
        "levelType": "fast",
        "exp": 189,
        "eggCycles": 10
    },
    {
        "id": 185,
        "name": "Sudowoodo",
        "catchRate": 65,
        "type": [
            "Rock"
        ],
        "attack": 100,
        "levelType": "mediumfast",
        "exp": 144,
        "eggCycles": 20
    },
    {
        "id": 186,
        "name": "Politoed",
        "catchRate": 45,
        "type": [
            "Water"
        ],
        "attack": 100,
        "levelType": "mediumslow",
        "exp": 225,
        "eggCycles": 20
    },
    {
        "id": 187,
        "name": "Hoppip",
        "catchRate": 255,
        "evolution": "Skiploom",
        "evoLevel": 18,
        "type": [
            "Grass",
            "Flying"
        ],
        "attack": 55,
        "levelType": "mediumslow",
        "exp": 50,
        "eggCycles": 20
    },
    {
        "id": 188,
        "name": "Skiploom",
        "catchRate": 120,
        "evolution": "Jumpluff",
        "evoLevel": 27,
        "type": [
            "Grass",
            "Flying"
        ],
        "attack": 65,
        "levelType": "mediumslow",
        "exp": 119,
        "eggCycles": 20
    },
    {
        "id": 189,
        "name": "Jumpluff",
        "catchRate": 45,
        "type": [
            "Grass",
            "Flying"
        ],
        "attack": 95,
        "levelType": "mediumslow",
        "exp": 207,
        "eggCycles": 20
    },
    {
        "id": 190,
        "name": "Aipom",
        "catchRate": 45,
        "type": [
            "Normal"
        ],
        "attack": 70,
        "levelType": "fast",
        "exp": 72,
        "eggCycles": 20
    },
    {
        "id": 191,
        "name": "Sunkern",
        "catchRate": 235,
        "evolution": "Sunflora",
        "evoLevel": "Sun_stone",
        "type": [
            "Grass"
        ],
        "attack": 30,
        "levelType": "mediumslow",
        "exp": 36,
        "eggCycles": 20
    },
    {
        "id": 192,
        "name": "Sunflora",
        "catchRate": 120,
        "type": [
            "Grass"
        ],
        "attack": 85,
        "levelType": "mediumslow",
        "exp": 149,
        "eggCycles": 20
    },
    {
        "id": 193,
        "name": "Yanma",
        "catchRate": 75,
        "type": [
            "Bug",
            "Flying"
        ],
        "attack": 65,
        "levelType": "mediumfast",
        "exp": 78,
        "eggCycles": 20
    },
    {
        "id": 194,
        "name": "Wooper",
        "catchRate": 255,
        "evolution": "Quagsire",
        "evoLevel": 20,
        "type": [
            "Water",
            "Ground"
        ],
        "attack": 45,
        "levelType": "mediumfast",
        "exp": 42,
        "eggCycles": 20
    },
    {
        "id": 195,
        "name": "Quagsire",
        "catchRate": 90,
        "type": [
            "Water",
            "Ground"
        ],
        "attack": 85,
        "levelType": "mediumfast",
        "exp": 151,
        "eggCycles": 20
    },
    {
        "id": 196,
        "name": "Espeon",
        "catchRate": 45,
        "type": [
            "Psychic"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 184,
        "eggCycles": 35
    },
    {
        "id": 197,
        "name": "Umbreon",
        "catchRate": 45,
        "type": [
            "Dark"
        ],
        "attack": 130,
        "levelType": "mediumfast",
        "exp": 184,
        "eggCycles": 35
    },
    {
        "id": 198,
        "name": "Murkrow",
        "catchRate": 30,
        "type": [
            "Dark",
            "Flying"
        ],
        "attack": 85,
        "levelType": "mediumslow",
        "exp": 81,
        "eggCycles": 20
    },
    {
        "id": 199,
        "name": "Slowking",
        "catchRate": 70,
        "type": [
            "Water",
            "Psychic"
        ],
        "attack": 110,
        "levelType": "mediumfast",
        "exp": 172,
        "eggCycles": 20
    },
    {
        "id": 200,
        "name": "Misdreavus",
        "catchRate": 45,
        "type": [
            "Ghost"
        ],
        "attack": 85,
        "levelType": "fast",
        "exp": 87,
        "eggCycles": 25
    },
    {
        "id": 201,
        "name": "Unown",
        "catchRate": 225,
        "type": [
            "Psychic"
        ],
        "attack": 72,
        "levelType": "mediumfast",
        "exp": 118,
        "eggCycles": 40
    },
    {
        "id": 202,
        "name": "Wobbuffet",
        "catchRate": 45,
        "type": [
            "Psychic"
        ],
        "attack": 58,
        "levelType": "mediumfast",
        "exp": 142,
        "eggCycles": 20
    },
    {
        "id": 203,
        "name": "Girafarig",
        "catchRate": 60,
        "type": [
            "Normal",
            "Psychic"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 159,
        "eggCycles": 20
    },
    {
        "id": 204,
        "name": "Pineco",
        "catchRate": 190,
        "evolution": "Forretress",
        "evoLevel": 31,
        "type": [
            "Bug"
        ],
        "attack": 65,
        "levelType": "mediumfast",
        "exp": 58,
        "eggCycles": 20
    },
    {
        "id": 205,
        "name": "Forretress",
        "catchRate": 75,
        "type": [
            "Bug",
            "Steel"
        ],
        "attack": 90,
        "levelType": "mediumfast",
        "exp": 163,
        "eggCycles": 20
    },
    {
        "id": 206,
        "name": "Dunsparce",
        "catchRate": 190,
        "type": [
            "Normal"
        ],
        "attack": 70,
        "levelType": "mediumfast",
        "exp": 145,
        "eggCycles": 20
    },
    {
        "id": 207,
        "name": "Gligar",
        "catchRate": 60,
        "type": [
            "Ground",
            "Flying"
        ],
        "attack": 75,
        "levelType": "mediumslow",
        "exp": 86,
        "eggCycles": 20
    },
    {
        "id": 208,
        "name": "Steelix",
        "catchRate": 25,
        "type": [
            "Steel",
            "Ground"
        ],
        "attack": 125,
        "levelType": "mediumfast",
        "exp": 179,
        "eggCycles": 25
    },
    {
        "id": 209,
        "name": "Snubbull",
        "catchRate": 190,
        "evolution": "Granbull",
        "evoLevel": 23,
        "type": [
            "Fairy"
        ],
        "attack": 80,
        "levelType": "fast",
        "exp": 60,
        "eggCycles": 20
    },
    {
        "id": 210,
        "name": "Granbull",
        "catchRate": 75,
        "type": [
            "Fairy"
        ],
        "attack": 120,
        "levelType": "fast",
        "exp": 158,
        "eggCycles": 20
    },
    {
        "id": 211,
        "name": "Qwilfish",
        "catchRate": 45,
        "type": [
            "Water",
            "Poison"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 88,
        "eggCycles": 20
    },
    {
        "id": 212,
        "name": "Scizor",
        "catchRate": 25,
        "type": [
            "Bug",
            "Steel"
        ],
        "attack": 150,
        "levelType": "mediumfast",
        "exp": 175,
        "eggCycles": 25
    },
    {
        "id": 213,
        "name": "Shuckle",
        "catchRate": 190,
        "type": [
            "Bug",
            "Rock"
        ],
        "attack": 230,
        "levelType": "mediumslow",
        "exp": 177,
        "eggCycles": 20
    },
    {
        "id": 214,
        "name": "Heracross",
        "catchRate": 45,
        "type": [
            "Bug",
            "Fighting"
        ],
        "attack": 185,
        "levelType": "slow",
        "exp": 175,
        "eggCycles": 25
    },
    {
        "id": 215,
        "name": "Sneasel",
        "catchRate": 60,
        "type": [
            "Dark",
            "Ice"
        ],
        "attack": 95,
        "levelType": "mediumslow",
        "exp": 86,
        "eggCycles": 20
    },
    {
        "id": 216,
        "name": "Teddiursa",
        "catchRate": 120,
        "evolution": "Ursaring",
        "evoLevel": 30,
        "type": [
            "Normal"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 66,
        "eggCycles": 20
    },
    {
        "id": 217,
        "name": "Ursaring",
        "catchRate": 60,
        "type": [
            "Normal"
        ],
        "attack": 130,
        "levelType": "mediumfast",
        "exp": 175,
        "eggCycles": 20
    },
    {
        "id": 218,
        "name": "Slugma",
        "catchRate": 190,
        "evolution": "Magcargo",
        "evoLevel": 38,
        "type": [
            "Fire"
        ],
        "attack": 40,
        "levelType": "mediumfast",
        "exp": 50,
        "eggCycles": 20
    },
    {
        "id": 219,
        "name": "Magcargo",
        "catchRate": 75,
        "type": [
            "Fire",
            "Rock"
        ],
        "attack": 80,
        "levelType": "mediumfast",
        "exp": 151,
        "eggCycles": 20
    },
    {
        "id": 220,
        "name": "Swinub",
        "catchRate": 225,
        "evolution": "Piloswine",
        "evoLevel": 33,
        "type": [
            "Ice",
            "Ground"
        ],
        "attack": 50,
        "levelType": "slow",
        "exp": 50,
        "eggCycles": 20
    },
    {
        "id": 221,
        "name": "Piloswine",
        "catchRate": 75,
        "type": [
            "Ice",
            "Ground"
        ],
        "attack": 100,
        "levelType": "slow",
        "exp": 158,
        "eggCycles": 20
    },
    {
        "id": 222,
        "name": "Corsola",
        "catchRate": 60,
        "type": [
            "Water",
            "Rock"
        ],
        "attack": 95,
        "levelType": "fast",
        "exp": 144,
        "eggCycles": 20
    },
    {
        "id": 223,
        "name": "Remoraid",
        "catchRate": 190,
        "evolution": "Octillery",
        "evoLevel": 25,
        "type": [
            "Water"
        ],
        "attack": 65,
        "levelType": "mediumfast",
        "exp": 60,
        "eggCycles": 20
    },
    {
        "id": 224,
        "name": "Octillery",
        "catchRate": 75,
        "type": [
            "Water"
        ],
        "attack": 105,
        "levelType": "mediumfast",
        "exp": 168,
        "eggCycles": 20
    },
    {
        "id": 225,
        "name": "Delibird",
        "catchRate": 45,
        "type": [
            "Ice",
            "Flying"
        ],
        "attack": 55,
        "levelType": "fast",
        "exp": 116,
        "eggCycles": 20
    },
    {
        "id": 226,
        "name": "Mantine",
        "catchRate": 25,
        "type": [
            "Water",
            "Flying"
        ],
        "attack": 140,
        "levelType": "slow",
        "exp": 170,
        "eggCycles": 25
    },
    {
        "id": 227,
        "name": "Skarmory",
        "catchRate": 25,
        "type": [
            "Steel",
            "Flying"
        ],
        "attack": 80,
        "levelType": "slow",
        "exp": 163,
        "eggCycles": 25
    },
    {
        "id": 228,
        "name": "Houndour",
        "catchRate": 120,
        "evolution": "Houndoom",
        "evoLevel": 24,
        "type": [
            "Dark",
            "Fire"
        ],
        "attack": 60,
        "levelType": "slow",
        "exp": 66,
        "eggCycles": 20
    },
    {
        "id": 229,
        "name": "Houndoom",
        "catchRate": 45,
        "type": [
            "Dark",
            "Fire"
        ],
        "attack": 90,
        "levelType": "slow",
        "exp": 175,
        "eggCycles": 20
    },
    {
        "id": 230,
        "name": "Kingdra",
        "catchRate": 45,
        "type": [
            "Water",
            "Dragon"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 243,
        "eggCycles": 20
    },
    {
        "id": 231,
        "name": "Phanpy",
        "catchRate": 120,
        "evolution": "Donphan",
        "evoLevel": 25,
        "type": [
            "Ground"
        ],
        "attack": 60,
        "levelType": "mediumfast",
        "exp": 66,
        "eggCycles": 20
    },
    {
        "id": 232,
        "name": "Donphan",
        "catchRate": 60,
        "type": [
            "Ground"
        ],
        "attack": 120,
        "levelType": "mediumfast",
        "exp": 175,
        "eggCycles": 20
    },
    {
        "id": 233,
        "name": "Porygon2",
        "catchRate": 45,
        "type": [
            "Normal"
        ],
        "attack": 95,
        "levelType": "mediumfast",
        "exp": 180,
        "eggCycles": 20
    },
    {
        "id": 234,
        "name": "Stantler",
        "catchRate": 45,
        "type": [
            "Normal"
        ],
        "attack": 95,
        "levelType": "slow",
        "exp": 163,
        "eggCycles": 20
    },
    {
        "id": 235,
        "name": "Smeargle",
        "catchRate": 45,
        "type": [
            "Normal"
        ],
        "attack": 45,
        "levelType": "fast",
        "exp": 88,
        "eggCycles": 20
    },
    {
        "id": 236,
        "name": "Tyrogue",
        "catchRate": 75,
        "evolution": [["Hitmonlee", "Hitmonchan", "Hitmontop"]],
        "evoLevel": [20],
        "type": [
            "Fighting"
        ],
        "attack": 35,
        "levelType": "mediumfast",
        "exp": 42,
        "eggCycles": 25
    },
    {
        "id": 237,
        "name": "Hitmontop",
        "catchRate": 45,
        "type": [
            "Fighting"
        ],
        "attack": 110,
        "levelType": "mediumfast",
        "exp": 159,
        "eggCycles": 25
    },
    {
        "id": 238,
        "name": "Smoochum",
        "catchRate": 45,
        "evolution": "Jynx",
        "evoLevel": 30,
        "type": [
            "Ice",
            "Psychic"
        ],
        "attack": 65,
        "levelType": "mediumfast",
        "exp": 61,
        "eggCycles": 25
    },
    {
        "id": 239,
        "name": "Elekid",
        "catchRate": 45,
        "evolution": "Electabuzz",
        "evoLevel": 30,
        "type": [
            "Electric"
        ],
        "attack": 63,
        "levelType": "mediumfast",
        "exp": 72,
        "eggCycles": 25
    },
    {
        "id": 240,
        "name": "Magby",
        "catchRate": 45,
        "evolution": "Magmar",
        "evoLevel": 30,
        "type": [
            "Fire"
        ],
        "attack": 75,
        "levelType": "mediumfast",
        "exp": 73,
        "eggCycles": 25
    },
    {
        "id": 241,
        "name": "Miltank",
        "catchRate": 45,
        "type": [
            "Normal"
        ],
        "attack": 80,
        "levelType": "slow",
        "exp": 172,
        "eggCycles": 20
    },
    {
        "id": 242,
        "name": "Blissey",
        "catchRate": 30,
        "type": [
            "Normal"
        ],
        "attack": 135,
        "levelType": "fast",
        "exp": 608,
        "eggCycles": 40
    },
    {
        "id": 243,
        "name": "Raikou",
        "catchRate": 3,
        "type": [
            "Electric"
        ],
        "attack": 100,
        "levelType": "slow",
        "exp": 261,
        "eggCycles": 80
    },
    {
        "id": 244,
        "name": "Entei",
        "catchRate": 3,
        "type": [
            "Fire"
        ],
        "attack": 115,
        "levelType": "slow",
        "exp": 261,
        "eggCycles": 80
    },
    {
        "id": 245,
        "name": "Suicune",
        "catchRate": 3,
        "type": [
            "Water"
        ],
        "attack": 115,
        "levelType": "slow",
        "exp": 261,
        "eggCycles": 80
    },
    {
        "id": 246,
        "name": "Larvitar",
        "catchRate": 45,
        "evolution": "Pupitar",
        "evoLevel": 30,
        "type": [
            "Rock",
            "Ground"
        ],
        "attack": 64,
        "levelType": "slow",
        "exp": 60,
        "eggCycles": 40
    },
    {
        "id": 247,
        "name": "Pupitar",
        "catchRate": 45,
        "evolution": "Tyranitar",
        "evoLevel": 55,
        "type": [
            "Rock",
            "Ground"
        ],
        "attack": 84,
        "levelType": "slow",
        "exp": 144,
        "eggCycles": 40
    },
    {
        "id": 248,
        "name": "Tyranitar",
        "catchRate": 45,
        "type": [
            "Rock",
            "Dark"
        ],
        "attack": 164,
        "levelType": "slow",
        "exp": 270,
        "eggCycles": 40
    },
    {
        "id": 249,
        "name": "Lugia",
        "catchRate": 3,
        "type": [
            "Psychic",
            "Flying"
        ],
        "attack": 154,
        "levelType": "slow",
        "exp": 306,
        "eggCycles": 120
    },
    {
        "id": 250,
        "name": "Ho-Oh",
        "catchRate": 3,
        "type": [
            "Fire",
            "Flying"
        ],
        "attack": 154,
        "levelType": "slow",
        "exp": 306,
        "eggCycles": 120
    },
    {
        "id": 251,
        "name": "Celebi",
        "catchRate": 45,
        "type": [
            "Psychic",
            "Grass"
        ],
        "attack": 100,
        "levelType": "mediumslow",
        "exp": 270,
        "eggCycles": 120
    }
];
// TODO move to its own initialize method that gets called on game start.
pokemonList.forEach(p => {
    if (p.evolution) {
        if (p.evolution.constructor !== Array) {
            p.evolution = [p.evolution];
        }
        p.evolution.forEach(evo => pokemonDevolutionMap[evo] = p.name);
    }
    if (p.evoLevel && p.evoLevel.constructor !== Array) {
        p.evoLevel = [p.evoLevel];
    }
    pokemonMap[p.name] = p;
    pokemonMapId[p.id] = p;
});
/**
 * Contains all game constants for easy access.
 */
var GameConstants;
(function (GameConstants) {
    // Ticks
    GameConstants.TICK_TIME = 10;
    GameConstants.BATTLE_TICK = 1000;
    GameConstants.UNDERGROUND_TICK = 1000;
    GameConstants.DUNGEON_TIME = 6000;
    GameConstants.DUNGEON_TICK = 1;
    GameConstants.FARM_TICK = 1000;
    GameConstants.SAVE_TICK = 10000;
    GameConstants.GYM_TIME = 3000;
    GameConstants.GYM_COUNTDOWN = 1000;
    GameConstants.GYM_TICK = 1;
    GameConstants.ACHIEVEMENT_TICK = 1000;
    GameConstants.MIN_LOAD_TIME = 500;
    GameConstants.AMOUNT_OF_POKEMONS = 251;
    GameConstants.AMOUNT_OF_POKEMONS_GEN1 = 151;
    GameConstants.AMOUNT_OF_POKEMONS_GEN2 = 251;
    GameConstants.AMOUNT_OF_BADGES = 16;
    GameConstants.ROAMING_MIN_CHANCE = 8192;
    GameConstants.ROAMING_MAX_CHANCE = 4096;
    GameConstants.RoamingPokemon = {
        0: ["Mew"],
        1: ["Raikou", "Entei", "Suicune"],
    };
    // Shinies
    GameConstants.SHINY_CHANCE_BATTLE = 8192;
    GameConstants.SHINY_CHANCE_DUNGEON = 4096;
    GameConstants.SHINY_CHANCE_BREEDING = 1024;
    GameConstants.SHINY_CHANCE_SHOP = 2048;
    GameConstants.SHINY_CHANCE_STONE = 4096;
    GameConstants.SHINY_CHANCE_SAFARI = 2048;
    GameConstants.ITEM_PRICE_MULTIPLIER = 1.001;
    GameConstants.ITEM_PRICE_DEDUCT = 1.0005;
    GameConstants.PLATE_VALUE = 25;
    // Oak items
    GameConstants.OAKITEM_XP_REQUIREMENT = [1000, 2500, 5000, 10000, 20000, Number.MAX_VALUE];
    GameConstants.OAKITEM_MONEY_COST = [1000, 2500, 5000, 10000, 20000, Number.MAX_VALUE,];
    GameConstants.AMOUNT_OF_OAKITEMS = 8;
    GameConstants.OAKITEM_MAX_LEVEL = 5;
    GameConstants.OAKITEM_FIRST_UNLOCK = 20;
    GameConstants.OAKITEM_SECOND_UNLOCK = 50;
    GameConstants.OAKITEM_THIRD_UNLOCK = 100;
    // Breeding
    GameConstants.BREEDING_AMOUNT = 1;
    GameConstants.BREEDING_ATTACK_BONUS = 25;
    // Farm
    GameConstants.AMOUNT_OF_BERRIES = 8;
    GameConstants.AMOUNT_OF_PLOTS = 25;
    GameConstants.BerryDistribution = [0.39, 0.63, 0.78, 0.87, 0.93, 0.96, 0.98, 1];
    let PlotStage;
    (function (PlotStage) {
        PlotStage[PlotStage["Seed"] = 0] = "Seed";
        PlotStage[PlotStage["Sprout"] = 1] = "Sprout";
        PlotStage[PlotStage["Taller"] = 2] = "Taller";
        PlotStage[PlotStage["Bloom"] = 3] = "Bloom";
        PlotStage[PlotStage["Berry"] = 4] = "Berry";
    })(PlotStage = GameConstants.PlotStage || (GameConstants.PlotStage = {}));
    let OakItem;
    (function (OakItem) {
        OakItem[OakItem["Magic_Ball"] = 0] = "Magic_Ball";
        OakItem[OakItem["Amulet_Coin"] = 1] = "Amulet_Coin";
        OakItem[OakItem["Poison_Barb"] = 2] = "Poison_Barb";
        OakItem[OakItem["Exp_Share"] = 3] = "Exp_Share";
        OakItem[OakItem["Sprayduck"] = 4] = "Sprayduck";
        OakItem[OakItem["Shiny_Charm"] = 5] = "Shiny_Charm";
        OakItem[OakItem["Blaze_Cassette"] = 6] = "Blaze_Cassette";
        OakItem[OakItem["Cell_Battery"] = 7] = "Cell_Battery";
    })(OakItem = GameConstants.OakItem || (GameConstants.OakItem = {}));
    // Dungeons
    GameConstants.DUNGEON_SIZE = 5;
    GameConstants.DUNGEON_CHEST_SHOW = 2;
    GameConstants.DUNGEON_MAP_SHOW = 4;
    // Achievements
    let AchievementOption;
    (function (AchievementOption) {
        AchievementOption[AchievementOption["less"] = 0] = "less";
        AchievementOption[AchievementOption["equal"] = 1] = "equal";
        AchievementOption[AchievementOption["more"] = 2] = "more";
    })(AchievementOption = GameConstants.AchievementOption || (GameConstants.AchievementOption = {}));
    let NotificationOption;
    (function (NotificationOption) {
        NotificationOption[NotificationOption["info"] = 0] = "info";
        NotificationOption[NotificationOption["success"] = 1] = "success";
        NotificationOption[NotificationOption["warning"] = 2] = "warning";
        NotificationOption[NotificationOption["danger"] = 3] = "danger";
    })(NotificationOption = GameConstants.NotificationOption || (GameConstants.NotificationOption = {}));
    let DungeonTile;
    (function (DungeonTile) {
        DungeonTile[DungeonTile["empty"] = 0] = "empty";
        DungeonTile[DungeonTile["enemy"] = 1] = "enemy";
        DungeonTile[DungeonTile["chest"] = 2] = "chest";
        DungeonTile[DungeonTile["boss"] = 3] = "boss";
    })(DungeonTile = GameConstants.DungeonTile || (GameConstants.DungeonTile = {}));
    //Shards
    GameConstants.SHARD_UPGRADE_COST = 500;
    GameConstants.SHARD_UPGRADE_STEP = 0.1;
    GameConstants.MAX_SHARD_UPGRADES = 10;
    GameConstants.DUNGEON_SHARDS = 3;
    GameConstants.DUNGEON_BOSS_SHARDS = 20;
    GameConstants.GYM_SHARDS = 5;
    //Safari
    GameConstants.Safari = {
        "SizeY": Math.floor((window.innerHeight - 74 - 50) / 32),
        "SizeX": 25,
    };
    GameConstants.SAFARI_BATTLE_CHANCE = 5;
    GameConstants.SAFARI_BASE_POKEBALL_COUNT = 30;
    GameConstants.LEGAL_WALK_BLOCKS = [
        0,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24
    ];
    GameConstants.SAFARI_CATCH_MESSAGES = [
        "Oh, no!<br>The Pokemon broke free!",
        "Aww! It appeared to be caught!",
        "Aargh! Almost had it!",
        "Shoot! It was so close, too!"
    ];
    GameConstants.SAFARI_OUT_OF_BALLS = "Game Over!<br>You have run out of safari balls to use.";
    //Quests
    // Numbers calculated by Dimava assumes ability to 1 shot on high routes and some use oak items,
    //   which are now nerfed slightly until upgraded, so those numbers may need further adjusting
    const questBase = 1; // change this to scale all quest points
    GameConstants.DEFEAT_POKEMONS_BASE_REWARD = questBase * 1;
    GameConstants.CAPTURE_POKEMONS_BASE_REWARD = GameConstants.DEFEAT_POKEMONS_BASE_REWARD / 0.8; // Defeat reward divided by chance to catch (guessed)
    GameConstants.GAIN_MONEY_BASE_REWARD = questBase * 0.0017; // Dimava
    GameConstants.GAIN_TOKENS_BASE_REWARD = GameConstants.CAPTURE_POKEMONS_BASE_REWARD / 13; // <route number> tokens gained for every capture
    GameConstants.HATCH_EGGS_BASE_REWARD = questBase * 33; // Dimava
    GameConstants.MINE_LAYERS_BASE_REWARD = questBase * 720; // Average of 1/4 squares revealed = 75 energy ~ 12 minutes ~ 720 pokemons
    GameConstants.FARM_BERRIES_BASE_REWARD = questBase * 5; // Needs balancing
    GameConstants.SHINY_BASE_REWARD = questBase * 6000; // Dimava
    GameConstants.USE_OAK_ITEM_BASE_REWARD = GameConstants.DEFEAT_POKEMONS_BASE_REWARD; // not balanced at all for some oak items
    GameConstants.ACTIVE_QUEST_MULTIPLIER = 4;
    GameConstants.QuestTypes = [
        "DefeatPokemons",
        "CapturePokemons",
        "GainMoney",
        "GainTokens",
        "GainShards",
        "HatchEggs",
        "MineLayers",
        "CatchShinies",
        "DefeatGym",
        "DefeatDungeon",
        "UsePokeball",
        "UseOakItem",
        "HarvestBerriesQuest",
    ];
    GameConstants.QUESTS_PER_SET = 10;
    /**
     * idle: The game is not doing anything, the battle view isn't shown
     * paused: The battle view is shown, but there are no game ticks
     * fighting: On a route and battling a pokemon
     * gym: Battling a gym
     * dungeon: Exploring a dungeon
     * safari: Exploring the safari zone
     * town: In a town/pre-dungeon, town view is not shown
     */
    let GameState;
    (function (GameState) {
        GameState[GameState["idle"] = 0] = "idle";
        GameState[GameState["paused"] = 1] = "paused";
        GameState[GameState["fighting"] = 2] = "fighting";
        GameState[GameState["gym"] = 3] = "gym";
        GameState[GameState["dungeon"] = 4] = "dungeon";
        GameState[GameState["safari"] = 5] = "safari";
        GameState[GameState["town"] = 6] = "town";
        GameState[GameState["shop"] = 7] = "shop";
    })(GameState = GameConstants.GameState || (GameConstants.GameState = {}));
    let Pokeball;
    (function (Pokeball) {
        Pokeball[Pokeball["None"] = -1] = "None";
        Pokeball[Pokeball["Pokeball"] = 0] = "Pokeball";
        Pokeball[Pokeball["Greatball"] = 1] = "Greatball";
        Pokeball[Pokeball["Ultraball"] = 2] = "Ultraball";
        Pokeball[Pokeball["Masterball"] = 3] = "Masterball";
    })(Pokeball = GameConstants.Pokeball || (GameConstants.Pokeball = {}));
    let Currency;
    (function (Currency) {
        Currency[Currency["money"] = 0] = "money";
        Currency[Currency["questPoint"] = 1] = "questPoint";
        Currency[Currency["dungeontoken"] = 2] = "dungeontoken";
        Currency[Currency["diamond"] = 3] = "diamond";
    })(Currency = GameConstants.Currency || (GameConstants.Currency = {}));
    let TypeEffectiveness;
    (function (TypeEffectiveness) {
        TypeEffectiveness[TypeEffectiveness["Immune"] = 0] = "Immune";
        TypeEffectiveness[TypeEffectiveness["NotVery"] = 1] = "NotVery";
        TypeEffectiveness[TypeEffectiveness["Normal"] = 2] = "Normal";
        TypeEffectiveness[TypeEffectiveness["Very"] = 3] = "Very";
    })(TypeEffectiveness = GameConstants.TypeEffectiveness || (GameConstants.TypeEffectiveness = {}));
    let TypeEffectivenessValue;
    (function (TypeEffectivenessValue) {
        TypeEffectivenessValue[TypeEffectivenessValue["Immune"] = 0] = "Immune";
        TypeEffectivenessValue[TypeEffectivenessValue["NotVery"] = 0.5] = "NotVery";
        TypeEffectivenessValue[TypeEffectivenessValue["Normal"] = 1] = "Normal";
        TypeEffectivenessValue[TypeEffectivenessValue["Very"] = 2] = "Very";
    })(TypeEffectivenessValue = GameConstants.TypeEffectivenessValue || (GameConstants.TypeEffectivenessValue = {}));
    GameConstants.PokeballCatchBonus = [
        0,
        5,
        10,
        100,
    ];
    function getCatchBonus(ball) {
        return GameConstants.PokeballCatchBonus[ball];
    }
    GameConstants.getCatchBonus = getCatchBonus;
    function humanifyString(str) {
        return str.replace(/_/g, ' ');
    }
    GameConstants.humanifyString = humanifyString;
    function formatTime(time) {
        if (time == 0) {
            return "Ready";
        }
        let sec_num = parseInt('' + time, 10); // don't forget the second param
        let hours = Math.floor(sec_num / 3600);
        let minutes = Math.floor((sec_num - (hours * 3600)) / 60);
        let seconds = sec_num - (hours * 3600) - (minutes * 60);
        if (hours < 10) {
            hours = "0" + hours;
        }
        if (minutes < 10) {
            minutes = "0" + minutes;
        }
        if (seconds < 10) {
            seconds = "0" + seconds;
        }
        return hours + ':' + minutes + ':' + seconds;
    }
    GameConstants.formatTime = formatTime;
    let Region;
    (function (Region) {
        Region[Region["kanto"] = 0] = "kanto";
        Region[Region["johto"] = 1] = "johto";
        Region[Region["hoenn"] = 2] = "hoenn";
    })(Region = GameConstants.Region || (GameConstants.Region = {}));
    let SortOptionsEnum;
    (function (SortOptionsEnum) {
        SortOptionsEnum[SortOptionsEnum["id"] = 0] = "id";
        SortOptionsEnum[SortOptionsEnum["name"] = 1] = "name";
        SortOptionsEnum[SortOptionsEnum["attack"] = 2] = "attack";
        SortOptionsEnum[SortOptionsEnum["levelObservable"] = 3] = "levelObservable";
        SortOptionsEnum[SortOptionsEnum["shiny"] = 4] = "shiny";
    })(SortOptionsEnum = GameConstants.SortOptionsEnum || (GameConstants.SortOptionsEnum = {}));
    class Option {
        constructor(text, value) {
            this.text = text;
            this.value = value;
        }
    }
    GameConstants.Option = Option;
    GameConstants.SortOptions = [
        new Option("Pokedex #", GameConstants.SortOptionsEnum.id),
        new Option("Name", GameConstants.SortOptionsEnum.name),
        new Option("Attack", GameConstants.SortOptionsEnum.attack),
        new Option("Level", GameConstants.SortOptionsEnum.levelObservable),
        new Option("Shiny", GameConstants.SortOptionsEnum.shiny),
    ];
    GameConstants.RegionRoute = {
        0: 25,
        1: 48,
        2: 0
    };
    function randomIntBetween(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
    GameConstants.randomIntBetween = randomIntBetween;
    function clipNumber(num, min, max) {
        return Math.min(Math.max(num, min), max);
    }
    GameConstants.clipNumber = clipNumber;
    let Badge;
    (function (Badge) {
        Badge[Badge["None"] = 0] = "None";
        Badge[Badge["Boulder"] = 1] = "Boulder";
        Badge[Badge["Cascade"] = 2] = "Cascade";
        Badge[Badge["Thunder"] = 3] = "Thunder";
        Badge[Badge["Rainbow"] = 4] = "Rainbow";
        Badge[Badge["Soul"] = 5] = "Soul";
        Badge[Badge["Marsh"] = 6] = "Marsh";
        Badge[Badge["Volcano"] = 7] = "Volcano";
        Badge[Badge["Earth"] = 8] = "Earth";
        Badge[Badge["Elite_Lorelei"] = 9] = "Elite_Lorelei";
        Badge[Badge["Elite_Bruno"] = 10] = "Elite_Bruno";
        Badge[Badge["Elite_Agatha"] = 11] = "Elite_Agatha";
        Badge[Badge["Elite_Lance"] = 12] = "Elite_Lance";
        Badge[Badge["Elite_Champion"] = 13] = "Elite_Champion";
        Badge[Badge["Zephyr"] = 14] = "Zephyr";
        Badge[Badge["Hive"] = 15] = "Hive";
        Badge[Badge["Plain"] = 16] = "Plain";
        Badge[Badge["Fog"] = 17] = "Fog";
        Badge[Badge["Storm"] = 18] = "Storm";
        Badge[Badge["Mineral"] = 19] = "Mineral";
        Badge[Badge["Glacier"] = 20] = "Glacier";
        Badge[Badge["Rising"] = 21] = "Rising";
        Badge[Badge["Elite_Will"] = 22] = "Elite_Will";
        Badge[Badge["Elite_Koga"] = 23] = "Elite_Koga";
        Badge[Badge["Elite_Bruno2"] = 24] = "Elite_Bruno2";
        Badge[Badge["Elite_Karen"] = 25] = "Elite_Karen";
        Badge[Badge["Elite_JohtoChampion"] = 26] = "Elite_JohtoChampion";
    })(Badge = GameConstants.Badge || (GameConstants.Badge = {}));
    let PokemonType;
    (function (PokemonType) {
        PokemonType[PokemonType["None"] = -1] = "None";
        PokemonType[PokemonType["Normal"] = 0] = "Normal";
        PokemonType[PokemonType["Fire"] = 1] = "Fire";
        PokemonType[PokemonType["Water"] = 2] = "Water";
        PokemonType[PokemonType["Electric"] = 3] = "Electric";
        PokemonType[PokemonType["Grass"] = 4] = "Grass";
        PokemonType[PokemonType["Ice"] = 5] = "Ice";
        PokemonType[PokemonType["Fighting"] = 6] = "Fighting";
        PokemonType[PokemonType["Poison"] = 7] = "Poison";
        PokemonType[PokemonType["Ground"] = 8] = "Ground";
        PokemonType[PokemonType["Flying"] = 9] = "Flying";
        PokemonType[PokemonType["Psychic"] = 10] = "Psychic";
        PokemonType[PokemonType["Bug"] = 11] = "Bug";
        PokemonType[PokemonType["Rock"] = 12] = "Rock";
        PokemonType[PokemonType["Ghost"] = 13] = "Ghost";
        PokemonType[PokemonType["Dragon"] = 14] = "Dragon";
        PokemonType[PokemonType["Dark"] = 15] = "Dark";
        PokemonType[PokemonType["Steel"] = 16] = "Steel";
        PokemonType[PokemonType["Fairy"] = 17] = "Fairy";
    })(PokemonType = GameConstants.PokemonType || (GameConstants.PokemonType = {}));
    let TypeColor;
    (function (TypeColor) {
        TypeColor["Normal"] = "#A8A77A";
        TypeColor["Fire"] = "#EE8130";
        TypeColor["Water"] = "#6390F0";
        TypeColor["Electric"] = "#F7D02C";
        TypeColor["Grass"] = "#7AC74C";
        TypeColor["Ice"] = "#96D9D6";
        TypeColor["Fighting"] = "#C22E28";
        TypeColor["Poison"] = "#A33EA1";
        TypeColor["Ground"] = "#E2BF65";
        TypeColor["Flying"] = "#A98FF3";
        TypeColor["Psychic"] = "#F95587";
        TypeColor["Bug"] = "#A6B91A";
        TypeColor["Rock"] = "#B6A136";
        TypeColor["Ghost"] = "#735797";
        TypeColor["Dragon"] = "#6F35FC";
        TypeColor["Dark"] = "#705746";
        TypeColor["Steel"] = "#B7B7CE";
        TypeColor["Fairy"] = "#D685AD";
    })(TypeColor = GameConstants.TypeColor || (GameConstants.TypeColor = {}));
    let LevelType;
    (function (LevelType) {
        LevelType[LevelType["slow"] = 0] = "slow";
        LevelType[LevelType["mediumslow"] = 1] = "mediumslow";
        LevelType[LevelType["medium"] = 2] = "medium";
        LevelType[LevelType["mediumfast"] = 3] = "mediumfast";
        LevelType[LevelType["fast"] = 4] = "fast";
    })(LevelType = GameConstants.LevelType || (GameConstants.LevelType = {}));
    // Map navigation
    GameConstants.AMOUNT_OF_ROUTES = 48;
    GameConstants.AMOUNT_OF_ROUTES_KANTO = 25;
    /**
     * Each route contains a list of routenumbers that need to be completed
     * Access with routeRequirements.region.routeNumber
     */
    GameConstants.routeRequirements = {
        0: {
            1: [],
            2: [1],
            3: [2],
            4: [3],
            5: [4],
            6: [5],
            7: [5, 10],
            8: [5, 6, 7],
            9: [4],
            10: [9],
            11: [6],
            12: [7, 10, 11],
            13: [11, 12],
            14: [13],
            15: [14],
            16: [8],
            17: [16],
            18: [17],
            19: [15, 18],
            20: [19],
            21: [20],
            22: [1],
            23: [22],
            24: [4],
            25: [24],
        },
        1: {
            30: [29],
            31: [30],
            33: [32],
            36: [35],
            37: [36],
            39: [38],
            40: [39],
            41: [40],
            46: [45],
            26: [46],
            27: [26],
        }
    };
    GameConstants.routeBadgeRequirements = {
        0: {
            3: GameConstants.Badge.Boulder,
            5: GameConstants.Badge.Cascade,
            7: GameConstants.Badge.Thunder,
            8: GameConstants.Badge.Thunder,
            9: GameConstants.Badge.Cascade,
            11: GameConstants.Badge.Thunder,
            12: GameConstants.Badge.Marsh,
            13: GameConstants.Badge.Marsh,
            16: GameConstants.Badge.Marsh,
            19: GameConstants.Badge.Soul,
            21: GameConstants.Badge.Volcano,
            22: GameConstants.Badge.Earth,
            24: GameConstants.Badge.Cascade,
        },
        1: {
            28: GameConstants.Badge.Elite_JohtoChampion,
            32: GameConstants.Badge.Zephyr,
            34: GameConstants.Badge.Hive,
            35: GameConstants.Badge.Plain,
            38: GameConstants.Badge.Fog,
            42: GameConstants.Badge.Mineral,
            43: GameConstants.Badge.Glacier,
            44: GameConstants.Badge.Glacier,
            45: GameConstants.Badge.Rising,
        }
    };
    GameConstants.routeDungeonRequirements = {
        0: {
            4: "Mt. Moon",
            20: "Seafoam Islands",
        },
        1: {
            33: "Union Cave",
            34: "Ilex Forest"
        }
    };
    let Starter;
    (function (Starter) {
        Starter[Starter["None"] = -1] = "None";
        Starter[Starter["Bulbasaur"] = 0] = "Bulbasaur";
        Starter[Starter["Charmander"] = 1] = "Charmander";
        Starter[Starter["Squirtle"] = 2] = "Squirtle";
    })(Starter = GameConstants.Starter || (GameConstants.Starter = {}));
    GameConstants.ItemPrice = {
        // Money
        "Pokeball": 100,
        "Greatball": 500,
        "Ultraball": 2000,
        "Masterball": 2500,
        "xAttack": 600,
        "xClick": 400,
        "xExp": 800,
        "Token_collector": 1000,
        "Item_magnet": 1500,
        "Lucky_incense": 2000,
        "SmallRestore": 20000,
        "MediumRestore": 40000,
        "LargeRestore": 100000,
        "PokeBlock": Infinity,
        "Protein": Infinity,
        "RareCandy": Infinity,
        // Quest points
        "Eevee": 5000,
        "Porygon": 2000,
        "Jynx": 2500,
        "Mr. Mime": 1500,
        "Lickitung": 1000,
        "Togepi": 2500,
        // TODO: Set prices for different kinds of eggs and stones
        "Egg": 1000,
        "EvolutionStone": 2500,
        "Dungeon_ticket": 250,
        "Explorer_kit": 5000,
    };
    let StoneType;
    (function (StoneType) {
        StoneType[StoneType["Fire_stone"] = 0] = "Fire_stone";
        StoneType[StoneType["Water_stone"] = 1] = "Water_stone";
        StoneType[StoneType["Thunder_stone"] = 2] = "Thunder_stone";
        StoneType[StoneType["Leaf_stone"] = 3] = "Leaf_stone";
        StoneType[StoneType["Moon_stone"] = 4] = "Moon_stone";
        StoneType[StoneType["Sun_stone"] = 5] = "Sun_stone";
        StoneType[StoneType["Trade_stone"] = 6] = "Trade_stone";
        StoneType[StoneType["Dragon_scale"] = 7] = "Dragon_scale";
        StoneType[StoneType["Metal_coat"] = 8] = "Metal_coat";
        StoneType[StoneType["Kings_rock"] = 9] = "Kings_rock";
        StoneType[StoneType["Upgrade"] = 10] = "Upgrade";
        StoneType[StoneType["Time_stone"] = 11] = "Time_stone";
    })(StoneType = GameConstants.StoneType || (GameConstants.StoneType = {}));
    let BattleItemType;
    (function (BattleItemType) {
        BattleItemType[BattleItemType["xAttack"] = 0] = "xAttack";
        BattleItemType[BattleItemType["xClick"] = 1] = "xClick";
        BattleItemType[BattleItemType["xExp"] = 2] = "xExp";
        BattleItemType[BattleItemType["Token_collector"] = 3] = "Token_collector";
        BattleItemType[BattleItemType["Item_magnet"] = 4] = "Item_magnet";
        BattleItemType[BattleItemType["Lucky_incense"] = 5] = "Lucky_incense";
    })(BattleItemType = GameConstants.BattleItemType || (GameConstants.BattleItemType = {}));
    let PokemonItemType;
    (function (PokemonItemType) {
        PokemonItemType[PokemonItemType["Eevee"] = 0] = "Eevee";
        PokemonItemType[PokemonItemType["Porygon"] = 1] = "Porygon";
        PokemonItemType[PokemonItemType["Jynx"] = 2] = "Jynx";
        PokemonItemType[PokemonItemType["Mr. Mime"] = 3] = "Mr. Mime";
        PokemonItemType[PokemonItemType["Lickitung"] = 4] = "Lickitung";
        PokemonItemType[PokemonItemType["Togepi"] = 5] = "Togepi";
    })(PokemonItemType = GameConstants.PokemonItemType || (GameConstants.PokemonItemType = {}));
    let BerryType;
    (function (BerryType) {
        BerryType[BerryType["Cheri"] = 0] = "Cheri";
        BerryType[BerryType["Chesto"] = 1] = "Chesto";
        BerryType[BerryType["Pecha"] = 2] = "Pecha";
        BerryType[BerryType["Rawst"] = 3] = "Rawst";
        BerryType[BerryType["Aspear"] = 4] = "Aspear";
        BerryType[BerryType["Leppa"] = 5] = "Leppa";
        BerryType[BerryType["Oran"] = 6] = "Oran";
        BerryType[BerryType["Sitrus"] = 7] = "Sitrus";
    })(BerryType = GameConstants.BerryType || (GameConstants.BerryType = {}));
    let PokeBlockColor;
    (function (PokeBlockColor) {
        PokeBlockColor[PokeBlockColor["Black"] = 0] = "Black";
        PokeBlockColor[PokeBlockColor["Red"] = 1] = "Red";
        PokeBlockColor[PokeBlockColor["Gold"] = 2] = "Gold";
        PokeBlockColor[PokeBlockColor["Purple"] = 3] = "Purple";
        PokeBlockColor[PokeBlockColor["Gray"] = 4] = "Gray";
        PokeBlockColor[PokeBlockColor["White"] = 5] = "White";
    })(PokeBlockColor = GameConstants.PokeBlockColor || (GameConstants.PokeBlockColor = {}));
    let VitaminType;
    (function (VitaminType) {
        VitaminType[VitaminType["Protein"] = 0] = "Protein";
        VitaminType[VitaminType["RareCandy"] = 1] = "RareCandy";
    })(VitaminType = GameConstants.VitaminType || (GameConstants.VitaminType = {}));
    let EnergyRestoreSize;
    (function (EnergyRestoreSize) {
        EnergyRestoreSize[EnergyRestoreSize["SmallRestore"] = 0] = "SmallRestore";
        EnergyRestoreSize[EnergyRestoreSize["MediumRestore"] = 1] = "MediumRestore";
        EnergyRestoreSize[EnergyRestoreSize["LargeRestore"] = 2] = "LargeRestore";
    })(EnergyRestoreSize = GameConstants.EnergyRestoreSize || (GameConstants.EnergyRestoreSize = {}));
    let EggItemType;
    (function (EggItemType) {
        EggItemType[EggItemType["Fire_egg"] = 0] = "Fire_egg";
        EggItemType[EggItemType["Water_egg"] = 1] = "Water_egg";
        EggItemType[EggItemType["Grass_egg"] = 2] = "Grass_egg";
        EggItemType[EggItemType["Fighting_egg"] = 3] = "Fighting_egg";
        EggItemType[EggItemType["Electric_egg"] = 4] = "Electric_egg";
        EggItemType[EggItemType["Dragon_egg"] = 5] = "Dragon_egg";
        EggItemType[EggItemType["Pokemon_egg"] = 6] = "Pokemon_egg";
        EggItemType[EggItemType["Mystery_egg"] = 7] = "Mystery_egg";
    })(EggItemType = GameConstants.EggItemType || (GameConstants.EggItemType = {}));
    let KeyItemType;
    (function (KeyItemType) {
        KeyItemType[KeyItemType["Dungeon_ticket"] = 0] = "Dungeon_ticket";
        KeyItemType[KeyItemType["Explorer_kit"] = 1] = "Explorer_kit";
    })(KeyItemType = GameConstants.KeyItemType || (GameConstants.KeyItemType = {}));
    let EggType;
    (function (EggType) {
        EggType[EggType["Fire"] = 0] = "Fire";
        EggType[EggType["Water"] = 1] = "Water";
        EggType[EggType["Grass"] = 2] = "Grass";
        EggType[EggType["Fighting"] = 3] = "Fighting";
        EggType[EggType["Electric"] = 4] = "Electric";
        EggType[EggType["Dragon"] = 5] = "Dragon";
        EggType[EggType["Pokemon"] = 6] = "Pokemon";
        EggType[EggType["Mystery"] = 7] = "Mystery";
        EggType[EggType["Fossil"] = 8] = "Fossil";
    })(EggType = GameConstants.EggType || (GameConstants.EggType = {}));
    GameConstants.EnergyRestoreEffect = {
        SmallRestore: 0.1,
        MediumRestore: 0.2,
        LargeRestore: 0.5,
    };
    GameConstants.KeyToDirection = {
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        65: "left",
        68: "right",
        83: "down",
        87: "up",
    };
    GameConstants.FossilToPokemon = {
        "Helix Fossil": "Omanyte",
        "Dome Fossil": "Kabuto",
        "Old Amber": "Aerodactyl",
    };
    //Used for image name
    GameConstants.PokemonToFossil = {
        "Omanyte": "helix",
        "Kabuto": "dome",
        "Aerodactyl": "amber",
    };
    // For random quest, name matches entry in gymList (created in Gym.ts)
    GameConstants.KantoGyms = [
        "Pewter City",
        "Cerulean City",
        "Vermillion City",
        "Celadon City",
        "Saffron City",
        "Fuchsia City",
        "Cinnabar Island",
        "Viridian City",
        "Elite Lorelei",
        "Elite Bruno",
        "Elite Agatha",
        "Elite Lance",
        "Champion Blue",
    ];
    GameConstants.JohtoGyms = [
        "Violet City",
        "Azalea Town",
        "Goldenrod City",
        "Ecruteak City",
        "Cianwood City",
        "Olivine City",
        "Mahogany Town",
        "Blackthorn City",
        "Elite Will",
        "Elite Koga",
        "Elite Bruno2",
        "Elite Karen",
        "Champion Lance"
    ];
    GameConstants.RegionGyms = [
        GameConstants.KantoGyms,
        GameConstants.JohtoGyms
    ];
    GameConstants.KantoDungeons = [
        "Viridian Forest",
        "Digletts Cave",
        "Mt. Moon",
        "Rock Tunnel",
        "Power Plant",
        "Pokemon Tower",
        "Seafoam Islands",
        "Pokemon Mansion",
        "Victory Road",
        "Cerulean Cave"
    ];
    GameConstants.JohtoDungeons = [
        "Sprout Tower",
        "Ruins of Alph",
        "Union Cave",
        "Slowpoke Well",
        "Ilex Forest",
        "Burned Tower",
        "Tin Tower",
        "Whirl Islands",
        "Mt Mortar",
        "Ice Path",
        "Dark Cave",
        "Mt Silver"
    ];
    GameConstants.RegionDungeons = [
        GameConstants.KantoDungeons,
        GameConstants.JohtoDungeons
    ];
    GameConstants.StartingTowns = [
        "Pallet Town",
        "New Bark Town",
    ];
    GameConstants.pokemonsNeededToTravel = [
        151,
        252,
    ];
})(GameConstants || (GameConstants = {}));
///<reference path="PokemonList.ts"/>
///<reference path="../GameConstants.ts"/>
class PokemonHelper {
    static getPokemonsWithEvolution(evoType) {
        return pokemonList.filter(function (pokemon) {
            if (pokemon.evoLevel && pokemon.evoLevel.includes(evoType)) {
                return !!PokemonHelper.getPokemonByName(pokemon.name).evolutionByIndex(pokemon.evoLevel.indexOf(evoType), true);
            }
        });
    }
    static getPokemonByName(name) {
        let basePokemon = pokemonMap[name];
        if (!basePokemon)
            return;
        let type2 = basePokemon["type"][1] || GameConstants.PokemonType.None;
        let evoLevel = basePokemon["evoLevel"];
        let eggCycles = basePokemon["eggCycles"] || 20;
        return new DataPokemon(basePokemon["id"], basePokemon["name"], basePokemon["catchRate"], basePokemon["evolution"], evoLevel, basePokemon["type"][0], type2, basePokemon["attack"], basePokemon["levelType"], basePokemon["exp"], eggCycles);
    }
    static typeStringToId(id) {
        return GameConstants.PokemonType[id];
    }
    static typeIdToString(id) {
        return GameConstants.PokemonType[id];
    }
    static calculateLevel(pokemon) {
        let level;
        switch (PokemonHelper.getPokemonByName(pokemon.name).levelType) {
            case GameConstants.LevelType.slow:
                level = Math.pow(pokemon.exp() * 4 / 5, 1 / 3);
                break;
            case GameConstants.LevelType.mediumslow:
                let y;
                for (let x = 1; x <= 100; x++) {
                    y = 6 / 5 * Math.pow(x, 3) - 15 * Math.pow(x, 2) + 100 * x - 140;
                    if (pokemon.exp >= y) {
                        level = x;
                    }
                    else {
                        break;
                    }
                }
                break;
            case GameConstants.LevelType.mediumfast:
                level = Math.pow(pokemon.exp(), 1 / 3);
                break;
            case GameConstants.LevelType.fast:
                level = Math.pow(pokemon.exp() * 5 / 4, 1 / 3);
                break;
            default:
                level = Math.pow(30 * pokemon.exp(), 0.475) / (6 * Math.sqrt(5));
                break;
        }
        return Math.max(1, Math.min(100, Math.floor(level)));
    }
    static calculateAttack(attackBase, attackBonus, level) {
        let attackBonusMultiplier = 1 + (attackBonus / 100);
        let levelMultiplier = level / 100;
        return Math.max(1, Math.floor(attackBase * attackBonusMultiplier * levelMultiplier));
    }
    static getImage(pokemon, shiny) {
        let src = "assets/images/";
        if (shiny) {
            src += "shiny";
        }
        src += "pokemon/" + pokemon.id + ".png";
        return src;
    }
    static getPokeballImage(pokemonName) {
        let src = "";
        if (player.alreadyCaughtPokemon(pokemonName)) {
            src = "assets/images/pokeball/Pokeball-";
            if (player.alreadyCaughtPokemonShiny(pokemonName)) {
                src += "shiny-";
            }
            src += "small.png";
        }
        return src;
    }
    static compareBy(property, direction) {
        return function (a, b) {
            let _a, _b, res, dir = (direction) ? -1 : 1;
            //Convert to plain JS so that observables don't need to be accessed with brackets
            _a = ko.toJS(a);
            _b = ko.toJS(b);
            //CaughtPokemon doesn't have shiny property, create one for comparison if needed
            if (property == "shiny") {
                _a.shiny = Number(player.alreadyCaughtPokemonShiny(a.name));
                _b.shiny = Number(player.alreadyCaughtPokemonShiny(b.name));
            }
            if (property == "attack" || property == "levelObservable" || property == "shiny") {
                dir *= -1;
            }
            //Compare by provided property
            if (_a[property] == _b[property]) {
                //If they are equal according to provided property, sort by id
                if (_a.id < _b.id) {
                    return -1;
                }
                else if (_a.id > _b.id) {
                    return 1;
                }
            }
            else if (_a[property] < _b[property]) {
                res = -1;
            }
            else if (_a[property] > _b[property]) {
                res = 1;
            }
            else {
                res = 0;
            }
            return res * dir;
        };
    }
    static calcNativeRegion(pokemonName) {
        let id = PokemonHelper.getPokemonByName(pokemonName).id;
        if (id > 251) {
            return GameConstants.Region.hoenn;
        }
        else if (id > 151) {
            return GameConstants.Region.johto;
        }
        else {
            return GameConstants.Region.kanto;
        }
    }
}
var PokemonTypes = GameConstants.PokemonType;
class BattlePokemon {
    /**
     * In case you want to manually create a Pokémon instead of generating it from the route number
     * @param name Pokémon name
     * @param id Pokémon
     * @param type1 First type of the Pokémon
     * @param type2 Second type of the Pokémon
     * @param maxHealth max health that the Pokémon can have
     * @param level level is 2 times the current route
     * @param catchRate base chance of catching this Pokémon
     * @param exp base exp reward for defeating this Pokémon
     * @param money exp base exp reward for defeating this Pokémon
     * @param shiny
     */
    constructor(name, id, type1, type2, maxHealth, level, catchRate, exp, money, shiny, shardReward = 1) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.health = ko.observable(maxHealth);
        this.maxHealth = ko.observable(maxHealth);
        this.healthPercentage = ko.observable(100);
        this.level = level;
        this.catchRate = catchRate;
        this.exp = exp;
        this.money = money;
        this.shiny = shiny;
        this.shardReward = shardReward;
    }
    isAlive() {
        return this.health() > 0;
    }
    /**
     * Lost health without
     * @param damage
     */
    damage(damage) {
        this.health(Math.max(0, this.health() - damage));
        this.healthPercentage(Math.floor(this.health() / this.maxHealth() * 100));
    }
}
///<reference path="PokemonHelper.ts"/>
///<reference path="BattlePokemon.ts"/>
/**
 * Created by dennis on 27-06-17.
 */
class PokemonFactory {
    /**
     * Generate a wild pokemon based on route, region and the dataList.
     * @param route route that the player is on.
     * @param region region that the player is in.
     * @returns {any}
     */
    static generateWildPokemon(route, region) {
        if (!MapHelper.validRoute(route, region)) {
            return new BattlePokemon("Rattata", 19, GameConstants.PokemonType.Psychic, GameConstants.PokemonType.None, 10000, 1, 0, 0, 0, false, 1);
        }
        let name;
        if (PokemonFactory.roamingEncounter(route)) {
            let possible = GameConstants.RoamingPokemon[region];
            name = possible[Math.floor(Math.random() * possible.length)];
        }
        else {
            let pokemonList = RouteHelper.getAvailablePokemonList(route, region);
            let rand = Math.floor(Math.random() * pokemonList.length);
            name = pokemonList[rand];
        }
        let basePokemon = PokemonHelper.getPokemonByName(name);
        let id = basePokemon.id;
        // TODO this monster formula needs to be improved. Preferably with graphs :D
        let maxHealth = PokemonFactory.routeHealth(route);
        let catchRate = this.catchRateHelper(basePokemon.catchRate);
        let exp = basePokemon.exp;
        let deviation = Math.floor(Math.random() * 51) - 25;
        let money = Math.max(10, 3 * route + 5 * Math.pow(route, 1.15) + deviation);
        let shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, route * 2, catchRate, exp, money, shiny);
    }
    static routeHealth(route) {
        return Math.max(Math.floor(Math.pow((100 * Math.pow(route, 2.2) / 12), 1.15)), 20) || 20;
    }
    /**
     * Calculate if a shiny has spawned.
     * @param chance Base chance, should be from GameConstants.SHINY_CHANCE.*
     * @returns {boolean}
     */
    static generateShiny(chance) {
        chance = OakItemRunner.isActive(GameConstants.OakItem.Shiny_Charm) ? chance / (1 + OakItemRunner.calculateBonus(GameConstants.OakItem.Shiny_Charm) / 100) : chance;
        let rand = Math.floor(Math.random() * chance) + 1;
        if (rand <= 1) {
            Notifier.notify("You encounter a shiny Pokémon...", GameConstants.NotificationOption.warning);
            OakItemRunner.use(GameConstants.OakItem.Shiny_Charm);
            return true;
        }
        return false;
    }
    /**
     * Generate a trainer pokemon based on gymName, index and the dataList.
     * @param gymName name of the gym that the player is fighting.
     * @param index index of the pokémon that is being generated.
     * @returns {any}
     */
    static generateTrainerPokemon(gymName, index) {
        let gym = gymList[gymName];
        let pokemon = gym.pokemons[index];
        let basePokemon = PokemonHelper.getPokemonByName(pokemon.name);
        let exp = basePokemon.exp * 1.5;
        let shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(pokemon.name, basePokemon.id, basePokemon.type1, basePokemon.type2, pokemon.maxHealth, pokemon.level, 0, exp, 0, shiny, GameConstants.GYM_SHARDS);
    }
    static generateDungeonPokemon(pokemonList, chestsOpened, baseHealth, level) {
        let random = GameConstants.randomIntBetween(0, pokemonList.length - 1);
        let name = pokemonList[random];
        let basePokemon = PokemonHelper.getPokemonByName(name);
        let id = basePokemon.id;
        let maxHealth = Math.floor(baseHealth * (1 + (chestsOpened / 5)));
        let catchRate = this.catchRateHelper(basePokemon.catchRate);
        let exp = basePokemon.exp;
        let money = 0;
        let shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, level, catchRate, exp, money, shiny, GameConstants.DUNGEON_SHARDS);
    }
    static generateDungeonBoss(bossPokemonList, chestsOpened) {
        let random = GameConstants.randomIntBetween(0, bossPokemonList.length - 1);
        let bossPokemon = bossPokemonList[random];
        let name = bossPokemon.name;
        let basePokemon = PokemonHelper.getPokemonByName(name);
        let id = basePokemon.id;
        let maxHealth = Math.floor(bossPokemon.baseHealth * (1 + (chestsOpened / 5)));
        let catchRate = this.catchRateHelper(basePokemon.catchRate);
        let exp = basePokemon.exp;
        let money = 0;
        let shiny = this.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        return new BattlePokemon(name, id, basePokemon.type1, basePokemon.type2, maxHealth, bossPokemon.level, catchRate, exp, money, shiny, GameConstants.DUNGEON_BOSS_SHARDS);
    }
    static roamingEncounter(route) {
        switch (player.region) {
            case 0:
                return PokemonFactory.roamingChance(GameConstants.ROAMING_MAX_CHANCE, GameConstants.ROAMING_MIN_CHANCE, 25, 1, route);
            case 1:
                return PokemonFactory.roamingChance(GameConstants.ROAMING_MAX_CHANCE, GameConstants.ROAMING_MIN_CHANCE, 46, 26, route);
            default:
                return false;
        }
    }
    static roamingChance(max, min, maxRoute, minRoute, curRoute) {
        return Math.random() < 1 / (max + ((min - max) * (maxRoute - curRoute) / (maxRoute - minRoute)));
    }
    static catchRateHelper(baseCatchRate) {
        let catchVariation = GameConstants.randomIntBetween(-3, 3);
        let catchRateRaw = Math.floor(Math.pow(baseCatchRate, 0.75)) + catchVariation;
        return GameConstants.clipNumber(catchRateRaw, 0, 100);
    }
}
///<reference path="pokemons/PokemonFactory.ts"/>
/**
 * Handles all logic related to battling
 */
class Battle {
    /**
     * Probably not needed right now, but might be if we add more logic to a gameTick.
     */
    static tick() {
        this.counter = 0;
        this.pokemonAttack();
    }
    /**
     * Attacks with Pokémon and checks if the enemy is defeated.
     */
    static pokemonAttack() {
        if (!this.enemyPokemon().isAlive()) {
            return;
        }
        this.enemyPokemon().damage(player.calculatePokemonAttack(this.enemyPokemon().type1, this.enemyPokemon().type2));
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Attacks with clicks and checks if the enemy is defeated.
     */
    static clickAttack() {
        if (!this.enemyPokemon().isAlive()) {
            return;
        }
        OakItemRunner.use(GameConstants.OakItem.Poison_Barb);
        GameHelper.incrementObservable(player.statistics.clicks);
        this.enemyPokemon().damage(player.calculateClickAttack());
        if (!this.enemyPokemon().isAlive()) {
            this.defeatPokemon();
        }
    }
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        GameHelper.incrementObservable(player.statistics.pokemonDefeated);
        player.gainMoney(this.enemyPokemon().money);
        player.gainExp(this.enemyPokemon().exp, this.enemyPokemon().level, false);
        player.gainShards(this.enemyPokemon());
        player.addRouteKill();
        BreedingHelper.progressEggs(Math.floor(Math.sqrt(player.route()) * 100) / 100);
        const pokemonName = this.enemyPokemon().name;
        const isShiny = this.enemyPokemon().shiny;
        const pokeBall = player.calculatePokeballToUse(pokemonName, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(pokeBall);
            setTimeout(() => {
                this.attemptCatch();
                this.generateNewEnemy();
            }, player.calculateCatchTime(pokeBall));
        }
        else {
            this.generateNewEnemy();
        }
        this.gainItem();
        player.lowerItemMultipliers();
        player.defeatedAmount[this.enemyPokemon().id](player.defeatedAmount[this.enemyPokemon().id]() + 1);
    }
    /**
     * Generate a new enemy based on the current route and region.
     * Reset the counter.
     */
    static generateNewEnemy() {
        Battle.counter = 0;
        Battle.enemyPokemon(PokemonFactory.generateWildPokemon(player.route(), player.region));
    }
    static calculateActualCatchRate(pokeBall) {
        let pokeballBonus = GameConstants.getCatchBonus(pokeBall);
        let oakBonus = OakItemRunner.isActive(GameConstants.OakItem.Magic_Ball) ?
            OakItemRunner.calculateBonus(GameConstants.OakItem.Magic_Ball) : 0;
        let totalChance = GameConstants.clipNumber(this.enemyPokemon().catchRate + pokeballBonus + oakBonus, 0, 100);
        return totalChance;
    }
    static prepareCatch(pokeBall) {
        this.pokeball = ko.observable(pokeBall);
        this.catching(true);
        this.catchRateActual(this.calculateActualCatchRate(pokeBall));
        player.usePokeball(pokeBall);
    }
    static attemptCatch() {
        let random = Math.floor(Math.random() * 100);
        if (random <= this.catchRateActual()) {
            this.catchPokemon();
        }
        this.catching(false);
        this.catchRateActual(null);
    }
    static catchPokemon() {
        player.gainDungeonTokens(Math.floor(this.enemyPokemon().level / 2));
        player.capturePokemon(this.enemyPokemon().name, this.enemyPokemon().shiny);
    }
    static gainItem() {
        let p = player.route() / 1600 + 0.009375;
        if (Math.random() < p) {
            this.getRandomBerry();
        }
    }
    static getRandomBerry() {
        let i = GameHelper.getIndexFromDistribution(GameConstants.BerryDistribution);
        Notifier.notify("You got a " + GameConstants.BerryType[i] + " berry!", GameConstants.NotificationOption.success);
        player.berryList[i](player.berryList[i]() + 1);
    }
}
Battle.enemyPokemon = ko.observable(null);
Battle.counter = 0;
Battle.catching = ko.observable(false);
Battle.catchRateActual = ko.observable(null);
// For helper functions that may be needed across all files
class GameHelper {
    static incrementObservable(obs, amt = 1) {
        obs(obs() + amt);
    }
    static enumLength(enumerable) {
        return Object.keys(enumerable).length / 2;
    }
    static updateTime() {
        let now = new Date();
        if (now.getDate() == GameHelper.tomorrow.getDate()) {
            GameHelper.tomorrow = GameHelper.getTomorrow();
        }
        GameHelper.currentTime(new Date());
    }
    static getTomorrow() {
        let tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        tomorrow.setHours(0);
        tomorrow.setMinutes(0);
        tomorrow.setSeconds(0);
        tomorrow.setMilliseconds(0);
        return tomorrow;
    }
    static twoDigitNumber(n) {
        // For use in clocks / showing time
        // Turns 4 into 04, does nothing to 23, turns 173 into 73
        return (`0${n}`).slice(-2);
    }
    static getIndexFromDistribution(a) {
        let rand = Math.random();
        for (let i = 0; i < a.length; i++) {
            if (rand <= a[i]) {
                return i;
            }
        }
    }
    static getRegion(id) {
        if (id <= GameConstants.AMOUNT_OF_POKEMONS_GEN1)
            return GameConstants.Region.kanto;
        if (id <= GameConstants.AMOUNT_OF_POKEMONS_GEN2)
            return GameConstants.Region.johto;
        return GameConstants.Region.hoenn;
    }
    static createArray(start, max, step) {
        let array = [];
        for (let i = start; i <= max; i += step) {
            array.push(i);
        }
        return array;
    }
}
GameHelper.MS_IN_MIN = 1000 * 60;
GameHelper.MS_IN_HOUR = GameHelper.MS_IN_MIN * 60;
GameHelper.counter = 0;
GameHelper.currentTime = ko.observable(new Date());
GameHelper.tomorrow = GameHelper.getTomorrow();
GameHelper.msUntilTomorrow = ko.computed(function () {
    return Number(GameHelper.tomorrow) - Number(GameHelper.currentTime());
});
GameHelper.formattedTimeUntilTomorrow = ko.computed(function () {
    let milliseconds = GameHelper.msUntilTomorrow();
    let hours = Math.floor(milliseconds / GameHelper.MS_IN_HOUR);
    milliseconds -= hours * GameHelper.MS_IN_HOUR;
    let minutes = Math.floor(milliseconds / GameHelper.MS_IN_MIN);
    return `${hours}:${GameHelper.twoDigitNumber(minutes)}`;
});
GameHelper.formattedLetterTimeUntilTomorrow = ko.computed(function () {
    let milliseconds = GameHelper.msUntilTomorrow();
    let hours = Math.floor(milliseconds / GameHelper.MS_IN_HOUR);
    milliseconds -= hours * GameHelper.MS_IN_HOUR;
    let minutes = Math.floor(milliseconds / GameHelper.MS_IN_MIN);
    return `${hours}h${GameHelper.twoDigitNumber(minutes)}m`;
});
$(document).ready(function () {
    $(document).on("keydown", function (e) {
        let keyCode = e.keyCode;
        if (Game.gameState() == GameConstants.GameState.safari) {
            let dir = GameConstants.KeyToDirection[keyCode];
            if (dir) {
                e.preventDefault();
                Safari.move(dir);
            }
            if (keyCode == 32) { // space
                e.preventDefault();
            }
        }
    });
    $(document).on("keyup", function (e) {
        let keyCode = e.keyCode;
        if (Game.gameState() == GameConstants.GameState.safari) {
            let dir = GameConstants.KeyToDirection[keyCode];
            if (dir) {
                e.preventDefault();
                Safari.stop(dir);
            }
            else if (keyCode == 32) { // space
                e.preventDefault();
            }
        }
    });
    $("#pokedexModal").on("show.bs.modal", PokedexHelper.updateList);
});
$(document).on("keydown", function (e) {
    let keyCode = e.keyCode;
    if (Game.gameState() == GameConstants.GameState.dungeon) {
        if (keyCode == 38 || keyCode == 87) {
            DungeonRunner.map.moveUp();
        }
        else if (keyCode == 39 || keyCode == 68) {
            DungeonRunner.map.moveRight();
        }
        else if (keyCode == 37 || keyCode == 65) {
            DungeonRunner.map.moveLeft();
        }
        else if (keyCode == 40 || keyCode == 83) {
            DungeonRunner.map.moveDown();
        }
        else if (keyCode == 32) {
            DungeonRunner.openChest();
            DungeonRunner.startBossFight();
        }
        e.preventDefault();
    }
});
/**
 * Datalist of all Pokémon that are encountered on the routes
 * No need to ever use this list, use RouteHelper instead
 * If you ever need to use this list, request changes in RouteHelper instead.
 */
const pokemonsPerRoute = {
    0: {
        1: {
            land: ["Pidgey", "Rattata"],
            water: [],
            headbutt: []
        },
        2: {
            land: ["Caterpie", "Weedle", "Rattata", "Nidoran(F)", "Nidoran(M)"],
            water: [],
            headbutt: []
        },
        3: {
            land: ["Pidgey", "Rattata", "Spearow", "Sandshrew", "Jigglypuff", "Mankey"],
            water: [],
            headbutt: []
        },
        4: {
            land: ["Rattata", "Spearow", "Ekans", "Sandshrew", "Mankey"],
            water: ["Poliwag", "Goldeen", "Psyduck", "Krabby", "Seaking"],
            headbutt: []
        },
        5: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Jigglypuff", "Oddish", "Meowth", "Mankey", "Abra", "Bellsprout"],
            water: [],
            headbutt: []
        },
        6: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Jigglypuff", "Oddish", "Meowth", "Mankey", "Abra", "Bellsprout"],
            water: ["Poliwag", "Goldeen", "Shellder", "Krabby"],
            headbutt: []
        },
        7: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Vulpix", "Jigglypuff", "Oddish", "Meowth", "Mankey", "Growlithe", "Abra", "Bellsprout"],
            water: [],
            headbutt: []
        },
        8: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Ekans", "Sandshrew", "Vulpix", "Jigglypuff", "Meowth", "Mankey", "Growlithe", "Abra", "Kadabra"],
            water: [],
            headbutt: []
        },
        9: {
            land: ["Rattata", "Raticate", "Spearow", "Fearow", "Ekans", "Sandshrew", "Nidoran(F)", "Nidoran(M)", "Nidorina", "Nidorino"],
            water: [],
            headbutt: []
        },
        10: {
            land: ["Rattata", "Raticate", "Spearow", "Ekans", "Sandshrew", "Nidoran(F)", "Nidoran(M)", "Machop", "Magnemite", "Voltorb"],
            water: ["Poliwag", "Goldeen", "Poliwhirl", "Slowpoke", "Krabby", "Kingler", "Horsea"],
            headbutt: []
        },
        11: {
            land: ["Pidgey", "Pidgeotto", "Raticate", "Rattata", "Spearow", "Ekans", "Sandshrew", "Drowzee"],
            water: ["Poliwag", "Goldeen", "Tentacool", "Shellder", "Krabby", "Horsea"],
            headbutt: []
        },
        12: {
            land: ["Pidgey", "Pidgeotto", "Oddish", "Gloom", "Venonat", "Bellsprout", "Weepinbell", "Farfetch'd", "Snorlax"],
            water: ["Slowbro", "Magikarp", "Poliwag", "Goldeen", "Tentacool", "Krabby", "Horsea", "Seadra"],
            headbutt: []
        },
        13: {
            land: ["Pidgey", "Pidgeotto", "Oddish", "Gloom", "Venonat", "Bellsprout", "Weepinbell", "Farfetch'd", "Ditto"],
            water: ["Slowbro", "Magikarp", "Poliwag", "Goldeen", "Tentacool", "Krabby", "Horsea", "Seadra"],
            headbutt: []
        },
        14: {
            land: ["Pidgey", "Pidgeotto", "Oddish", "Gloom", "Venonat", "Venomoth", "Bellsprout", "Weepinbell", "Ditto"],
            water: ["Poliwag", "Goldeen"],
            headbutt: []
        },
        15: {
            land: ["Pidgey", "Pidgeotto", "Oddish", "Gloom", "Venonat", "Venomoth", "Bellsprout", "Weepinbell", "Ditto"],
            water: [],
            headbutt: []
        },
        16: {
            land: ["Rattata", "Raticate", "Spearow", "Fearow", "Doduo", "Snorlax"],
            water: [],
            headbutt: []
        },
        17: {
            land: ["Raticate", "Spearow", "Fearow", "Ponyta", "Doduo", "Dodrio"],
            water: ["Poliwag", "Goldeen", "Tentacool", "Shellder", "Krabby"],
            headbutt: []
        },
        18: {
            land: ["Rattata", "Raticate", "Spearow", "Fearow", "Doduo"],
            water: ["Poliwag", "Goldeen", "Tentacool", "Shellder", "Krabby"],
            headbutt: []
        },
        19: {
            land: [],
            water: ["Tentacool", "Magikarp", "Poliwag", "Goldeen", "Tentacruel", "Shellder", "Horsea", "Staryu"],
            headbutt: []
        },
        20: {
            land: [],
            water: ["Tentacool", "Magikarp", "Poliwag", "Goldeen", "Tentacruel", "Shellder", "Horsea", "Staryu"],
            headbutt: []
        },
        21: {
            land: ["Pidgey", "Pidgeotto", "Rattata", "Raticate", "Tangela"],
            water: ["Magikarp", "Poliwag", "Goldeen", "Tentacruel", "Shellder", "Horsea", "Staryu"],
            headbutt: []
        },
        22: {
            land: ["Rattata", "Spearow", "Nidoran(F)", "Nidoran(M)", "Mankey"],
            water: ["Poliwag", "Poliwhirl", "Goldeen"],
            headbutt: []
        },
        23: {
            land: ["Spearow", "Fearow", "Ekans", "Arbok", "Sandshrew", "Sandslash", "Nidorina", "Nidorino", "Mankey", "Primeape", "Ditto"],
            water: ["Poliwag", "Goldeen", "Poliwhirl", "Slowbro", "Kingler", "Seadra", "Seaking"],
            headbutt: []
        },
        24: {
            land: ["Caterpie", "Metapod", "Weedle", "Kakuna", "Pidgey", "Pidgey", "Pidgeotto", "Oddish", "Venonat", "Abra", "Bellsprout"],
            water: ["Poliwag", "Goldeen", "Psyduck", "Krabby", "Seaking"],
            headbutt: []
        },
        25: {
            land: ["Caterpie", "Metapod", "Weedle", "Kakuna", "Pidgey", "Pidgeotto", "Oddish", "Venonat", "Abra", "Bellsprout"],
            water: ["Poliwag", "Goldeen", "Psyduck", "Krabby"],
            headbutt: []
        }
    },
    1: {
        26: {
            land: ["Raticate", "Arbok", "Sandslash", "Ponyta", "Doduo", "Dodrio", "Quagsire"],
            water: ["Tentacool", "Tentacruel", "Magikarp", "Shellder", "Chinchou", "Lanturn"],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        27: {
            land: ["Raticate", "Arbok", "Sandslash", "Ponyta", "Doduo", "Dodrio", "Quagsire"],
            water: ["Tentacool", "Tentacruel", "Magikarp", "Shellder", "Chinchou", "Lanturn"],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        28: {
            land: ["Ponyta", "Tangela", "Donphan", "Ursaring", "Rapidash", "Doduo", "Dodrio", "Sneasel", "Murkrow"],
            water: ["Poliwag", "Poliwhirl", "Magikarp"],
            headbutt: ["Natu", "Aipom", "Heracross"]
        },
        29: {
            land: ["Pidgey", "Rattata", "Sentret", "Hoothoot"],
            water: [],
            headbutt: ["Exeggcute", "Ledyba", "Spinarak", "Hoothoot", "Pineco"]
        },
        30: {
            land: ["Pidgey", "Rattata", "Caterpie", "Metapod", "Weedle", "Kakuna", "Zubat", "Hoothoot", "Ledyba", "Spinarak"],
            water: ["Poliwag", "Poliwhirl", "Magikarp"],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        31: {
            land: ["Pidgey", "Rattata", "Caterpie", "Metapod", "Weedle", "Kakuna", "Zubat", "Poliwag", "Hoothoot", "Ledyba", "Spinarak", "Bellsprout"],
            water: ["Poliwag", "Poliwhirl", "Magikarp"],
            headbutt: ["Spearow", "Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Aipom", "Pineco", "Heracross"]
        },
        32: {
            land: ["Rattata", "Ekans", "Zubat", "Bellsprout", "Mareep", "Hoppip", "Wooper"],
            water: ["Tentacool", "Tentacruel", "Quagsire", "Magikarp", "Qwilfish"],
            headbutt: ["Exeggcute", "Hoothoot", "Pineco"]
        },
        33: {
            land: ["Spearow", "Rattata", "Ekans", "Zubat", "Hoppip"],
            water: [],
            headbutt: ["Spearow", "Aipom", "Heracross"]
        },
        34: {
            land: ["Rattata", "Abra", "Drowzee", "Ditto"],
            water: ["Tentacool", "Tentacruel", "Krabby", "Magikarp", "Staryu", "Corsola", "Kingler"],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        35: {
            land: ["Pidgey", "Nidoran(F)", "Nidoran(M)", "Abra", "Drowzee", "Ditto", "Hoothoot", "Yanma"],
            water: ["Psyduck", "Golduck", "Poliwag", "Magikarp"],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        36: {
            land: ["Pidgey", "Nidoran(M)", "Nidoran(F)", "Vulpix", "Growlithe", "Hoothoot", "Stantler", "Sudowoodo"],
            water: [],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        37: {
            land: ["Pidgey", "Pidgeotto", "Vulpix", "Growlithe", "Hoothoot", "Ledyba", "Spinarak", "Stantler"],
            water: [],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        38: {
            land: ["Rattata", "Raticate", "Meowth", "Magnemite", "Farfetch'd", "Tauros", "Snubbull", "Miltank"],
            water: [],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        39: {
            land: ["Rattata", "Raticate", "Meowth", "Magnemite", "Farfetch'd", "Tauros", "Miltank"],
            water: [],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        },
        40: {
            land: [],
            water: ["Tentacool", "Tentacruel", "Krabby", "Magikarp", "Staryu", "Corsola", "Kingler"],
            headbutt: []
        },
        41: {
            land: [],
            water: ["Tentacool", "Tentacruel", "Mantine", "Magikarp", "Chinchou", "Shellder"],
            headbutt: []
        },
        42: {
            land: ["Spearow", "Zubat", "Mankey", "Mareep", "Flaaffy"],
            water: ["Goldeen", "Seaking", "Magikarp"],
            headbutt: ["Spearow", "Aipom", "Heracross"]
        },
        43: {
            land: ["Pidgeotto", "Venonat", "Noctowl", "Mareep", "Flaaffy", "Girafarig"],
            water: ["Magikarp", "Poliwag"],
            headbutt: ["Venonat", "Exeggcute", "Hoothoot", "Pineco"]
        },
        44: {
            land: ["Bellsprout", "Weepinbell", "Lickitung", "Tangela"],
            water: ["Poliwag", "Poliwhirl", "Magikarp", "Remoraid"],
            headbutt: ["Spearow", "Aipom", "Heracross"]
        },
        45: {
            land: ["Geodude", "Graveler", "Gligar", "Teddiursa", "Skarmory", "Phanpy"],
            water: ["Magikarp", "Poliwag"],
            headbutt: ["Spearow", "Aipom", "Heracross"]
        },
        46: {
            land: ["Spearow", "Rattata", "Geodude"],
            water: [],
            headbutt: ["Spearow", "Aipom", "Heracross"]
        },
        47: {
            land: ["Raticate", "Spearow", "Fearow", "Gloom", "Farfetch'd", "Ditto", "Noctowl", "Miltank"],
            water: ["Tentacool", "Seel", "Staryu", "Magikarp", "Shellder", "Chinchou", "Lanturn"],
            headbutt: ["Metapod", "Butterfree", "Kakuna", "Beedrill", "Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco", "Heracross"]
        },
        48: {
            land: ["Fearow", "Vulpix", "Gloom", "Diglett", "Growlithe", "Farfetch'd", "Tauros", "Hoppip", "Girafarig"],
            water: [],
            headbutt: ["Exeggcute", "Hoothoot", "Ledyba", "Spinarak", "Pineco"]
        }
    },
    2: {}
};
///<reference path="PokemonsPerRoute.ts"/>
/**
 * Helper class to retrieve information from PokemonsPerRoute
 */
class RouteHelper {
    /**
     * Retrieves a list of all Pokémon that can be caught on that route.
     * @param route
     * @param region
     * @param includeHeadbutt
     * @returns {string[]} list of all Pokémons that can be caught
     */
    static getAvailablePokemonList(route, region, includeHeadbutt = true) {
        // If the route is somehow higher than allowed, use the first route to generateWildPokemon Pokémon
        if (route > GameConstants.RegionRoute[region]) {
            route = 1;
        }
        let possiblePokemons = pokemonsPerRoute[region][route];
        if (possiblePokemons == null) {
            return ["Rattata"];
        }
        let pokemonList = possiblePokemons.land;
        if (player.hasKeyItem("Super rod") || possiblePokemons.land.length == 0) {
            pokemonList = pokemonList.concat(possiblePokemons.water);
        }
        if (includeHeadbutt) {
            pokemonList = pokemonList.concat(possiblePokemons.headbutt);
        }
        return pokemonList;
    }
    /**
     * Checks if all Pokémons on this route are caught by the player.
     * @param route
     * @param region
     * @param includeShiny
     * @param includeHeadbutt
     * @returns {boolean} true if all Pokémon on this route are caught.
     */
    static routeCompleted(route, region, includeShiny, includeHeadbutt = true) {
        let possiblePokemon = RouteHelper.getAvailablePokemonList(route, region, includeHeadbutt);
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static listCompleted(possiblePokemon, includeShiny) {
        for (let i = 0; i < possiblePokemon.length; i++) {
            if (!player.alreadyCaughtPokemon(possiblePokemon[i])) {
                return false;
            }
            if (includeShiny && !player.alreadyCaughtPokemonShiny((possiblePokemon[i]))) {
                return false;
            }
        }
        return true;
    }
}
///<reference path="wildBattle/RouteHelper.ts"/>
///<reference path="Battle.ts"/>
/**
 * Start the game when all html elements are loaded.
 */
let player;
const debug = false;
let game;
document.addEventListener("DOMContentLoaded", function (event) {
    Preload.load(debug).then(function () {
        OakItemRunner.initialize();
        UndergroundItem.initialize();
        game = new Game();
        // DungeonRunner.initializeDungeon(dungeonList["Viridian Forest"]);
        $(document).ready(function () {
            $('[data-toggle="popover"]').popover();
            $('[data-toggle="tooltip"]').tooltip();
        });
        Notifier.notify("Game loaded", GameConstants.NotificationOption.info);
        ko.bindingHandlers.tooltip = {
            init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
                let local = ko.utils.unwrapObservable(valueAccessor()), options = {};
                ko.utils.extend(options, ko.bindingHandlers.tooltip.options);
                ko.utils.extend(options, local);
                $(element).tooltip(options);
                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(element).tooltip("dispose");
                });
                if (bindingContext.$data instanceof Plot) {
                    $(element).hover(function () {
                        $(this).data('to', setInterval(function () {
                            $(element).tooltip('hide')
                                .attr('data-original-title', FarmRunner.getTooltipLabel(bindingContext.$index()))
                                .tooltip('show');
                        }, 100));
                    }, function () {
                        clearInterval($(this).data('to'));
                    });
                }
            },
            options: {
                placement: "bottom",
                trigger: "click"
            }
        };
        PokedexHelper.populateTypeFilters();
        PokedexHelper.updateList();
        ko.applyBindings(game);
        ko.options.deferUpdates = true;
        Game.applyRouteBindings();
        Preload.hideSplashScreen();
        game.start();
    });
});
/**
 * Main game class.
 */
class Game {
    constructor() {
        this.farmCounter = 0;
        player = Save.load();
        KeyItemHandler.initialize();
        AchievementHandler.initialize();
        player.gainKeyItem("Coin case", true);
        player.gainKeyItem("Teachy tv", true);
        player.gainKeyItem("Pokeball bag", true);
        this.load();
    }
    start() {
        console.log("game started");
        this.interval = setInterval(this.gameTick, GameConstants.TICK_TIME);
    }
    stop() {
        clearTimeout(this.interval);
    }
    gameTick() {
        // Update tick counters
        this.undergroundCounter += GameConstants.TICK_TIME;
        FarmRunner.counter += GameConstants.TICK_TIME;
        Game.achievementCounter += GameConstants.TICK_TIME;
        if (Game.achievementCounter > GameConstants.ACHIEVEMENT_TICK) {
            Game.achievementCounter = 0;
            AchievementHandler.checkAchievements();
        }
        Save.counter += GameConstants.TICK_TIME;
        Underground.counter += GameConstants.TICK_TIME;
        GameHelper.counter += GameConstants.TICK_TIME;
        switch (Game.gameState()) {
            case GameConstants.GameState.fighting: {
                Battle.counter += GameConstants.TICK_TIME;
                if (Battle.counter > GameConstants.BATTLE_TICK) {
                    Battle.tick();
                }
                break;
            }
            case GameConstants.GameState.gym: {
                GymBattle.counter += GameConstants.TICK_TIME;
                if (GymBattle.counter > GameConstants.BATTLE_TICK) {
                    GymBattle.tick();
                }
                GymRunner.tick();
                break;
            }
            case GameConstants.GameState.dungeon: {
                DungeonBattle.counter += GameConstants.TICK_TIME;
                if (DungeonBattle.counter > GameConstants.BATTLE_TICK) {
                    DungeonBattle.tick();
                }
                DungeonRunner.tick();
                break;
            }
        }
        if (Save.counter > GameConstants.SAVE_TICK) {
            let now = new Date();
            if (new Date(player._lastSeen).toLocaleDateString() !== now.toLocaleDateString()) {
                player.questRefreshes = 0;
                QuestHelper.quitAllQuests();
                QuestHelper.clearQuests();
                QuestHelper.generateQuests(player.questLevel, player.questRefreshes, now);
                DailyDeal.generateDeals(Underground.getDailyDealsMax(), now);
                Notifier.notify("It's a new day! Your quests and underground deals have been updated.", GameConstants.NotificationOption.info);
            }
            player._lastSeen = Date.now();
            Save.store(player);
        }
        if (Underground.counter > GameConstants.UNDERGROUND_TICK) {
            Underground.energyTick(Math.max(0, Underground.energyTick() - 1));
            if (Underground.energyTick() == 0) {
                Underground.gainEnergy();
                Underground.energyTick(Underground.getEnergyRegenTime());
            }
            Underground.counter = 0;
        }
        if (FarmRunner.counter > GameConstants.FARM_TICK) {
            FarmRunner.tick();
        }
        if (GameHelper.counter > 60 * 1000) {
            GameHelper.updateTime();
        }
    }
    save() {
    }
    load() {
        OakItemRunner.loadOakItems();
        Battle.generateNewEnemy();
        Safari.load();
        Save.loadMine();
        Underground.energyTick(Underground.getEnergyRegenTime());
        DailyDeal.generateDeals(Underground.getDailyDealsMax(), new Date());
        QuestHelper.generateQuests(player.questLevel, player.questRefreshes, new Date());
        QuestHelper.loadCurrentQuests(player.currentQuests);
        if (!player.tutorialComplete()) {
            QuestLineHelper.createTutorial();
            QuestLineHelper.tutorial.resumeAt(player.tutorialProgress(), player.tutorialState);
        }
    }
    static applyRouteBindings() {
        $('path, rect').hover(function () {
            let id = $(this).attr('data-town');
            if (id && id != 'mapTooltipWrapper') {
                let tooltip = $('#mapTooltip');
                tooltip.text(id);
                tooltip.css('visibility', 'visible');
            }
        }, function () {
            let tooltip = $('#mapTooltip');
            tooltip.text('');
            tooltip.css('visibility', 'hidden');
        });
    }
    static updateMoney(text = $("#playerMoney").text()) {
        $("#playerMoney").prop('number', player.money);
    }
    static animateMoney(money, target) {
        let pos;
        if ($('#' + target).offset()) {
            pos = $('#' + target).offset();
        }
        else {
            pos = { "top": -200, "left": 0 };
        }
        let left = ((Math.random() * ((pos.left + 25) - (pos.left - 25)) + (pos.left - 25))).toFixed(2);
        let place = money.toString().length;
        let multi = 1;
        for (let i = 0; i < place; i++) {
            multi *= 10;
        }
        let ani = '<p class="moneyanimation" style="z-index:50;position:absolute;left:' + left + 'px;top:' + pos.top + 'px;">+' + money + '</p>';
        $(ani).prependTo('body').animate({
            top: -100,
            opacity: 0
        }, 250 * Math.log(money) + 150, "linear", function () {
            $(this).remove();
        });
    }
}
Game.achievementCounter = 0;
Game.gameState = ko.observable(GameConstants.GameState.fighting);
class Notifier {
    static notify(message, type) {
        $.notify({
            // options
            icon: 'glyphicon glyphicon-warning-sign',
            title: '',
            message: GameConstants.humanifyString(message),
            url: '',
            target: ''
        }, {
            // settings
            element: 'body',
            position: null,
            type: GameConstants.NotificationOption[type],
            allow_dismiss: true,
            newest_on_top: true,
            showProgressbar: false,
            placement: {
                from: "top",
                align: "left"
            },
            offset: 20,
            spacing: 10,
            z_index: 1050,
            delay: 5000,
            timer: 1000,
            url_target: '_blank',
            mouse_over: null,
            animate: {
                enter: 'animated fadeInDown',
                exit: 'animated fadeOutUp'
            },
            onShow: null,
            onShown: null,
            onClose: null,
            onClosed: null,
            icon_type: 'class',
            template: '<div data-notify="container" class="alert alert-{0}" role="alert">' +
                '<button type="button" aria-hidden="true" class="close" data-notify="dismiss">×</button>' +
                '<span data-notify="icon"></span> ' +
                '<span data-notify="title">{1}</span> ' +
                '<span data-notify="message">{2}</span>' +
                '<span style="padding: 5px;"></span>' +
                '<div class="progress" data-notify="progressbar">' +
                '<div class="progress-bar progress-bar-{0}" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%;"></div>' +
                '</div>' +
                '<a href="{3}" target="{4}" data-notify="url"></a>' +
                '</div>'
        });
    }
}
///<reference path="../GameConstants.ts"/>
// TODO(@Isha) refactor into a more generic 'amount', not just a decreasing amount.
class Cost {
    constructor(amount, currency) {
        this.amount = amount;
        this.currency = currency;
    }
}
///<reference path="../GameConstants.ts"/>
///<reference path="Cost.ts"/>
class CostFactory {
    static createArray(amounts, currency) {
        let array = [];
        for (let i = 0; i < amounts.length; i++) {
            array.push(new Cost(amounts[i], currency));
        }
        return array;
    }
}
///<reference path="../GameConstants.ts"/>
///<reference path="Cost.ts"/>
///<reference path="CostFactory.ts"/>
class Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        this._level = ko.observable();
        // Optional array of costs
        this.costList = [];
        // Optional array of benefits
        this.bonusList = [];
        this.name = name;
        this.displayName = displayName;
        this.maxLevel = maxLevel;
        this.level = 0;
        this.costList = costList;
        this.bonusList = bonusList;
        this.increasing = increasing;
    }
    calculateCost() {
        return this.costList[this.level];
    }
    // Override with a custom function
    calculateBonus(level = this.level) {
        return this.bonusList[level];
    }
    upgradeBonus() {
        if (!this.isMaxLevel()) {
            return this.calculateBonus(this.level + 1) - this.calculateBonus(this.level);
        }
        return 0;
    }
    isMaxLevel() {
        return this.level >= this.maxLevel;
    }
    canAfford() {
        return player.canAfford(this.calculateCost());
    }
    // Override in subclass when other requirements exist.
    canBuy() {
        return this.level < this.maxLevel && this.canAfford();
    }
    buy() {
        if (this.canBuy()) {
            player.payCost(this.calculateCost());
            this.levelUp();
        }
    }
    levelUp() {
        this.level = this.level + 1;
    }
    // Knockout getters/setters
    get level() {
        return this._level();
    }
    set level(value) {
        this._level(Math.min(value, this.maxLevel));
    }
}
///<reference path="upgrades/Upgrade.ts"/>
/**
 * Information about the player.
 * All player variables need to be saved.
 */
class Player {
    constructor(savedPlayer) {
        this._keyItems = ko.observableArray();
        this.recentKeyItem = ko.observable("Teachy tv");
        let saved = (savedPlayer != null);
        savedPlayer = savedPlayer || {};
        this._lastSeen = savedPlayer._lastSeen || 0;
        let tmpCaughtList = [];
        this._money = ko.observable(savedPlayer._money || 0);
        this._dungeonTokens = ko.observable(savedPlayer._dungeonTokens || 0);
        this._questPoints = ko.observable(savedPlayer._questPoints || 0);
        this._caughtShinyList = ko.observableArray(savedPlayer._caughtShinyList);
        this._region = ko.observable(savedPlayer._region);
        if (MapHelper.validRoute(savedPlayer._route, savedPlayer._region)) {
            this._route = ko.observable(savedPlayer._route);
        }
        else {
            switch (savedPlayer._region) {
                case 0:
                    this._route = ko.observable(1);
                    break;
                case 1:
                    this._route = ko.observable(29);
                    break;
                default:
                    this._route = ko.observable(1);
                    this._region = ko.observable(GameConstants.Region.kanto);
            }
        }
        if (savedPlayer._caughtPokemonList) {
            tmpCaughtList = savedPlayer._caughtPokemonList.map((pokemon) => {
                return new CaughtPokemon(PokemonHelper.getPokemonByName(pokemon.name), pokemon.evolved, pokemon.attackBonus, pokemon.exp, pokemon.breeding);
            });
        }
        this._caughtPokemonList = ko.observableArray(tmpCaughtList);
        this._routeKills = Array.apply(null, Array(GameConstants.AMOUNT_OF_ROUTES + 1)).map(function (val, index) {
            return ko.observable(savedPlayer._routeKills ? (savedPlayer._routeKills[index] || 0) : 0);
        });
        this._defeatedAmount = Array.apply(null, Array(pokemonList.length + 1)).map(function (val, index) {
            return ko.observable(savedPlayer._defeatedAmount ? (savedPlayer._defeatedAmount[index] || 0) : 0);
        });
        this._caughtAmount = Array.apply(null, Array(pokemonList.length + 1)).map(function (val, index) {
            return ko.observable(savedPlayer._caughtAmount ? (savedPlayer._caughtAmount[index] || 0) : 0);
        });
        this._oakItemExp = Array.apply(null, Array(GameConstants.AMOUNT_OF_OAKITEMS + 1)).map(function (val, index) {
            return ko.observable(savedPlayer._oakItemExp ? (savedPlayer._oakItemExp[index] || 0) : 0);
        });
        this._oakItemsEquipped = savedPlayer._oakItemsEquipped || [];
        this._routeKillsNeeded = ko.observable(savedPlayer._routeKillsNeeded || 10);
        this._gymBadges = ko.observableArray(savedPlayer._gymBadges);
        this._keyItems = ko.observableArray(savedPlayer._keyItems);
        this._pokeballs = Array.apply(null, Array(4)).map(function (val, index) {
            let amt = index == 0 ? 50 : 0;
            if (savedPlayer._pokeballs && typeof savedPlayer._pokeballs[index] == 'number') {
                amt = savedPlayer._pokeballs[index];
            }
            return ko.observable(amt);
        });
        this._notCaughtBallSelection = typeof (savedPlayer._notCaughtBallSelection) != 'undefined' ? ko.observable(savedPlayer._notCaughtBallSelection) : ko.observable(GameConstants.Pokeball.Pokeball);
        this._alreadyCaughtBallSelection = typeof (savedPlayer._alreadyCaughtBallSelection) != 'undefined' ? ko.observable(savedPlayer._alreadyCaughtBallSelection) : ko.observable(GameConstants.Pokeball.None);
        if (this._gymBadges().length == 0) {
            this._gymBadges.push(GameConstants.Badge.None);
        }
        this._sortOption = ko.observable(savedPlayer._sortOption || null);
        this._sortDescending = ko.observable(typeof (savedPlayer._sortDescending) != 'undefined' ? savedPlayer._sortDescending : false);
        this.clickAttackObservable = ko.computed(function () {
            return this.calculateClickAttack();
        }, this);
        this.pokemonAttackObservable = ko.computed(function () {
            return this.calculatePokemonAttack(GameConstants.PokemonType.None, GameConstants.PokemonType.None);
        }, this);
        this._town = ko.observable(TownList["Pallet Town"]);
        this._currentTown = ko.observable("");
        this._starter = savedPlayer._starter || GameConstants.Starter.None;
        console.log(savedPlayer._itemList);
        this._itemList = Save.initializeItemlist();
        if (savedPlayer._itemList) {
            for (let key in savedPlayer._itemList) {
                this._itemList[key] = ko.observable(savedPlayer._itemList[key]);
            }
        }
        this._itemMultipliers = savedPlayer._itemMultipliers || Save.initializeMultipliers();
        // TODO(@Isha) move to underground classes.
        this._mineInventory = ko.observableArray(savedPlayer._mineInventory || []);
        for (let item of this._mineInventory()) {
            item.amount = ko.observable(item.amount);
        }
        this._diamonds = ko.observable(savedPlayer._diamonds || 0);
        savedPlayer._eggList = savedPlayer._eggList || [null, null, null, null];
        this._eggList = savedPlayer._eggList.map((egg) => {
            return ko.observable(egg ? new Egg(egg.totalSteps, egg.pokemon, egg.type, egg.steps, egg.shinySteps, egg.notified) : null);
        });
        this._eggSlots = ko.observable(savedPlayer._eggSlots != null ? savedPlayer._eggSlots : 1);
        this._shardUpgrades = Save.initializeShards(savedPlayer._shardUpgrades);
        this.achievementsCompleted = savedPlayer.achievementsCompleted || {};
        this._shardsCollected = Array.apply(null, Array(18)).map((value, index) => {
            return ko.observable(savedPlayer._shardsCollected ? savedPlayer._shardsCollected[index] : 0);
        });
        let today = new Date();
        let lastSeen = new Date(this._lastSeen);
        if (today.toLocaleDateString() == lastSeen.toLocaleDateString()) {
            this.questRefreshes = savedPlayer.questRefreshes;
            if (savedPlayer.completedQuestList) {
                this.completedQuestList = savedPlayer.completedQuestList.map((bool) => {
                    return ko.observable(bool);
                });
            }
            else {
                this.completedQuestList = Array.apply(null, Array(GameConstants.QUESTS_PER_SET)).map(() => {
                    return ko.observable(false);
                });
            }
            this.currentQuests = ko.observableArray(savedPlayer.currentQuests || []);
            for (let q of this.currentQuests()) {
                q.initial = ko.observable(q.initial);
            }
        }
        else {
            this.questRefreshes = 0;
            this.completedQuestList = Array.apply(null, Array(GameConstants.QUESTS_PER_SET)).map(() => {
                return ko.observable(false);
            });
            this.currentQuests = ko.observableArray([]);
        }
        this._questXP = ko.observable(savedPlayer._questXP || 0);
        this._questPoints = ko.observable(savedPlayer._questPoints || 0);
        this._shinyCatches = ko.observable(savedPlayer._shinyCatches || 0);
        this._lastSeen = Date.now();
        this.statistics = new Statistics(savedPlayer.statistics);
        this.farmPoints = ko.observable(savedPlayer.farmPoints || 0);
        this.berryList = Array.apply(null, Array(GameConstants.AMOUNT_OF_BERRIES)).map(function (val, index) {
            return ko.observable(savedPlayer.berryList ? (savedPlayer.berryList[index] || 0) : 0);
        });
        this.plotList = Save.initializePlots(savedPlayer.plotList);
        this.highestRegion = savedPlayer.highestRegion || 0;
        this.tutorialProgress = ko.observable(savedPlayer.tutorialProgress || 0);
        this.tutorialState = savedPlayer.tutorialState;
        this.tutorialComplete = ko.observable(!!savedPlayer.tutorialComplete);
        //TODO remove before deployment
        if (!debug) {
            if (this.starter === GameConstants.Starter.None) {
                StartSequenceRunner.start();
            }
        }
    }
    get defeatedAmount() {
        return this._defeatedAmount;
    }
    get itemList() {
        return this._itemList;
    }
    routeKillsObservable(route) {
        return ko.computed(function () {
            return Math.min(this.routeKillsNeeded, this.routeKills[route]());
        }, this);
    }
    pokeballsObservable(ball) {
        return ko.computed(function () {
            return this._pokeballs[ball]();
        }, this);
    }
    setAlreadyCaughtBallSelection(ball) {
        this._alreadyCaughtBallSelection(ball);
    }
    setNotCaughtBallSelection(ball) {
        this._notCaughtBallSelection(ball);
    }
    gainPokeballs(ball, amount) {
        this._pokeballs[ball](this._pokeballs[ball]() + amount);
    }
    usePokeball(ball) {
        this._pokeballs[ball](this._pokeballs[ball]() - 1);
        GameHelper.incrementObservable(this.statistics.pokeballsUsed[ball]);
    }
    addRouteKill() {
        this.routeKills[this.route()](this.routeKills[this.route()]() + 1);
    }
    hasKeyItem(name) {
        for (let i = 0; i < this._keyItems().length; i++) {
            if (this._keyItems()[i] == name) {
                return true;
            }
        }
        return false;
    }
    set defeatedAmount(value) {
        this._defeatedAmount = value;
    }
    gainKeyItem(name, supressModal) {
        if (!this.hasKeyItem(name)) {
            this.recentKeyItem(name);
            if (!supressModal) {
                $('.modal').modal('hide');
                $("#keyItemModal").modal('show');
            }
            this._keyItems().push(name);
            KeyItemHandler.getKeyItemObservableByName(name).valueHasMutated();
            player._keyItems.valueHasMutated();
        }
    }
    calculateOakItemSlots() {
        let total = 0;
        if (this.caughtPokemonList.length >= GameConstants.OAKITEM_FIRST_UNLOCK) {
            total++;
        }
        if (this.caughtPokemonList.length >= GameConstants.OAKITEM_SECOND_UNLOCK) {
            total++;
        }
        if (this.caughtPokemonList.length >= GameConstants.OAKITEM_THIRD_UNLOCK) {
            total++;
        }
        return ko.observable(total);
    }
    gainOakItemExp(item, amount) {
        this.oakItemExp[item](this.oakItemExp[item]() + amount);
    }
    getOakItemExp(item) {
        return this.oakItemExp[item]();
    }
    calculateClickAttack() {
        let oakItemBonus = OakItemRunner.isActive(GameConstants.OakItem.Poison_Barb) ? (1 + OakItemRunner.calculateBonus(GameConstants.OakItem.Poison_Barb) / 100) : 1;
        return Math.floor(Math.pow(this.caughtPokemonList.length + 1, 1.4) * oakItemBonus);
    }
    calculateMoneyMultiplier() {
        // TODO Calculate money multiplier by checking upgrades and multipliers.
        return 1;
    }
    calculateExpMultiplier() {
        // TODO Calculate exp multiplier by checking upgrades and multipliers.
        return 1;
    }
    calculateDungeonTokenMultiplier() {
        // TODO Calculate dungeon token multiplier by checking upgrades and multipliers.
        return 1;
    }
    calculateCatchTime(ball) {
        switch (ball) {
            case GameConstants.Pokeball.Pokeball:
                return 1250;
            case GameConstants.Pokeball.Greatball:
                return 1000;
            case GameConstants.Pokeball.Ultraball:
                return 750;
            case GameConstants.Pokeball.Masterball:
                return 500;
            default:
                return 1250;
        }
    }
    /**
     * Checks the players preferences to see what pokéball needs to be used on the next throw.
     * Checks from the players pref to the most basic ball to see if the player has any.
     * @param alreadyCaught if the pokémon is already caught.
     * @param shiny if the pokémon is shiny.
     * @returns {GameConstants.Pokeball} pokéball to use.
     */
    calculatePokeballToUse(pokemonName, isShiny) {
        const alreadyCaught = this.alreadyCaughtPokemon(pokemonName);
        const alreadyCaughtShiny = this.alreadyCaughtPokemonShiny(pokemonName);
        let pref;
        // just check against alreadyCaughtShiny as this returns false when you don't have the pokemon yet.
        if (!alreadyCaught || (!alreadyCaughtShiny && isShiny)) {
            pref = this._notCaughtBallSelection();
        }
        else {
            pref = this._alreadyCaughtBallSelection();
        }
        let use = GameConstants.Pokeball.None;
        // Check which Pokeballs we have in stock that are of equal or lesser than selection
        for (let i = pref; i >= 0; i--) {
            if (this._pokeballs[i]() > 0) {
                use = i;
                break;
            }
        }
        return use;
    }
    /**
     * Loops through the caughtPokemonList to check if the pokémon is already caight
     * @param pokemonName name to search for.
     * @returns {boolean}
     */
    alreadyCaughtPokemon(pokemonName) {
        const pokemon = PokemonHelper.getPokemonByName(pokemonName);
        if (!pokemon)
            return false;
        const id = PokemonHelper.getPokemonByName(pokemonName).id;
        return player.caughtAmount[id]() > 0;
    }
    alreadyCaughtPokemonShiny(pokemonName) {
        if (!this.alreadyCaughtPokemon(pokemonName))
            return false;
        for (let i = 0; i < this.caughtShinyList().length; i++) {
            if (this.caughtShinyList()[i] == pokemonName) {
                return true;
            }
        }
        return false;
    }
    capturePokemon(pokemonName, shiny = false, supressNotification = false) {
        if (PokemonHelper.calcNativeRegion(pokemonName) > player.highestRegion) {
            return;
        }
        OakItemRunner.use(GameConstants.OakItem.Magic_Ball);
        let pokemonData = PokemonHelper.getPokemonByName(pokemonName);
        if (!this.alreadyCaughtPokemon(pokemonName)) {
            let caughtPokemon = new CaughtPokemon(pokemonData, false, 0, 0);
            this._caughtPokemonList.push(caughtPokemon);
            if (!supressNotification) {
                Notifier.notify(`You have captured a ${pokemonName}!`, GameConstants.NotificationOption.success);
            }
        }
        if (shiny && !this.alreadyCaughtPokemonShiny(pokemonName)) {
            this._caughtShinyList.push(pokemonName);
            Save.store(player);
        }
        if (shiny) {
            player.shinyCatches++;
        }
        player.caughtAmount[pokemonData.id](player.caughtAmount[pokemonData.id]() + 1);
        GameHelper.incrementObservable(player.statistics.pokemonCaptured);
    }
    hasBadge(badge) {
        if (badge == undefined || GameConstants.Badge.None) {
            return true;
        }
        for (let i = 0; i < this._gymBadges().length; i++) {
            if (this._gymBadges()[i] == badge) {
                return true;
            }
        }
        return false;
    }
    gainMoney(money) {
        OakItemRunner.use(GameConstants.OakItem.Amulet_Coin);
        // TODO add money multipliers
        let oakItemBonus = OakItemRunner.isActive(GameConstants.OakItem.Amulet_Coin) ? (1 + OakItemRunner.calculateBonus(GameConstants.OakItem.Amulet_Coin) / 100) : 1;
        let moneytogain = Math.floor(money * oakItemBonus * (1 + AchievementHandler.achievementBonus()));
        this._money(this._money() + moneytogain);
        GameHelper.incrementObservable(this.statistics.totalMoney, moneytogain);
        Game.updateMoney();
        Game.animateMoney(moneytogain, 'playerMoney');
    }
    set itemList(value) {
        this._itemList = value;
    }
    hasCurrency(amt, curr) {
        switch (curr) {
            case GameConstants.Currency.money:
                return this.hasMoney(amt);
            case GameConstants.Currency.questPoint:
                return this.hasQuestPoints(amt);
            case GameConstants.Currency.dungeontoken:
                return this.hasDungeonTokens(amt);
            case GameConstants.Currency.diamond:
                return this.hasDiamonds(amt);
            default:
                return false;
        }
    }
    canAfford(cost) {
        return this.hasCurrency(cost.amount, cost.currency);
    }
    hasMoney(money) {
        return this._money() >= money;
    }
    hasQuestPoints(questPoints) {
        return this._questPoints() >= questPoints;
    }
    hasDungeonTokens(tokens) {
        return this._dungeonTokens() >= tokens;
    }
    hasDiamonds(diamonds) {
        return this._diamonds() >= diamonds;
    }
    payCurrency(amt, curr) {
        switch (curr) {
            case GameConstants.Currency.money:
                return this.payMoney(amt);
            case GameConstants.Currency.questPoint:
                return this.payQuestPoints(amt);
            case GameConstants.Currency.dungeontoken:
                return this.payDungeonTokens(amt);
            case GameConstants.Currency.diamond:
                return this.payDiamonds(amt);
            default:
                return false;
        }
    }
    payCost(cost) {
        return this.payCurrency(cost.amount, cost.currency);
    }
    payQuestPoints(questPoints) {
        if (this.hasQuestPoints(questPoints)) {
            this._questPoints(Math.floor(this.questPoints - questPoints));
            return true;
        }
        else {
            return false;
        }
    }
    payMoney(money) {
        if (this.hasMoney(money)) {
            this._money(Math.floor(this._money() - money));
            Game.updateMoney();
            return true;
        }
        else {
            return false;
        }
    }
    payDungeonTokens(tokens) {
        if (this.hasDungeonTokens(tokens)) {
            this._dungeonTokens(Math.floor(this._dungeonTokens() - tokens));
            return true;
        }
        else {
            return false;
        }
    }
    payDiamonds(diamonds) {
        if (this.hasDiamonds(diamonds)) {
            this._diamonds(Math.floor(this._diamonds() - diamonds));
            return true;
        }
        else {
            return false;
        }
    }
    gainFarmPoints(points) {
        this.farmPoints(Math.floor(this.farmPoints() + points));
    }
    gainExp(exp, level, trainer) {
        OakItemRunner.use(GameConstants.OakItem.Exp_Share);
        // TODO add exp multipliers
        let trainerBonus = trainer ? 1.5 : 1;
        let oakItemBonus = OakItemRunner.isActive(GameConstants.OakItem.Exp_Share) ? 1 + (OakItemRunner.calculateBonus(GameConstants.OakItem.Exp_Share) / 100) : 1;
        let expTotal = Math.floor(exp * level * trainerBonus * oakItemBonus * (1 + AchievementHandler.achievementBonus()) / 9);
        for (let pokemon of this._caughtPokemonList()) {
            if (pokemon.levelObservable() < (this.gymBadges.length + 2) * 10) {
                pokemon.exp(pokemon.exp() + expTotal);
            }
        }
    }
    gainShards(pokemon) {
        let typeNum = GameConstants.PokemonType[pokemon.type1];
        player._shardsCollected[typeNum](player._shardsCollected[typeNum]() + pokemon.shardReward);
        GameHelper.incrementObservable(player.statistics.totalShards[typeNum], pokemon.shardReward);
        if (pokemon.type2 != GameConstants.PokemonType.None) {
            typeNum = GameConstants.PokemonType[pokemon.type2];
            player._shardsCollected[typeNum](player._shardsCollected[typeNum]() + pokemon.shardReward);
            GameHelper.incrementObservable(player.statistics.totalShards[typeNum], pokemon.shardReward);
        }
    }
    buyShardUpgrade(typeNum, effectNum) {
        if (this.canBuyShardUpgrade(typeNum, effectNum)) {
            this._shardsCollected[typeNum](this._shardsCollected[typeNum]() - this.getShardUpgradeCost(typeNum, effectNum));
            this._shardUpgrades[typeNum][effectNum](this._shardUpgrades[typeNum][effectNum]() + 1);
        }
    }
    canBuyShardUpgrade(typeNum, effectNum) {
        let lessThanMax = this._shardUpgrades[typeNum][effectNum]() < GameConstants.MAX_SHARD_UPGRADES;
        let hasEnoughShards = this._shardsCollected[typeNum]() >= this.getShardUpgradeCost(typeNum, effectNum);
        return lessThanMax && hasEnoughShards;
    }
    getShardUpgradeCost(typeNum, effectNum) {
        let cost = (this._shardUpgrades[typeNum][effectNum]() + 1) * GameConstants.SHARD_UPGRADE_COST;
        return cost;
    }
    sortedPokemonList() {
        return ko.pureComputed(function () {
            return this._caughtPokemonList().sort(PokemonHelper.compareBy(GameConstants.SortOptionsEnum[player._sortOption()], player._sortDescending()));
        }, this).extend({ rateLimit: player.calculateCatchTime() });
    }
    maxLevelPokemonList() {
        return ko.pureComputed(function () {
            return this._caughtPokemonList().filter((pokemon) => {
                return pokemon.levelObservable() == 100 && !pokemon.breeding();
            });
        }, this);
    }
    get caughtAmount() {
        return this._caughtAmount;
    }
    set caughtAmount(value) {
        this._caughtAmount = value;
    }
    get itemMultipliers() {
        return this._itemMultipliers;
    }
    canBreedPokemon() {
        return this.hasMaxLevelPokemon() && this.hasFreeEggSlot();
    }
    hasMaxLevelPokemon() {
        return this.maxLevelPokemonList()().length > 0;
    }
    hasFreeEggSlot() {
        let counter = 0;
        for (let egg of this._eggList) {
            if (egg() !== null) {
                counter++;
            }
        }
        return counter < this._eggSlots();
    }
    gainEgg(e) {
        for (let i = 0; i < this._eggList.length; i++) {
            if (this._eggList[i]() == null) {
                this._eggList[i](e);
                return true;
            }
        }
        console.log("Error: Could not place " + GameConstants.EggType[e.type] + " Egg");
        return false;
    }
    gainBadge(badge) {
        this._gymBadges.push(badge);
    }
    gainDungeonTokens(tokens) {
        this._dungeonTokens(Math.floor(this._dungeonTokens() + tokens));
        GameHelper.incrementObservable(this.statistics.totalTokens, tokens);
        Game.animateMoney(tokens, 'playerMoneyDungeon');
    }
    get routeKills() {
        return this._routeKills;
    }
    set routeKills(value) {
        this._routeKills = value;
    }
    get routeKillsNeeded() {
        return this._routeKillsNeeded();
    }
    set routeKillsNeeded(value) {
        this._routeKillsNeeded(value);
    }
    get route() {
        return this._route;
    }
    set route(value) {
        this._route = value;
    }
    get money() {
        return this._money();
    }
    get dungeonTokens() {
        return this._dungeonTokens;
    }
    get caughtPokemonList() {
        return this._caughtPokemonList();
    }
    get region() {
        return this._region();
    }
    set region(value) {
        this._region(value);
    }
    get gymBadges() {
        return this._gymBadges();
    }
    set gymBadges(value) {
        this._gymBadges(value);
    }
    get caughtShinyList() {
        return this._caughtShinyList;
    }
    set caughtShinyList(value) {
        this._caughtShinyList = value;
    }
    get town() {
        return this._town;
    }
    set town(value) {
        this._town = value;
    }
    get currentTown() {
        return this._currentTown;
    }
    set currentTown(value) {
        this._currentTown = value;
    }
    get oakItemsEquipped() {
        return this._oakItemsEquipped;
    }
    set oakItemsEquipped(value) {
        this._oakItemsEquipped = value;
    }
    get starter() {
        return this._starter;
    }
    set starter(value) {
        this._starter = value;
    }
    get oakItemExp() {
        return this._oakItemExp;
    }
    set oakItemExp(value) {
        this._oakItemExp = value;
    }
    get eggList() {
        return this._eggList;
    }
    set eggList(value) {
        this._eggList = value;
    }
    gainItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() + amount);
    }
    loseItem(itemName, amount) {
        this._itemList[itemName](this._itemList[itemName]() - amount);
    }
    lowerItemMultipliers() {
        for (let obj in ItemList) {
            let item = ItemList[obj];
            item.decreasePriceMultiplier();
        }
    }
    // TODO(@Isha) move to underground classes.
    hasMineItems() {
        for (let i = 0; i < this._mineInventory().length; i++) {
            if (this._mineInventory()[i].amount() > 0) {
                return true;
            }
        }
        return false;
    }
    /**
     * Calculate the attack of all your Pokémon
     * @param type1
     * @param type2 types of the enemy we're calculating damage against.
     * @returns {number} damage to be done.
     */
    calculatePokemonAttack(type1, type2) {
        // TODO Calculate pokemon attack by checking upgrades and multipliers.
        let attack = 0;
        for (let pokemon of this.caughtPokemonList) {
            let multiplier = 1;
            if (this.region !== GameHelper.getRegion(pokemon.id)) {
                multiplier = 0.2;
            }
            if (!pokemon.breeding()) {
                if (Battle.enemyPokemon() == null || type1 == GameConstants.PokemonType.None) {
                    attack += pokemon.attack() * multiplier;
                }
                else {
                    let dataPokemon = PokemonHelper.getPokemonByName(pokemon.name);
                    attack += pokemon.attack() * TypeHelper.getAttackModifier(dataPokemon.type1, dataPokemon.type2, Battle.enemyPokemon().type1, Battle.enemyPokemon().type2) * multiplier;
                }
            }
        }
        return Math.round(attack);
    }
    get diamonds() {
        return this._diamonds();
    }
    set diamonds(n) {
        const amt = n - this._diamonds();
        if (amt > 0)
            GameHelper.incrementObservable(player.statistics.totalDiamonds, amt);
        this._diamonds(n);
    }
    // TODO(@Isha) move to underground classes.
    mineInventoryIndex(id) {
        for (let i = 0; i < player._mineInventory().length; i++) {
            if (player._mineInventory()[i].id === id) {
                return i;
            }
        }
        return -1;
    }
    // TODO(@Isha) move to underground classes.
    getUndergroundItemAmount(id) {
        let index = this.mineInventoryIndex(id);
        if (index > -1) {
            return player._mineInventory.peek()[index].amount();
        }
        else {
            return 0;
        }
    }
    get eggSlots() {
        return this._eggSlots;
    }
    gainEggSlot() {
        this._eggSlots(this._eggSlots() + 1);
    }
    nextEggSlotCost() {
        return BreedingHelper.getEggSlotCost(this._eggSlots() + 1);
    }
    buyEggSlot() {
        let cost = this.nextEggSlotCost();
        if (this.questPoints >= cost) {
            this.questPoints -= cost;
            this.gainEggSlot();
        }
    }
    unlockPlot() {
        let i = 0;
        while (i < this.plotList.length && this.plotList[i]().isUnlocked()) {
            i++;
        }
        if (i == this.plotList.length) {
            return;
        }
        this.plotList[i]().isUnlocked(true);
    }
    get shardUpgrades() {
        return this._shardUpgrades;
    }
    set shardUpgrades(value) {
        this._shardUpgrades = value;
    }
    get shardsCollected() {
        return this._shardsCollected;
    }
    set shardsCollected(value) {
        this._shardsCollected = value;
    }
    get questLevel() {
        return QuestHelper.xpToLevel(player.questXP);
    }
    percentToNextQuestLevel() {
        let current = this.questLevel;
        let requiredForCurrent = QuestHelper.levelToXP(current);
        let requiredForNext = QuestHelper.levelToXP(current + 1);
        return 100 * (this.questXP - requiredForCurrent) / (requiredForNext - requiredForCurrent);
    }
    get shinyCatches() {
        return this._shinyCatches();
    }
    set shinyCatches(value) {
        this._shinyCatches(value);
    }
    get questXP() {
        return this._questXP();
    }
    set questXP(value) {
        this._questXP(value);
    }
    get questPoints() {
        return this._questPoints();
    }
    set questPoints(value) {
        this._questPoints(value);
    }
    gainQuestPoints(value) {
        player.questPoints += value;
        GameHelper.incrementObservable(this.statistics.totalQuestPoints, value);
        Game.animateMoney(value, 'playerMoneyQuest');
    }
    toJSON() {
        let keep = [
            "_money",
            "_dungeonTokens",
            "_questPoints",
            "_caughtShinyList",
            "_route",
            "_caughtPokemonList",
            "_defeatedAmount",
            "_caughtAmount",
            "_routeKills",
            "_routeKillsNeeded",
            "_region",
            "_gymBadges",
            "_pokeballs",
            "_notCaughtBallSelection",
            "_alreadyCaughtBallSelection",
            "_sortOption",
            "_sortDescending",
            "_starter",
            "_oakItemExp",
            "_oakItemsEquipped",
            "_itemList",
            "_itemMultipliers",
            "_keyItems",
            // TODO(@Isha) remove.
            "_mineInventory",
            "_diamonds",
            // TODO(@Isha) remove.
            "_mineLayersCleared",
            "_eggList",
            "_eggSlots",
            "_shardUpgrades",
            "_shardsCollected",
            "achievementsCompleted",
            "completedQuestList",
            "questRefreshes",
            "_questXP",
            "_questPoints",
            "_lastSeen",
            "currentQuests",
            "_shinyCatches",
            "gymDefeats",
            "statistics",
            "achievementsCompleted",
            "farmPoints",
            "plotList",
            "berryList",
            "highestRegion",
            "tutorialProgress",
            "tutorialState",
            "tutorialComplete",
        ];
        let plainJS = ko.toJS(this);
        return Save.filter(plainJS, keep);
    }
}
class Save {
    static store(player) {
        let json = JSON.stringify(player);
        localStorage.setItem("player", json);
        localStorage.setItem("mine", Mine.serialize());
        localStorage.setItem("settings", Settings.save());
        let saveObject = {};
        saveObject[Underground.saveKey] = Underground.save();
        localStorage.setItem("save", JSON.stringify(saveObject));
        this.counter = 0;
        console.log("Game saved");
    }
    static load() {
        let saved = localStorage.getItem("player");
        let settings = localStorage.getItem("settings");
        Settings.load(JSON.parse(settings));
        let saveJSON = localStorage.getItem("save");
        if (saveJSON !== null) {
            let saveObject = JSON.parse(saveJSON);
            Underground.load(saveObject[Underground.saveKey]);
        }
        if (saved !== "null") {
            return new Player(JSON.parse(saved));
        }
        else {
            return new Player();
        }
    }
    static download() {
        let element = document.createElement('a');
        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(btoa(JSON.stringify(player))));
        let currentdate = new Date();
        let datestr = currentdate.toISOString().replace("T", " ").slice(0, 19);
        let filename = "PokeClickerSave_" + datestr + '.txt';
        element.setAttribute('download', filename);
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }
    static loadMine() {
        let mine = localStorage.getItem("mine");
        if (mine) {
            Mine.loadSavedMine(JSON.parse(mine));
        }
        else {
            Mine.loadMine();
        }
    }
    static reset(keepShinies = true) {
        var confirmDelete = prompt(`Are you sure you want reset?\nIf so, type 'DELETE'${keepShinies ? '\n\n[your shiny progress will not be reset]' : ''}`);
        if (confirmDelete == 'DELETE') {
            if (keepShinies) {
                const shiniesOnly = { _caughtShinyList: player.caughtShinyList() };
                localStorage.setItem('player', JSON.stringify(shiniesOnly));
            }
            else {
                localStorage.removeItem('player');
            }
            location.reload();
        }
    }
    /** Filters an object by property names
     * @param     object : any The object you want to filter
     * @param       keep : string[] An array of property names that should be kept
     * @returns {Object} : The original object with only the specified properties
     */
    static filter(object, keep) {
        let filtered = {}, prop;
        for (prop in object) {
            if (keep.indexOf(prop) > -1) {
                filtered[prop] = object[prop];
            }
        }
        return filtered;
    }
    static initializeMultipliers() {
        let res = {};
        for (let obj in ItemList) {
            res[obj] = 1;
        }
        return res;
    }
    static initializeItemlist() {
        let res = {};
        for (let obj in ItemList) {
            res[obj] = ko.observable(0);
        }
        return res;
    }
    static initializePlots(saved) {
        let plotList;
        if (saved) {
            plotList = saved.map((p) => {
                let berry;
                if (p.berry) {
                    berry = new Berry(p.berry.type, p.berry.harvestTime, p.berry.moneyValue, p.berry.farmValue);
                }
                else {
                    berry = null;
                }
                let plot = new Plot(p.isUnlocked, p.exp, p.level, p.boosted, berry, p.timeLeft);
                return ko.observable(plot);
            });
        }
        else {
            plotList = Array.apply(null, Array(GameConstants.AMOUNT_OF_PLOTS)).map(function (val, index) {
                if (index == 0) {
                    return ko.observable(new Plot(true, 0, 0, false, null, 0));
                }
                return ko.observable(new Plot(false, 0, 0, false, null, 0));
            });
        }
        return plotList;
    }
    static initializeShards(saved) {
        let res;
        if (saved) {
            res = saved.map((type) => {
                return type.map((effectiveness) => {
                    return ko.observable(effectiveness);
                });
            });
        }
        else {
            res = [];
            for (let item in GameConstants.PokemonType) {
                if (!isNaN(Number(item))) {
                    res[item] = [];
                    res[item][GameConstants.TypeEffectiveness.Immune] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.NotVery] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Normal] = ko.observable(0);
                    res[item][GameConstants.TypeEffectiveness.Very] = ko.observable(0);
                }
            }
        }
        return res;
    }
    static loadFromFile(file) {
        testing = file;
        let fr = new FileReader();
        fr.readAsText(testing);
        setTimeout(function () {
            try {
                let decoded = atob(fr.result);
                JSON.parse(decoded);
                if (decoded) {
                    localStorage.setItem("player", decoded);
                    location.reload();
                }
                else {
                    Notifier.notify("This is not a valid decoded savefile", GameConstants.NotificationOption.danger);
                }
            }
            catch (err) {
                Notifier.notify("This is not a valid savefile", GameConstants.NotificationOption.danger);
            }
        }, 1000);
    }
    static convert() {
        let base64 = $('#convertTextArea').val().toString();
        let json = atob(base64);
        let p = JSON.parse(json);
        Save.convertShinies(p.caughtPokemonList);
        $('#saveModal').modal('hide');
    }
    static convertShinies(list) {
        let converted = [];
        for (let pokemon of list) {
            let shiny = parseInt(pokemon['shiny']);
            let name = pokemon['name'];
            if (shiny == 1 && player.caughtShinyList.indexOf(name) == -1) {
                player.caughtShinyList().push(pokemon['name']);
                converted.push(pokemon['name']);
            }
        }
        if (converted.length > 0) {
            Notifier.notify("You have gained the following shinies: " + converted, GameConstants.NotificationOption.success);
        }
    }
}
Save.counter = 0;
document.addEventListener("DOMContentLoaded", function (event) {
    $('#saveModal').on('show.bs.modal', function () {
        $('#saveTextArea').text(JSON.stringify(player));
    });
});
let testing;
class StartSequenceRunner {
    static start() {
        Game.gameState(GameConstants.GameState.paused);
        $('#startSequenceModal').modal('show');
    }
    static pickStarter(s) {
        this.starterPicked = s;
        $('#pickStarterModal').modal('hide');
        let dataPokemon = PokemonHelper.getPokemonByName(GameConstants.Starter[this.starterPicked]);
        let shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_BATTLE);
        Game.gameState(GameConstants.GameState.fighting);
        let battlePokemon = new BattlePokemon(dataPokemon.name, dataPokemon.id, dataPokemon.type1, dataPokemon.type2, 10, 1, 100, 0, 0, shiny);
        Battle.enemyPokemon(battlePokemon);
        // Set the function to call showCaughtMessage after pokemon is caught
        battlePokemon.isAlive = function () {
            if (battlePokemon.health() <= 0) {
                setTimeout(function () {
                    player.starter = StartSequenceRunner.starterPicked;
                    StartSequenceRunner.showCaughtMessage();
                }, player.calculateCatchTime());
                //reset the function so you don't call it too many times :)
                //What a beautiful piece of code
                battlePokemon.isAlive = function () {
                    return false;
                };
            }
            return this.health() > 0;
        };
    }
    static showCaughtMessage() {
        player.routeKills[1](0);
        Game.gameState(GameConstants.GameState.paused);
        $('#starterCaughtModal').modal('show');
        $('#pokeballSelector').css('display', 'block');
        $('#pokemonListContainer').css('display', 'block');
        $('#oakItemsContainer').css('display', 'block');
        $('#questDisplayContainer').css('display', 'block');
    }
}
StartSequenceRunner.starterPicked = GameConstants.Starter.None;
document.addEventListener("DOMContentLoaded", function (event) {
    $('#startSequenceModal').on('hidden.bs.modal', function () {
        $('#pickStarterModal').modal('show');
    });
    $('#pickStarterModal').on('hidden.bs.modal', function () {
        if (StartSequenceRunner.starterPicked == GameConstants.Starter.None) {
            $('#pickStarterModalText').text("I can't hold off all three! Please pick the pokémon you want to fight!");
            $('#pickStarterModal').modal('show');
        }
    });
    $('#starterCaughtModal').on('hidden.bs.modal', function () {
        Save.store(player);
        Game.gameState(GameConstants.GameState.fighting);
    });
});
class Achievement {
    constructor(name, description, property, bonus, unlocked = false) {
        this.name = name;
        this.description = description;
        this.property = property;
        this.bonus = bonus;
        this.unlocked = unlocked;
    }
    check() {
        if (this.isCompleted()) {
            Notifier.notify(this.name + "<br><small>" + this.description + "</small>", GameConstants.NotificationOption.warning);
            player.achievementsCompleted[this.name] = true;
            this.unlocked = true;
        }
    }
    getProgress() {
        return this.isCompleted() ? this.property.requiredValue : this.property.getProgress();
    }
    getProgressPercentage() {
        return this.isCompleted() ? "100.0" : this.property.getProgressPercentage();
    }
    isCompleted() {
        return this.unlocked || this.property.isCompleted();
    }
}
class Requirement {
    constructor(requiredValue, type) {
        this.requiredValue = requiredValue;
        this.type = type;
    }
    getProgressPercentage() {
        return (this.getProgress() / this.requiredValue * 100).toFixed(1);
    }
    isCompleted() {
        switch (this.type) {
            case GameConstants.AchievementOption.less:
                return this.getProgress() < this.requiredValue;
            case GameConstants.AchievementOption.equal:
                return this.getProgress() == this.requiredValue;
            case GameConstants.AchievementOption.more:
                return this.getProgress() >= this.requiredValue;
        }
    }
}
///<reference path="Requirement.ts"/>
class MoneyRequirement extends Requirement {
    constructor(requiredValue, type = GameConstants.AchievementOption.more) {
        super(requiredValue, type);
    }
    getProgress() {
        return Math.min(player.statistics.totalMoney(), this.requiredValue);
    }
}
///<reference path="MoneyRequirement.ts"/>
class AchievementHandler {
    static navigateRight() {
        if (AchievementHandler.navigateIndex() < AchievementHandler.getNumberOfTabs()) {
            AchievementHandler.navigateIndex(AchievementHandler.navigateIndex() + 1);
        }
    }
    static navigateLeft() {
        if (AchievementHandler.navigateIndex() > 0) {
            AchievementHandler.navigateIndex(AchievementHandler.navigateIndex() - 1);
        }
    }
    static getNumberOfTabs() {
        return Math.floor(AchievementHandler.achievementList.length / 10);
    }
    static getAchievementListWithIndex(index) {
        return AchievementHandler.achievementList.slice(index, index + 10);
    }
    static checkAchievements() {
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            if (!AchievementHandler.achievementList[i].unlocked) {
                AchievementHandler.achievementList[i].check();
            }
        }
    }
    static addAchievement(name, description, property, bonus) {
        let unlocked = player.achievementsCompleted[name];
        AchievementHandler.achievementList.push(new Achievement(name, description, property, bonus, unlocked));
    }
    static calculateMaxBonus() {
        let sum = 0;
        for (let i = 0; i < AchievementHandler.achievementList.length; i++) {
            sum += AchievementHandler.achievementList[i].bonus;
        }
        return sum;
    }
    static bonusUnlocked() {
        let sum = 0;
        for (let achievement of AchievementHandler.achievementList) {
            if (achievement.isCompleted()) {
                sum += achievement.bonus;
            }
        }
        return sum;
    }
    static achievementBonus() {
        return AchievementHandler.bonusUnlocked() / AchievementHandler.maxBonus;
    }
    static achievementBonusPercent() {
        return (100 * AchievementHandler.achievementBonus()).toFixed(2) + "%";
    }
    static initialize() {
        AchievementHandler.addAchievement("My First Hundo", "Obtain 100 Pokédollars", new MoneyRequirement(100), 0.05);
        AchievementHandler.addAchievement("I Should Buy a PokéMart", "Obtain 1,000 Pokédollars", new MoneyRequirement(1000), 0.10);
        AchievementHandler.addAchievement("A Small Fortune", "Obtain 10,000 Pokédollars", new MoneyRequirement(10000), 0.15);
        AchievementHandler.addAchievement("Annual Wage", "Obtain 100,000 Pokédollars", new MoneyRequirement(100000), 0.20);
        AchievementHandler.addAchievement("Pfft, I Don't Need a Bike Voucher", "Obtain 1,000,000 Pokédollars", new MoneyRequirement(1000000), 0.25);
        AchievementHandler.addAchievement("A billion Poképennies", "Obtain 10,000,000 Pokédollars", new MoneyRequirement(10000000), 0.5);
        AchievementHandler.addAchievement("Dungeon Time", "Obtain 100 Dungeon Tokens", new TokenRequirement(100), 0.05);
        AchievementHandler.addAchievement("Token Collector", "Obtain 1,000 Dungeon Tokens", new TokenRequirement(1000), 0.10);
        AchievementHandler.addAchievement("Dungeon Grinder", "Obtain 10,000 Dungeon Tokens", new TokenRequirement(10000), 0.15);
        AchievementHandler.addAchievement("Dungeon Master", "Obtain 100,000 Dungeon Tokens", new TokenRequirement(100000), 0.20);
        AchievementHandler.addAchievement("Dungeon Legend", "Obtain 1,000,000 Dungeon Tokens", new TokenRequirement(1000000), 0.25);
        AchievementHandler.addAchievement("Basic Trainer", "Have 100 Attack", new AttackRequirement(100), 0.05);
        AchievementHandler.addAchievement("Improving", "Have 1,000 Attack", new AttackRequirement(1000), 0.10);
        AchievementHandler.addAchievement("An Unrelenting Force", "Have 5,000 Attack", new AttackRequirement(5000), 0.15);
        AchievementHandler.addAchievement("FUS DOH RAH", "Have 10,000 Attack", new AttackRequirement(10000), 0.20);
        AchievementHandler.addAchievement("Ok, I have enough attack already...", "Have 25,000 Attack", new AttackRequirement(25000), 0.25);
        AchievementHandler.addAchievement("Bling", "Obtain 100 Diamonds", new DiamondRequirement(100), 0.05);
        AchievementHandler.addAchievement("Bling x10!", "Obtain 1000 Diamonds", new DiamondRequirement(1000), 0.15);
        AchievementHandler.addAchievement("If you like it, you should've put a ring on it.", "Obtain 10,000 Diamonds", new DiamondRequirement(10000), 0.25);
        AchievementHandler.addAchievement("Is my thumb green yet?", "Dig up 1 item", new DigItemsRequirement(1), 0.01);
        AchievementHandler.addAchievement("My shovel is starting to crack", "Dig up 10 items", new DigItemsRequirement(10), 0.01);
        AchievementHandler.addAchievement("Why can't I make a diamond shovel?", "Dig up 100 items", new DigItemsRequirement(100), 0.01);
        AchievementHandler.addAchievement("This is definitely not Minecraft", "Dig up 1,000 items", new DigItemsRequirement(1000), 0.01);
        AchievementHandler.addAchievement("I wonder how much is down there...", "Dig up 10,000 items", new DigItemsRequirement(10000), 0.01);
        AchievementHandler.addAchievement("The earth is like unions", "Dig deeper 1 time", new DigDeeperRequirement(1), 0.01);
        AchievementHandler.addAchievement("This takes foreverrrrrrr", "Dig deeper 10 times", new DigDeeperRequirement(10), 0.01);
        AchievementHandler.addAchievement("DigDug ain't got nothin on me", "Dig deeper 100 times", new DigDeeperRequirement(100), 0.01);
        AchievementHandler.addAchievement("Both my thumbs are green! This can't be healthy", "Dig deeper 1000 times", new DigDeeperRequirement(1000), 0.01);
        AchievementHandler.addAchievement("First Team", "Capture 100 Pokemon", new CapturedRequirement(100), 0.05);
        AchievementHandler.addAchievement("Filling the PC", "Capture 1,000 Pokemon", new CapturedRequirement(1000), 0.10);
        AchievementHandler.addAchievement("Pokemon Army", "Capture 10,000 Pokemon", new CapturedRequirement(10000), 0.15);
        AchievementHandler.addAchievement("Pokemon Collector", "Capture 100,000 Pokemon", new CapturedRequirement(100000), 0.25);
        AchievementHandler.addAchievement("You get a pokemon, you get a pokemon, everyone gets a pokemon!", "Capture 1,000,000 Pokemon", new CapturedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement("A Long Road Ahead", "Defeat 100 Pokemon", new DefeatedRequirement(100), 0.05);
        AchievementHandler.addAchievement("Highway to Pallet Town", "Defeat 1,000 Pokemon", new DefeatedRequirement(1000), 0.10);
        AchievementHandler.addAchievement("Overleveled", "Defeat 10,000 Pokemon", new DefeatedRequirement(10000), 0.15);
        AchievementHandler.addAchievement("The Cake is a Lie, but the Grind is real", "Defeat 100,000 Pokemon", new DefeatedRequirement(100000), 0.25);
        AchievementHandler.addAchievement("Are there any left?", "Defeat 1,000,000 Pokemon", new DefeatedRequirement(1000000), 0.50);
        AchievementHandler.addAchievement("Startin' Out", "Capture your first Pokémon", new CaughtPokemonRequirement(1), 0.01);
        AchievementHandler.addAchievement("Like Ants in a PC", "Capture 10 unique Pokémons", new CaughtPokemonRequirement(10), 0.02);
        AchievementHandler.addAchievement("Better Than Season 1 Ash", "Capture 20 unique Pokémons", new CaughtPokemonRequirement(20), 0.03);
        AchievementHandler.addAchievement("More Pokémon than Patrick", "Capture 30 unique Pokémons", new CaughtPokemonRequirement(30), 0.04);
        AchievementHandler.addAchievement("Rick and Fourty", "Capture 40 unique Pokémons", new CaughtPokemonRequirement(40), 0.05);
        AchievementHandler.addAchievement("50 Shades of Pikachu", "Capture 50 unique Pokémons", new CaughtPokemonRequirement(50), 0.10);
        AchievementHandler.addAchievement("Keeping Oak Really Busy", "Capture 75 unique Pokémons", new CaughtPokemonRequirement(75), 0.15);
        AchievementHandler.addAchievement("Surpassing Ash", "Capture 88 unique Pokémons", new CaughtPokemonRequirement(88), 0.05);
        AchievementHandler.addAchievement("I Wanna be The Very Best", "Capture 100 unique Pokémons", new CaughtPokemonRequirement(100), 0.20);
        AchievementHandler.addAchievement("I Should Probably Take a Break", "Complete the Kanto Pokédex!", new CaughtPokemonRequirement(151), 0.50);
        AchievementHandler.addAchievement("I'd rather be shiny", "Capture your first Shiny", new ShinyPokemonRequirement(1), 0.03);
        AchievementHandler.addAchievement("These pokémon must be sick", "Capture 10 unique Shinies", new ShinyPokemonRequirement(10), 0.06);
        AchievementHandler.addAchievement("Why Am I Doing This?", "Capture 20 unique Shinies", new ShinyPokemonRequirement(20), 0.09);
        AchievementHandler.addAchievement("Why Am I Still Doing This?!", "Capture 30 unique Shinies", new ShinyPokemonRequirement(30), 0.12);
        AchievementHandler.addAchievement("Okay fine, I can do a few more", "Capture 40 unique Shinies", new ShinyPokemonRequirement(40), 0.15);
        AchievementHandler.addAchievement("Where Did All The Shiny Pokémon Go?", "Capture 50 unique Shinies", new ShinyPokemonRequirement(50), 0.30);
        AchievementHandler.addAchievement("Nvm, found some more", "Capture 75 unique Shinies", new ShinyPokemonRequirement(75), 0.45);
        AchievementHandler.addAchievement("Just keep swimming just keep swimming -- oooo shiny!", "Capture 100 unique Shinies", new ShinyPokemonRequirement(100), 0.60);
        AchievementHandler.addAchievement("I don't know if I can handle the next batch of shinies.", "Complete the Kanto Pokédex shiny!", new ShinyPokemonRequirement(151), 1.50);
        AchievementHandler.addAchievement("Pokemon Nursery", "Hatch 1 egg", new HatchRequirement(1), 0.01);
        AchievementHandler.addAchievement("A Lot of Running", "Hatch 10 eggs", new HatchRequirement(10), 0.01);
        AchievementHandler.addAchievement("Marathon Runner", "Hatch 100 eggs", new HatchRequirement(100), 0.01);
        AchievementHandler.addAchievement("Egg Factory", "Hatch 1,000 eggs", new HatchRequirement(1000), 0.01);
        AchievementHandler.addAchievement("Offical Easter Bunny", "Hatch 10,000 eggs", new HatchRequirement(10000), 0.01);
        AchievementHandler.addAchievement("Why is my Voltorb Upside Down?", "Obtain your first Pokéball", new PokeballRequirement(1, GameConstants.Pokeball.Pokeball), 0.01);
        AchievementHandler.addAchievement("Starting a Collection", "Obtain 10 Pokéballs", new PokeballRequirement(10, GameConstants.Pokeball.Pokeball), 0.03);
        AchievementHandler.addAchievement("Stocking Up", "Obtain 100 Pokéballs", new PokeballRequirement(100, GameConstants.Pokeball.Pokeball), 0.05);
        AchievementHandler.addAchievement("Fully Stocked", "Obtain 1,000 Pokéballs", new PokeballRequirement(1000, GameConstants.Pokeball.Pokeball), 0.10);
        AchievementHandler.addAchievement("Maybe just a few more for the bunker", "Obtain 10,000 Pokéballs", new PokeballRequirement(10000, GameConstants.Pokeball.Pokeball), 0.15);
        AchievementHandler.addAchievement("Doomsday Bunker stocked with Pokeballs!", "Obtain 100,000 Pokéballs", new PokeballRequirement(100000, GameConstants.Pokeball.Pokeball), 0.20);
        AchievementHandler.addAchievement("ooooo A blue one!", "Obtain your first Greatball", new PokeballRequirement(1, GameConstants.Pokeball.Greatball), 0.03);
        AchievementHandler.addAchievement("Greatball 2", "Obtain 10 Greatballs", new PokeballRequirement(10, GameConstants.Pokeball.Greatball), 0.05);
        AchievementHandler.addAchievement("Greatball 3", "Obtain 100 Greatballs", new PokeballRequirement(100, GameConstants.Pokeball.Greatball), 0.10);
        AchievementHandler.addAchievement("Greatball 4", "Obtain 1,000 Greatballs", new PokeballRequirement(1000, GameConstants.Pokeball.Greatball), 0.15);
        AchievementHandler.addAchievement("Greatball 5", "Obtain 10,000 Greatballs", new PokeballRequirement(10000, GameConstants.Pokeball.Greatball), 0.20);
        AchievementHandler.addAchievement("Greatball 6", "Obtain 100,000 Greatballs", new PokeballRequirement(100000, GameConstants.Pokeball.Greatball), 0.30);
        AchievementHandler.addAchievement("Ultraball 1", "Obtain your first Ultraball", new PokeballRequirement(1, GameConstants.Pokeball.Ultraball), 0.05);
        AchievementHandler.addAchievement("Ultraball 2", "Obtain 10 Ultraballs", new PokeballRequirement(10, GameConstants.Pokeball.Ultraball), 0.10);
        AchievementHandler.addAchievement("Ultraball 3", "Obtain 100 Ultraballs", new PokeballRequirement(100, GameConstants.Pokeball.Ultraball), 0.15);
        AchievementHandler.addAchievement("Ultraball 4", "Obtain 1,000 Ultraballs", new PokeballRequirement(1000, GameConstants.Pokeball.Ultraball), 0.20);
        AchievementHandler.addAchievement("Ultraball 5", "Obtain 10,000 Ultraballs", new PokeballRequirement(10000, GameConstants.Pokeball.Ultraball), 0.30);
        AchievementHandler.addAchievement("Ultraball 6", "Obtain 100,000 Ultraballs", new PokeballRequirement(100000, GameConstants.Pokeball.Ultraball), 0.40);
        AchievementHandler.addAchievement("Masterball 1", "Obtain your first Masterball", new PokeballRequirement(1, GameConstants.Pokeball.Masterball), 0.20);
        AchievementHandler.addAchievement("Masterball 2", "Obtain 10 Masterballs", new PokeballRequirement(10, GameConstants.Pokeball.Masterball), 0.30);
        AchievementHandler.addAchievement("Masterball 3", "Obtain 100 Masterballs", new PokeballRequirement(100, GameConstants.Pokeball.Masterball), 0.40);
        AchievementHandler.addAchievement("A Few Clicks In", "Click 10 Times", new ClickRequirement(10, 1), 0.02);
        AchievementHandler.addAchievement("Clicking Pro", "Click 100 Times", new ClickRequirement(100, 1), 0.05);
        AchievementHandler.addAchievement("Ultra Clicker", "Click 1,000 Times", new ClickRequirement(1000, 1), 0.10);
        AchievementHandler.addAchievement("Need a new mouse yet?", "Click 10,000 Times", new ClickRequirement(10000, 1), 0.25);
        for (let i = 1; i <= GameConstants.AMOUNT_OF_ROUTES_KANTO; i++) {
            AchievementHandler.addAchievement("Route " + i + " traveler", "Defeat 100 Pokémon on route " + i, new RouteKillRequirement(100, i), 0.02);
            AchievementHandler.addAchievement("Route " + i + " explorer", "Defeat 1,000 Pokémon on route " + i, new RouteKillRequirement(1000, i), 0.05);
            AchievementHandler.addAchievement("Route " + i + " conqueror", "Defeat 10,000 Pokémon on route " + i, new RouteKillRequirement(10000, i), 0.10);
        }
        for (let i = 0; i < GameConstants.KantoGyms.length; i++) {
            AchievementHandler.addAchievement(`${GameConstants.KantoGyms[i]} Gym tourist`, `Clear 1 time`, new ClearGymRequirement(1, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoGyms[i]} Gym regular`, `Clear 10 times`, new ClearGymRequirement(10, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoGyms[i]} Gym ruler`, `Clear 100 times`, new ClearGymRequirement(100, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoGyms[i]} Gym owner`, `Clear 1,000 times`, new ClearGymRequirement(1000, i), 0.01);
        }
        for (let i = 0; i < GameConstants.KantoDungeons.length; i++) {
            AchievementHandler.addAchievement(`${GameConstants.KantoDungeons[i]} visitor`, `Clear 1 time`, new ClearDungeonRequirement(1, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoDungeons[i]} explorer`, `Clear 10 times`, new ClearDungeonRequirement(10, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoDungeons[i]} expert`, `Clear 100 times`, new ClearDungeonRequirement(100, i), 0.01);
            AchievementHandler.addAchievement(`${GameConstants.KantoDungeons[i]} hermit`, `Clear 1,000 times`, new ClearDungeonRequirement(1000, i), 0.01);
        }
        AchievementHandler.maxBonus = AchievementHandler.calculateMaxBonus();
    }
}
AchievementHandler.achievementList = [];
AchievementHandler.navigateIndex = ko.observable(0);
///<reference path="Requirement.ts"/>
class AttackRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.pokemonAttackObservable(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class CapturedRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.pokemonCaptured(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class CaughtPokemonRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player._caughtPokemonList().length, this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class ClearDungeonRequirement extends Requirement {
    constructor(value, dungeonIndex, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.dungeonIndex = dungeonIndex;
    }
    getProgress() {
        return Math.min(player.statistics.dungeonsCleared[this.dungeonIndex](), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class ClearGymRequirement extends Requirement {
    constructor(value, gymIndex, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.gymIndex = gymIndex;
    }
    getProgress() {
        return Math.min(player.statistics.gymsDefeated[this.gymIndex](), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class ClickRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.clicks(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class DefeatedRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.pokemonDefeated(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class DiamondRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.totalDiamonds(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class DigDeeperRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.digDeeper(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class DigItemsRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.digItems(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class HatchRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.hatchedEggs(), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class PokeballRequirement extends Requirement {
    constructor(value, pokeball, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.pokeball = pokeball;
    }
    getProgress() {
        return Math.min(player.statistics.pokeballsBought[this.pokeball](), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class RouteKillRequirement extends Requirement {
    constructor(value, route, type = GameConstants.AchievementOption.more) {
        super(value, type);
        this.route = route;
    }
    getProgress() {
        return Math.min(player._routeKills[this.route](), this.requiredValue);
    }
}
///<reference path="Requirement.ts"/>
class ShinyPokemonRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player._caughtShinyList().length, this.requiredValue);
    }
}
class Statistics {
    constructor(saved = {}) {
        let observables = [
            "clicks",
            "hatchedEggs",
            "pokemonCaptured",
            "pokemonDefeated",
            "digItems",
            "digDeeper",
            "totalMoney",
            "totalTokens",
            "totalQuestPoints",
            "totalDiamonds",
        ];
        let arrayObservables = [
            "gymsDefeated",
            "dungeonsCleared",
            "pokeballsUsed",
            "pokeballsBought",
            "totalShards",
            "oakItemUses",
            "berriesHarvested",
        ];
        for (let prop of observables) {
            this[prop] = ko.observable(saved[prop] || 0);
        }
        for (let array of arrayObservables) {
            this[array] = Array.apply(null, Array(Statistics.arraySizes[array])).map((value, index) => {
                return ko.observable(saved[array] ? saved[array][index] || 0 : 0);
            });
        }
    }
    static getGymIndex(gym) {
        const gyms = GameConstants.RegionGyms.flat();
        return gyms.indexOf(gym);
    }
    static getDungeonIndex(dungeon) {
        const dungeons = GameConstants.RegionDungeons.flat();
        return dungeons.indexOf(dungeon);
    }
}
Statistics.arraySizes = {
    "gymsDefeated": GameConstants.KantoGyms.length + GameConstants.JohtoGyms.length,
    "dungeonsCleared": GameConstants.KantoDungeons.length + GameConstants.JohtoDungeons.length,
    "pokeballsUsed": GameHelper.enumLength(GameConstants.Pokeball) - 1,
    "pokeballsBought": GameHelper.enumLength(GameConstants.Pokeball) - 1,
    "totalShards": GameHelper.enumLength(GameConstants.PokemonType) - 1,
    "oakItemUses": GameHelper.enumLength(GameConstants.OakItem),
    "berriesHarvested": GameHelper.enumLength(GameConstants.BerryType),
};
///<reference path="Requirement.ts"/>
class TokenRequirement extends Requirement {
    constructor(value, type = GameConstants.AchievementOption.more) {
        super(value, type);
    }
    getProgress() {
        return Math.min(player.statistics.totalTokens(), this.requiredValue);
    }
}
/**
 * Created by dennis on 12-07-17.
 */
class BreedingHelper {
    static openBreedingModal() {
        if (player.hasKeyItem("Mystery egg")) {
            Game.gameState(GameConstants.GameState.paused);
            $('#breedingModal').modal('show');
        }
        else {
            Notifier.notify("You do not have access to that location", GameConstants.NotificationOption.warning);
        }
    }
    static progressEggs(amount) {
        if (OakItemRunner.isActive(GameConstants.OakItem.Blaze_Cassette)) {
            amount *= (1 + OakItemRunner.calculateBonus(GameConstants.OakItem.Blaze_Cassette) / 100);
        }
        amount = Math.round(amount);
        for (let obj of player.eggList) {
            let egg = obj();
            if (egg == null || egg.notified) {
                continue;
            }
            egg.steps(egg.steps() + amount);
            if (OakItemRunner.isActive(GameConstants.OakItem.Shiny_Charm)) {
                egg.shinySteps += amount;
            }
            if (egg.steps() >= egg.totalSteps) {
                if (egg.type == GameConstants.EggType.Pokemon) {
                    Notifier.notify(egg.pokemon + " is ready to hatch!", GameConstants.NotificationOption.success);
                }
                else {
                    Notifier.notify("An egg is ready to hatch!", GameConstants.NotificationOption.success);
                }
                egg.notified = true;
            }
        }
    }
    static gainPokemonEgg(pokemon) {
        if (!player.hasFreeEggSlot()) {
            Notifier.notify("You don't have any free egg slots", GameConstants.NotificationOption.warning);
            return;
        }
        let egg = this.createEgg(pokemon.name);
        pokemon.breeding(true);
        player.gainEgg(egg);
        pokemon.attackBonus(pokemon.attackBonus() + GameConstants.BREEDING_ATTACK_BONUS);
    }
    static hatchPokemonEgg(index) {
        let egg = player._eggList[index]();
        let shinyChance = GameConstants.SHINY_CHANCE_BREEDING - (0.5 * GameConstants.SHINY_CHANCE_BREEDING * Math.min(1, egg.shinySteps / egg.steps()));
        let shiny = PokemonFactory.generateShiny(shinyChance);
        for (let i = 0; i < player._caughtPokemonList().length; i++) {
            if (player._caughtPokemonList()[i].name == egg.pokemon) {
                if (player._caughtPokemonList()[i].breeding()) {
                    player._caughtPokemonList()[i].exp(0);
                    player._caughtPokemonList()[i].breeding(false);
                    player._caughtPokemonList()[i].checkForEvolution(true);
                }
            }
        }
        Notifier.notify(`You hatched a ${egg.pokemon}${shiny ? '✨' : ''}!`, GameConstants.NotificationOption.success);
        player.capturePokemon(egg.pokemon, shiny);
        // Capture base form if not already caught. This helps players get Gen2 Pokemon that are base form of Gen1
        let baseForm = BreedingHelper.calculateBaseForm(egg.pokemon);
        if (egg.pokemon != baseForm && !player.alreadyCaughtPokemon(baseForm)) {
            Notifier.notify(`You also found a ${baseForm} nearby!`, GameConstants.NotificationOption.success);
            player.capturePokemon(baseForm, false, true);
        }
        player._eggList[index](null);
        GameHelper.incrementObservable(player.statistics.hatchedEggs);
        OakItemRunner.use(GameConstants.OakItem.Blaze_Cassette);
    }
    static createEgg(pokemonName, type = GameConstants.EggType.Pokemon) {
        let dataPokemon = PokemonHelper.getPokemonByName(pokemonName);
        return new Egg(this.getSteps(dataPokemon.eggCycles), pokemonName, type);
    }
    static createTypedEgg(type) {
        const hatch_list = HatchList[type];
        const hatchable = hatch_list.slice(0, player.highestRegion + 1);
        let possible_hatches = [];
        hatchable.forEach((pokemon, index) => {
            if (!pokemon.length)
                return;
            const toAdd = possible_hatches.length || 1;
            for (let i = 0; i < toAdd; i++) {
                possible_hatches.push(pokemon);
            }
        });
        possible_hatches = possible_hatches[Math.floor(Math.random() * possible_hatches.length)];
        const pokemon = possible_hatches[Math.floor(Math.random() * possible_hatches.length)];
        return BreedingHelper.createEgg(pokemon, type);
    }
    static createRandomEgg() {
        let type = Math.floor(Math.random() * (Object.keys(HatchList).length - 1));
        let egg = BreedingHelper.createTypedEgg(type);
        egg.type = GameConstants.EggType.Mystery;
        return egg;
    }
    static createFossilEgg(fossil) {
        let pokemonName = GameConstants.FossilToPokemon[fossil];
        return BreedingHelper.createEgg(pokemonName, GameConstants.EggType.Fossil);
    }
    static getEggImage(egg) {
        let eggType = GameConstants.EggType[egg.type].toLowerCase();
        if (eggType == "pokemon") {
            let dataPokemon = PokemonHelper.getPokemonByName(egg.pokemon);
            eggType = String(dataPokemon.type1).toLowerCase();
        }
        else if (eggType == "fossil") {
            eggType = GameConstants.PokemonToFossil[egg.pokemon];
        }
        return "assets/images/breeding/egg" + eggType + ".png";
    }
    static getEggSlotCost(slot) {
        return 500 * slot;
    }
    static calculateBaseForm(pokemonName) {
        // Base form of Pokemon depends on which regions players unlocked
        if (!(pokemonName in pokemonDevolutionMap)) {
            // No devolutions at all
            return pokemonName;
        }
        else if (PokemonHelper.calcNativeRegion(pokemonDevolutionMap[pokemonName]) > player.highestRegion) {
            // No further devolutions in current unlocked regions
            return pokemonName;
        }
        else {
            // Recurse onto its devolution
            return BreedingHelper.calculateBaseForm(pokemonDevolutionMap[pokemonName]);
        }
    }
}
BreedingHelper.getSteps = function (eggCycles) {
    if (eggCycles === undefined) {
        return 500;
    }
    else {
        return eggCycles * 40;
    }
};
const HatchList = {};
HatchList[GameConstants.EggType.Fire] = [
    ["Charmander", "Vulpix", "Growlithe", "Ponyta"],
    ["Cyndaquil", "Slugma", "Houndour", "Magby"],
];
HatchList[GameConstants.EggType.Water] = [
    ["Squirtle", "Lapras", "Staryu", "Psyduck"],
    ["Totodile", "Wooper", "Marill", "Qwilfish"],
];
HatchList[GameConstants.EggType.Grass] = [
    ["Bulbasaur", "Oddish", "Tangela", "Bellsprout"],
    ["Chikorita", "Hoppip", "Sunkern"],
];
HatchList[GameConstants.EggType.Fighting] = [
    ["Hitmonlee", "Hitmonchan", "Machop", "Mankey"],
    ["Tyrogue"],
];
HatchList[GameConstants.EggType.Electric] = [
    ["Magnemite", "Pikachu", "Voltorb", "Electabuzz"],
    ["Chinchou", "Mareep", "Elekid"],
];
HatchList[GameConstants.EggType.Dragon] = [
    ["Dratini", "Dragonair", "Dragonite"],
    [],
];
document.addEventListener("DOMContentLoaded", function (event) {
    $('#breedingModal').on('hidden.bs.modal', function () {
        if (player.highestRegion == 0) {
            MapHelper.moveToRoute(5, GameConstants.Region.kanto);
        }
        MapHelper.returnToMap();
    });
});
class Egg {
    constructor(totalSteps, pokemon, type, steps = 0, shinySteps = 0, notified = false) {
        this.totalSteps = totalSteps;
        this.steps = ko.observable(steps);
        this.shinySteps = shinySteps;
        this.pokemon = pokemon;
        this.type = type;
        this.notified = notified;
        this.progress = ko.computed(function () {
            return this.steps() / this.totalSteps * 100;
        }, this);
    }
}
class DungeonBossPokemon {
    constructor(name, maxHealth, level) {
        this.name = name;
        this.baseHealth = maxHealth;
        this.level = level;
    }
}
///<reference path="DungeonBossPokemon.ts"/>
/**
 * Gym class.
 */
class Dungeon {
    constructor(dungeonName, pokemonList, itemList, baseHealth, bossList, tokenCost, badgeReq, itemRoute, level) {
        this.name = ko.observable("");
        this.name = ko.observable(dungeonName);
        this.pokemonList = pokemonList;
        this.itemList = itemList;
        this.baseHealth = baseHealth;
        this.bossList = bossList;
        this.tokenCost = tokenCost;
        this.badgeReq = badgeReq;
        this.itemRoute = itemRoute;
        this.level = level;
        this.calculateAllPokemonNames();
    }
    isUnlocked() {
        if (!player.hasBadge(this.badgeReq)) {
            Notifier.notify("You need the " + GameConstants.Badge[this.badgeReq] + " badge to access this dungeon", GameConstants.NotificationOption.danger);
            return false;
        }
        if (!player.hasKeyItem("Dungeon ticket")) {
            Notifier.notify("You need the Dungeon ticket to access dungeons", GameConstants.NotificationOption.danger);
            return false;
        }
        return true;
    }
    calculateAllPokemonNames() {
        this.allPokemonNames = JSON.parse(JSON.stringify(this.pokemonList));
        for (let i = 0; i < this.bossList.length; i++) {
            this.allPokemonNames.push(this.bossList[i].name);
        }
    }
}
/**
 * Data list that contains all dungeons, accessible by name.
 */
// TODO add 22-25
const dungeonList = {};
dungeonList["Viridian Forest"] = new Dungeon("Viridian Forest", ["Caterpie", "Metapod", "Weedle", "Kakuna", "Pidgey", "Pidgeotto"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 102, [new DungeonBossPokemon("Pikachu", 510, 7)], 50, GameConstants.Badge.None, 1, 5);
dungeonList["Digletts Cave"] = new Dungeon("Digletts Cave", ["Diglett"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 1208, [new DungeonBossPokemon("Dugtrio", 6040, 31)], 95, GameConstants.Badge.Boulder, 2, 22);
dungeonList["Mt. Moon"] = new Dungeon("Mt. Moon", ["Sandshrew", "Clefairy", "Zubat", "Paras", "Geodude", "Pidgeotto"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Token_collector], 834, [new DungeonBossPokemon("Kabuto", 4170, 12), new DungeonBossPokemon("Omanyte", 4170, 12)], 75, GameConstants.Badge.Boulder, 4, 10);
dungeonList["Rock Tunnel"] = new Dungeon("Rock Tunnel", ["Zubat", "Geodude", "Machop"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 4117, [new DungeonBossPokemon("Onix", 20585, 17)], 500, GameConstants.Badge.Cascade, 5, 15);
dungeonList["Power Plant"] = new Dungeon("Power Plant", ["Pikachu", "Raichu", "Magnemite", "Magneton", "Grimer", "Muk", "Electrode"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 13507, [new DungeonBossPokemon("Electabuzz", 67535, 35), new DungeonBossPokemon("Zapdos", 101302, 50)], 1000, GameConstants.Badge.Cascade, 8, 25);
dungeonList["Pokemon Tower"] = new Dungeon("Pokemon Tower", ["Gastly", "Haunter", "Cubone"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 7523, [new DungeonBossPokemon("Marowak", 37615, 30)], 750, GameConstants.Badge.Cascade, 10, 20);
dungeonList["Seafoam Islands"] = new Dungeon("Seafoam Islands", ["Zubat", "Golbat", "Psyduck", "Golduck", "Slowpoke", "Slowbro", "Shellder", "Krabby", "Horsea", "Staryu"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xExp], 17226, [new DungeonBossPokemon("Seel", 86130, 35), new DungeonBossPokemon("Articuno", 129195, 50)], 1250, GameConstants.Badge.Soul, 15, 30);
dungeonList["Pokemon Mansion"] = new Dungeon("Pokemon Mansion", ["Growlithe", "Vulpix", "Grimer", "Muk", "Koffing", "Weezing"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 17760, [new DungeonBossPokemon("Magmar", 88800, 40)], 1500, GameConstants.Badge.Soul, 16, 35);
dungeonList["Victory Road"] = new Dungeon("Victory Road", ["Zubat", "Golbat", "Machop", "Geodude", "Graveler", "Onix", "Marowak", "Venomoth"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 24595, [new DungeonBossPokemon("Machoke", 122975, 42), new DungeonBossPokemon("Moltres", 184462, 50)], 2000, GameConstants.Badge.Earth, 20, 40);
dungeonList["Cerulean Cave"] = new Dungeon("Cerulean Cave", ["Arbok", "Raichu", "Sandslash", "Golbat", "Parasect", "Venomoth", "Kadabra", "Magneton", "Dodrio", "Hypno", "Ditto", "Wigglytuff", "Electrode", "Marowak", "Chansey"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 28735, [new DungeonBossPokemon("Rhydon", 143675, 60), new DungeonBossPokemon("Mewtwo", 215512, 70)], 2500, GameConstants.Badge.Elite_Champion, 20, 55);
dungeonList["Sprout Tower"] = new Dungeon("Sprout Tower", ["Rattata", "Gastly", "Hoothoot"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Item_magnet], 28735, [new DungeonBossPokemon("Bellsprout", 2000, 10)], 2500, GameConstants.Badge.Elite_Champion, 31, 5);
dungeonList["Ruins of Alph"] = new Dungeon("Ruins of Alph", ["Natu", "Wooper", "Quagsire", "Smeargle", "Magikarp", "Poliwag", "Poliwhirl"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 600, [new DungeonBossPokemon("Unown", 3000, 14)], 3000, GameConstants.Badge.Zephyr, 32, 7);
dungeonList["Union Cave"] = new Dungeon("Union Cave", ["Rattata", "Sandshrew", "Zubat", "Geodude", "Onix", "Goldeen", "Magikarp"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 600, [new DungeonBossPokemon("Wooper", 3000, 14)], 3000, GameConstants.Badge.Zephyr, 32, 7);
dungeonList["Slowpoke Well"] = new Dungeon("Slowpoke Well", ["Zubat", "Slowpoke"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 900, [new DungeonBossPokemon("Slowbro", 4000, 20)], 3500, GameConstants.Badge.Zephyr, 33, 12);
dungeonList["Ilex Forest"] = new Dungeon("Ilex Forest", ["Caterpie", "Metapod", "Weedle", "Kakuna", "Zubat", "Oddish", "Paras", "Hoothoot"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 1200, [new DungeonBossPokemon("Noctowl", 5000, 30), new DungeonBossPokemon("Beedrill", 5000, 30), new DungeonBossPokemon("Butterfree", 5000, 30), new DungeonBossPokemon("Celebi", 300000, 50)], 4000, GameConstants.Badge.Hive, 34, 15);
dungeonList["Burned Tower"] = new Dungeon("Burned Tower", ["Rattata", "Zubat", "Koffing", "Raticate"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Lucky_incense], 1500, [new DungeonBossPokemon("Golbat", 6000, 35), new DungeonBossPokemon("Weezing", 6000, 35), new DungeonBossPokemon("Shuckle", 300000, 50)], 4500, GameConstants.Badge.Fog, 37, 20);
dungeonList["Tin Tower"] = new Dungeon("Tin Tower", ["Rattata", "Gastly"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 1500, [new DungeonBossPokemon("Raticate", 6000, 35), new DungeonBossPokemon("Haunter", 6000, 35), new DungeonBossPokemon("Ho-Oh", 300000, 70)], 4500, GameConstants.Badge.Fog, 37, 20);
dungeonList["Whirl Islands"] = new Dungeon("Whirl Islands", ["Zubat", "Golbat", "Seel", "Krabby", "Horsea"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.xExp], 1800, [new DungeonBossPokemon("Dewgong", 7000, 40), new DungeonBossPokemon("Kingler", 7000, 40), new DungeonBossPokemon("Lugia", 300000, 70)], 5000, GameConstants.Badge.Storm, 41, 25);
dungeonList["Mt Mortar"] = new Dungeon("Mt Mortar", ["Rattata", "Zubat", "Geodude", "Marill", "Raticate", "Golbat", "Graveler"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Token_collector], 2100, [new DungeonBossPokemon("Tyrogue", 8000, 45)], 5500, GameConstants.Badge.Storm, 42, 30);
dungeonList["Ice Path"] = new Dungeon("Ice Path", ["Zubat", "Jynx", "Swinub"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.Lucky_incense], 2400, [new DungeonBossPokemon("Delibird", 9000, 50)], 6000, GameConstants.Badge.Glacier, 44, 32);
dungeonList["Dark Cave"] = new Dungeon("Dark Cave", ["Zubat", "Geodude", "Golbat", "Graveler", "Wobbuffet"], [GameConstants.BattleItemType.xClick, GameConstants.BattleItemType.Item_magnet], 3000, [new DungeonBossPokemon("Dunsparce", 10000, 55)], 6500, GameConstants.Badge.Rising, 45, 35);
dungeonList["Mt Silver"] = new Dungeon("Mt Silver", ["Ponyta", "Doduo", "Tangela", "Sneasel", "Ursaring", "Donphan", "Teddiursa", "Phanpy", "Quagsire", "Misdreavus"], [GameConstants.BattleItemType.xAttack, GameConstants.BattleItemType.xExp], 3500, [new DungeonBossPokemon("Larvitar", 12000, 60)], 10000, GameConstants.Badge.Elite_Karen, 28, 50);
class DungeonBattle extends Battle {
    /**
     * Award the player with money and exp, and throw a Pokéball if applicable
     */
    static defeatPokemon() {
        DungeonRunner.fighting(false);
        player.gainMoney(this.enemyPokemon().money);
        player.gainExp(this.enemyPokemon().exp, this.enemyPokemon().level, false);
        player.gainShards(this.enemyPokemon());
        player.defeatedAmount[this.enemyPokemon().id](player.defeatedAmount[this.enemyPokemon().id]() + 1);
        BreedingHelper.progressEggs(Math.floor(Math.sqrt(DungeonRunner.dungeon.itemRoute)));
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        const pokemonName = this.enemyPokemon().name;
        const isShiny = this.enemyPokemon().shiny;
        const pokeBall = player.calculatePokeballToUse(pokemonName, isShiny);
        if (pokeBall !== GameConstants.Pokeball.None) {
            this.prepareCatch(pokeBall);
            setTimeout(() => {
                this.attemptCatch();
                if (DungeonRunner.fightingBoss()) {
                    DungeonRunner.fightingBoss(false);
                    DungeonRunner.dungeonWon();
                }
            }, player.calculateCatchTime(pokeBall));
        }
        else if (DungeonRunner.fightingBoss()) {
            DungeonRunner.fightingBoss(false);
            DungeonRunner.dungeonWon();
        }
    }
    static generateNewEnemy() {
        DungeonRunner.fighting(true);
        this.catching(false);
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateDungeonPokemon(DungeonRunner.dungeon.pokemonList, DungeonRunner.chestsOpened, DungeonRunner.dungeon.baseHealth, DungeonRunner.dungeon.level));
    }
    static generateNewBoss() {
        DungeonRunner.fighting(true);
        this.catching(false);
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateDungeonBoss(DungeonRunner.dungeon.bossList, DungeonRunner.chestsOpened));
    }
}
class DungeonMap {
    constructor(size) {
        this.size = size;
        this.board = ko.observable(this.generateMap());
        this.playerPosition = ko.observable(new Point(Math.floor(size / 2), size - 1));
        // Move the boss if it spawns on the player.
        if (this.currentTile().type() == GameConstants.DungeonTile.boss) {
            this.currentTile().type(GameConstants.DungeonTile.empty);
            let newX = GameConstants.randomIntBetween(0, size - 2);
            let newY = GameConstants.randomIntBetween(0, size - 2);
            this.board()[newY][newX].type(GameConstants.DungeonTile.boss);
            this.board()[newY][newX].calculateCssClass();
        }
        this.currentTile().isVisible = true;
        this.currentTile().type(GameConstants.DungeonTile.empty);
        this.currentTile().hasPlayer = true;
        this.currentTile().calculateCssClass();
    }
    moveToCoordinates(x, y) {
        this.moveToTile(new Point(x, y));
    }
    moveUp() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y - 1);
    }
    moveRight() {
        this.moveToCoordinates(this.playerPosition().x + 1, this.playerPosition().y);
    }
    moveDown() {
        this.moveToCoordinates(this.playerPosition().x, this.playerPosition().y + 1);
    }
    moveLeft() {
        this.moveToCoordinates(this.playerPosition().x - 1, this.playerPosition().y);
    }
    moveToTile(point) {
        if (this.hasAccesToTile(point)) {
            this.currentTile().hasPlayer = false;
            this.currentTile().calculateCssClass();
            this.playerPosition(point);
            this.currentTile().hasPlayer = true;
            this.currentTile().isVisible = true;
            this.currentTile().calculateCssClass();
            if (this.currentTile().type() == GameConstants.DungeonTile.enemy) {
                DungeonBattle.generateNewEnemy();
            }
        }
    }
    showChestTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                if (this.board()[i][j].type() == GameConstants.DungeonTile.chest) {
                    this.board()[i][j].isVisible = true;
                    this.board()[i][j].calculateCssClass();
                }
            }
        }
    }
    showAllTiles() {
        for (let i = 0; i < this.board().length; i++) {
            for (let j = 0; j < this.board()[i].length; j++) {
                this.board()[i][j].isVisible = true;
                this.board()[i][j].calculateCssClass();
            }
        }
    }
    currentTile() {
        return this.board()[this.playerPosition().y][this.playerPosition().x];
    }
    hasAccesToTile(point) {
        if (DungeonRunner.fighting() || DungeonBattle.catching()) {
            return false;
        }
        //If any of the adjacent Tiles is visited, it's a valid Tile.
        if (point.x < 0 || point.x >= this.size || point.y < 0 || point.y >= this.size) {
            return false;
        }
        if (point.y < this.size - 1 && this.board()[point.y + 1][point.x].isVisible) {
            return true;
        }
        if (point.y > 0 && this.board()[point.y - 1][point.x].isVisible) {
            return true;
        }
        if (point.x < this.size - 1 && this.board()[point.y][point.x + 1].isVisible) {
            return true;
        }
        if (point.x > 0 && this.board()[point.y][point.x - 1].isVisible) {
            return true;
        }
        return false;
    }
    generateMap() {
        // Fill mapList with required Tiles
        let mapList = [];
        mapList.push(new DungeonTile(GameConstants.DungeonTile.boss));
        for (let i = 0; i < this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.chest));
        }
        for (let i = 0; i < this.size * 2 + 3; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.enemy));
        }
        for (let i = mapList.length; i < this.size * this.size; i++) {
            mapList.push(new DungeonTile(GameConstants.DungeonTile.empty));
        }
        // Shuffle the tiles randomly
        this.shuffle(mapList);
        // Create a 2d array
        let map = [];
        while (mapList.length) {
            map.push(mapList.splice(0, this.size));
        }
        return map;
    }
    /**
     * Shuffles array in place.
     * @param {Array} a items The array containing the items.
     */
    shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Math.floor(Math.random() * i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
}
class DungeonRunner {
    static initializeDungeon(dungeon) {
        if (!dungeon.isUnlocked()) {
            return false;
        }
        DungeonRunner.dungeon = dungeon;
        if (!DungeonRunner.hasEnoughTokens()) {
            Notifier.notify("You don't have enough dungeon tokens", GameConstants.NotificationOption.danger);
            return false;
        }
        DungeonRunner.payTokens();
        DungeonRunner.timeLeft(GameConstants.DUNGEON_TIME);
        DungeonRunner.map = new DungeonMap(GameConstants.DUNGEON_SIZE);
        DungeonRunner.pokemonDefeated = 0;
        DungeonRunner.chestsOpened = 0;
        DungeonRunner.loot = [];
        DungeonRunner.currentTileType = ko.computed(function () {
            return DungeonRunner.map.currentTile().type;
        });
        DungeonRunner.fightingBoss(false);
        Game.gameState(GameConstants.GameState.dungeon);
    }
    static tick() {
        if (this.timeLeft() < 0) {
            this.dungeonLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.DUNGEON_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.DUNGEON_TIME * 100));
    }
    static openChest() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.chest) {
            return;
        }
        DungeonRunner.chestsOpened++;
        let random = GameConstants.randomIntBetween(0, DungeonRunner.dungeon.itemList.length - 1);
        let input = GameConstants.BattleItemType[DungeonRunner.dungeon.itemList[random]];
        Notifier.notify('Found 1 ' + input + ' in a dungeon chest', GameConstants.NotificationOption.success);
        player.gainItem(input, 1);
        DungeonRunner.map.currentTile().type(GameConstants.DungeonTile.empty);
        DungeonRunner.map.currentTile().calculateCssClass();
        if (DungeonRunner.chestsOpened == GameConstants.DUNGEON_CHEST_SHOW) {
            DungeonRunner.map.showChestTiles();
        }
        if (DungeonRunner.chestsOpened == GameConstants.DUNGEON_MAP_SHOW) {
            DungeonRunner.map.showAllTiles();
        }
    }
    static startBossFight() {
        if (DungeonRunner.map.currentTile().type() !== GameConstants.DungeonTile.boss || DungeonRunner.fightingBoss()) {
            return;
        }
        DungeonRunner.fightingBoss(true);
        DungeonBattle.generateNewBoss();
    }
    static dungeonLost() {
        DungeonRunner.fighting(false);
        Game.gameState(GameConstants.GameState.town);
        Notifier.notify("You could not complete the dungeon in time", GameConstants.NotificationOption.danger);
    }
    static dungeonWon() {
        GameHelper.incrementObservable(player.statistics.dungeonsCleared[Statistics.getDungeonIndex(DungeonRunner.dungeon.name())]);
        Game.gameState(GameConstants.GameState.town);
        // TODO award loot with a special screen
        Notifier.notify("You have successfully completed the dungeon", GameConstants.NotificationOption.success);
    }
    static dungeonCompleted(dungeon, includeShiny) {
        let possiblePokemon = dungeon.allPokemonNames;
        return RouteHelper.listCompleted(possiblePokemon, includeShiny);
    }
    static hasEnoughTokens() {
        return player.dungeonTokens() >= DungeonRunner.dungeon.tokenCost;
    }
    static payTokens() {
        player.dungeonTokens(player.dungeonTokens() - DungeonRunner.dungeon.tokenCost);
    }
}
DungeonRunner.timeLeft = ko.observable(GameConstants.DUNGEON_TIME);
DungeonRunner.timeLeftPercentage = ko.observable(100);
DungeonRunner.fighting = ko.observable(false);
DungeonRunner.fightingBoss = ko.observable(false);
DungeonRunner.timeLeftSeconds = ko.computed(function () {
    return (Math.ceil(DungeonRunner.timeLeft() / 10) / 10).toFixed(1);
});
class DungeonTile {
    constructor(type) {
        this.isVisible = false;
        this.hasPlayer = false;
        this.type = ko.observable(type);
        this.cssClass = ko.observable("");
        this.calculateCssClass();
    }
    calculateCssClass() {
        if (!this.isVisible) {
            this.cssClass("tile tile-invisible");
            return;
        }
        if (this.hasPlayer) {
            this.cssClass("tile tile-player");
            return;
        }
        this.cssClass("tile tile-" + GameConstants.DungeonTile[this.type()]);
    }
}
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
class Berry {
    constructor(type, harvestTime, moneyValue, farmValue) {
        this.type = type;
        this.harvestTime = harvestTime;
        this.moneyValue = moneyValue;
        this.farmValue = farmValue;
    }
}
const BerryList = {};
BerryList["Cheri"] = new Berry(GameConstants.BerryType.Cheri, 30, 100, 6);
BerryList["Chesto"] = new Berry(GameConstants.BerryType.Chesto, 45, 150, 8);
BerryList["Pecha"] = new Berry(GameConstants.BerryType.Pecha, 60, 180, 10);
BerryList["Rawst"] = new Berry(GameConstants.BerryType.Rawst, 90, 240, 14);
BerryList["Aspear"] = new Berry(GameConstants.BerryType.Aspear, 120, 290, 18);
BerryList["Leppa"] = new Berry(GameConstants.BerryType.Leppa, 240, 460, 30);
BerryList["Oran"] = new Berry(GameConstants.BerryType.Oran, 300, 530, 35);
BerryList["Sitrus"] = new Berry(GameConstants.BerryType.Sitrus, 600, 1000, 60);
class FarmRunner {
    static openFarmModal() {
        if (FarmRunner.accessToFarm()) {
            this.plotPrice(this.computePlotPrice());
            Game.gameState(GameConstants.GameState.paused);
            $('#farmModal').modal('show');
        }
        else {
            Notifier.notify("You don't have access to this location yet", GameConstants.NotificationOption.warning);
        }
    }
    static accessToFarm() {
        return MapHelper.accessToRoute(14, 0) && player.hasKeyItem("Wailmer pail");
    }
    static timeToReduce() {
        let oakItemBonus = OakItemRunner.isActive(GameConstants.OakItem.Sprayduck) ? OakItemRunner.calculateBonus(GameConstants.OakItem.Sprayduck) / 100 : 0;
        oakItemBonus = 1 - oakItemBonus;
        return Math.round(100 / oakItemBonus) / 100;
    }
    static tick() {
        this.counter = 0;
        const timeToReduce = this.timeToReduce();
        for (let i = 0; i < player.plotList.length; i++) {
            player.plotList[i]().timeLeft(Math.max(0, player.plotList[i]().timeLeft() - timeToReduce));
        }
    }
    static computePlotPrice() {
        if (this.allPlotsUnlocked()) {
            return Infinity;
        }
        let i = 0;
        while (player.plotList[i]().isUnlocked()) {
            i++;
        }
        return 10 * Math.floor(Math.pow(i, 1.6));
    }
    static unlockPlot() {
        if (this.canBuyPlot()) {
            player.unlockPlot();
            player.farmPoints(player.farmPoints() - this.plotPrice());
            this.plotPrice(this.computePlotPrice());
        }
    }
    static allPlotsUnlocked() {
        return player.plotList[player.plotList.length - 1]().isUnlocked();
    }
    static canBuyPlot() {
        return !this.allPlotsUnlocked() && player.farmPoints() >= this.plotPrice();
    }
    static getPlot(plotId) {
        return player.plotList[plotId]();
    }
    static plantAll() {
        for (let i = 0; i < player.plotList.length; i++) {
            FarmRunner.plant(i);
        }
    }
    static harvestAll() {
        let total = 0;
        for (let i = 0; i < player.plotList.length; i++) {
            total += FarmRunner.harvest(i, true);
        }
        if (total > 0) {
            Notifier.notify(`You earned ${total} money from the harvest!`, GameConstants.NotificationOption.success);
        }
    }
    static isEmpty(plotId) {
        return ko.computed(function () {
            return this.getPlot(plotId).berry() == null;
        }, this);
    }
    static hasBerry(type) {
        return player.berryList[type]() > 0;
    }
    static removeBerry(type, amount = 1) {
        player.berryList[type](player.berryList[type]() - amount);
    }
    static plant(plotId) {
        let plot = this.getPlot(plotId);
        if (!plot.isEmpty()) {
            return;
        }
        if (!plot.isUnlocked()) {
            return;
        }
        if (!this.hasBerry(FarmRunner.curBerry.type)) {
            return;
        }
        FarmRunner.removeBerry(FarmRunner.curBerry.type);
        plot.berry(FarmRunner.curBerry);
        plot.timeLeft(FarmRunner.curBerry.harvestTime);
    }
    static harvest(plotId, all = false) {
        let plot = this.getPlot(plotId);
        if (plot.berry() !== null && plot.timeLeft() <= 0) {
            player.gainFarmPoints(plot.berry().farmValue);
            FarmRunner.gainBerryById(plot.berry().type, GameConstants.randomIntBetween(2, 3));
            let money = plot.berry().moneyValue;
            player.gainMoney(money);
            if (!all) {
                Notifier.notify(`You earned ${money} money from the harvest!`, GameConstants.NotificationOption.success);
            }
            plot.berry(null);
            OakItemRunner.use(GameConstants.OakItem.Sprayduck);
            return money;
        }
        return 0;
    }
    static gainBerryByName(berryName, amount = 1) {
        player.berryList[GameConstants.BerryType[berryName]](player.berryList[GameConstants.BerryType[berryName]]() + amount);
    }
    static gainBerryById(berryId, amount = 1) {
        player.berryList[berryId](player.berryList[berryId]() + amount);
        GameHelper.incrementObservable(player.statistics.berriesHarvested[berryId], amount);
    }
    static getTooltipLabel(plotId) {
        let plot = this.getPlot(plotId);
        if (plot.timeLeft() > 0) {
            return plot.formattedTimeLeft();
        }
        return "Ready";
    }
    static getImage(plot) {
        if (plot.getStage() <= 1) {
            return "assets/images/farm/AllTreeSeedIII.png";
        }
        return "assets/images/farm/" + GameConstants.BerryType[plot.berry().type] + "Tree" + GameConstants.PlotStage[plot.getStage()] + "III.png";
    }
}
FarmRunner.curBerry = BerryList["Cheri"];
FarmRunner.counter = 0;
FarmRunner.plotPrice = ko.observable(10);
document.addEventListener("DOMContentLoaded", function (event) {
    $('#farmModal').on('show.bs.modal', function () {
        let seedList = $('#seedList');
        seedList.children().get(FarmRunner.curBerry.type).className += " active";
        seedList.find("li").click(function () {
            $(this).parent().children().removeClass("active");
            $(this).addClass("active");
        });
    });
    $('#farmModal').on('hidden.bs.modal', function () {
        if (player.route() == 14) {
            Game.gameState(GameConstants.GameState.fighting);
        }
        else {
            MapHelper.moveToRoute(14, GameConstants.Region.kanto);
        }
    });
});
class Plot {
    constructor(isUnlocked, exp, level, boosted, berry, timeLeft) {
        this.isUnlocked = ko.observable(isUnlocked);
        this.boosted = boosted;
        this.berry = ko.observable(berry);
        this.timeLeft = ko.observable(timeLeft);
        //this.formattedTimeLeft = ko.observable(GameConstants.formatTime(this.timeLeft()));
        this.formattedTimeLeft = ko.computed(function () {
            return GameConstants.formatTime(this.timeLeft() / FarmRunner.timeToReduce());
        }, this);
        this.isEmpty = ko.computed(function () {
            return this.berry() == null;
        }, this);
    }
    getStage() {
        if (this.berry() == null) {
            return 1;
        }
        return 4 - Math.ceil(4 * this.timeLeft() / this.berry().harvestTime);
    }
}
class GymPokemon {
    constructor(name, maxHealth, level) {
        this.name = name;
        this.maxHealth = maxHealth;
        this.level = level;
    }
}
///<reference path="GymPokemon.ts"/>
///<reference path="../pokemons/PokemonFactory.ts"/>
/**
 * Gym class.
 */
class Gym {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, badgeReq, rewardMessage) {
        this.leaderName = leaderName;
        this.town = town;
        this.pokemons = pokemons;
        this.badgeReward = badgeReward;
        this.moneyReward = moneyReward;
        this.badgeReq = badgeReq;
        this.defeatMessage = rewardMessage;
    }
    static isUnlocked(gym) {
        return player.hasBadge(gym.badgeReq);
    }
    static calculateCssClass(gym) {
        return ko.computed(function () {
            if (player.hasBadge(gym.badgeReward)) {
                return "btn btn-success";
            }
            return "btn btn-secondary";
        });
    }
    static getLeaderByBadge(badge) {
        for (let item in gymList) {
            let gym = gymList[item];
            if (GameConstants.Badge[gym.badgeReward] == GameConstants.Badge[GameConstants.Badge[badge]]) {
                return gym.leaderName;
            }
        }
        return "Brock";
    }
}
//TODO add all rewardMessages
/**
 * Data list that contains all gymLeaders, accessible by townName.
 */
const gymList = {};
gymList["Pewter City"] = new Gym("Brock", "Pewter City", [new GymPokemon("Geodude", 770, 12),
    new GymPokemon("Onix", 1554, 14)], GameConstants.Badge.Boulder, 250, GameConstants.Badge.None, "I took you for granted, and so I lost. As proof of your victory, I confer on you this...the official Pokémon League Boulder Badge.");
gymList["Cerulean City"] = new Gym("Misty", "Cerulean City", [new GymPokemon("Staryu", 4000, 18),
    new GymPokemon("Starmie", 6800, 21)], GameConstants.Badge.Cascade, 500, GameConstants.Badge.Boulder, "Wow! You're too much, all right! You can have the Cascade Badge to show that you beat me.");
gymList["Vermillion City"] = new Gym("Lt. Surge", "Vermillion City", [new GymPokemon("Voltorb", 10780, 21),
    new GymPokemon("Pikachu", 13540, 18),
    new GymPokemon("Raichu", 15675, 24)], GameConstants.Badge.Thunder, 1000, GameConstants.Badge.Cascade, "Now that's a shocker! You're the real deal, kid! Fine, then, take the Thunder Badge!");
gymList["Celadon City"] = new Gym("Erika", "Celadon City", [new GymPokemon("Victreebel", 28810, 29),
    new GymPokemon("Tangela", 30340, 24),
    new GymPokemon("Vileplume", 36400, 29)], GameConstants.Badge.Rainbow, 1500, GameConstants.Badge.Thunder, "Oh! I concede defeat. You are remarkably strong. I must confer on you the Rainbow Badge.");
gymList["Saffron City"] = new Gym("Sabrina", "Saffron City", [new GymPokemon("Kadabra", 23040, 38),
    new GymPokemon("Mr. Mime", 25600, 37),
    new GymPokemon("Venomoth", 28400, 38),
    new GymPokemon("Alakazam", 35380, 43)], GameConstants.Badge.Marsh, 2500, GameConstants.Badge.Rainbow, "This loss shocks me! But a loss is a loss. I admit I didn't work hard enough to win. You earned the Marsh Badge.");
gymList["Fuchsia City"] = new Gym("Koga", "Fuchsia City", [new GymPokemon("Koffing", 30780, 38),
    new GymPokemon("Muk", 32460, 37),
    new GymPokemon("Koffing", 36540, 38),
    new GymPokemon("Weezing", 37430, 43)], GameConstants.Badge.Soul, 3500, GameConstants.Badge.Marsh, "Humph! You have proven your worth! Here! Take the Soul Badge!");
gymList["Cinnabar Island"] = new Gym("Blaine", "Cinnabar Island", [new GymPokemon("Growlithe", 37430, 42),
    new GymPokemon("Ponyta", 42340, 40),
    new GymPokemon("Rapidash", 45230, 42),
    new GymPokemon("Arcanine", 50290, 47)], GameConstants.Badge.Volcano, 5000, GameConstants.Badge.Soul, "I have burned down to nothing! Not even ashes remain! You have earned the Volcano Badge.");
gymList["Viridian City"] = new Gym("Giovanni", "Viridian City", [new GymPokemon("Rhyhorn", 45230, 45),
    new GymPokemon("Dugtrio", 47530, 42),
    new GymPokemon("Nidoqueen", 48740, 44),
    new GymPokemon("Nidoking", 48350, 45),
    new GymPokemon("Rhydon", 55000, 50)], GameConstants.Badge.Earth, 6000, GameConstants.Badge.Volcano, "Ha! That was a truly intense fight. You have won! As proof, here is the Earth Badge!");
gymList["Elite Lorelei"] = new Gym("Lorelei", "Elite Lorelei", [new GymPokemon("Dewgong", 45330, 52),
    new GymPokemon("Cloyster", 48300, 51),
    new GymPokemon("Slowbro", 52000, 52),
    new GymPokemon("Jynx", 57000, 54),
    new GymPokemon("Lapras", 60250, 54),], GameConstants.Badge.Elite_Lorelei, 7500, GameConstants.Badge.Earth, "...Things shouldn't be this way!");
gymList["Elite Bruno"] = new Gym("Bruno", "Elite Bruno", [new GymPokemon("Onix", 45330, 51),
    new GymPokemon("Hitmonchan", 48300, 53),
    new GymPokemon("Hitmonlee", 52000, 53),
    new GymPokemon("Onix", 57000, 54),
    new GymPokemon("Machamp", 60250, 56),], GameConstants.Badge.Elite_Bruno, 7500, GameConstants.Badge.Elite_Lorelei, "Why? How could I lose?");
gymList["Elite Agatha"] = new Gym("Agatha", "Elite Agatha", [new GymPokemon("Gengar", 45330, 54),
    new GymPokemon("Golbat", 48300, 54),
    new GymPokemon("Haunter", 52000, 53),
    new GymPokemon("Arbok", 57000, 56),
    new GymPokemon("Gengar", 60250, 58),], GameConstants.Badge.Elite_Agatha, 7500, GameConstants.Badge.Elite_Bruno, "Oh, my! You're something special, child!");
gymList["Elite Lance"] = new Gym("Lance", "Elite Lance", [new GymPokemon("Gyarados", 48300, 56),
    new GymPokemon("Dragonair", 52000, 54),
    new GymPokemon("Dragonair", 57000, 54),
    new GymPokemon("Aerodactyl", 60250, 58),
    new GymPokemon("Dragonite", 66000, 60),], GameConstants.Badge.Elite_Lance, 7500, GameConstants.Badge.Elite_Agatha, "That’s it! I hate to admit it, but you are a Pokémon master!");
//TODO make champion Gym
//Johto Gyms
gymList["Violet City"] = new Gym("Falkner", "Violet City", [new GymPokemon("Pidgey", 38000, 9),
    new GymPokemon("Pidgeotto", 42000, 13)], GameConstants.Badge.Zephyr, 500, GameConstants.Badge.Elite_Lance, "...For pity's sake! My dad's cherished bird Pokémon... But a defeat is a defeat. All right. Take this official Pokémon League Badge. This one is the Zephyr Badge.");
gymList["Azalea Town"] = new Gym("Bugsy", "Azalea Town", [new GymPokemon("Metapod", 33000, 15),
    new GymPokemon("Kakuna", 37500, 15),
    new GymPokemon("Scyther", 39000, 17)], GameConstants.Badge.Hive, 500, GameConstants.Badge.Zephyr, "Whoa, amazing! You're an expert on Pokémon! My research isn't complete yet. OK, you win. Take this Hive Badge.");
gymList["Goldenrod City"] = new Gym("Whitney", "Goldenrod City", [new GymPokemon("Clefairy", 50000, 17),
    new GymPokemon("Miltank", 80000, 19)], GameConstants.Badge.Plain, 500, GameConstants.Badge.Hive, "...Sniff... What? What do you want? A badge? Oh, right. I forgot. Here's the Plain Badge.");
gymList["Ecruteak City"] = new Gym("Morty", "Ecruteak City", [new GymPokemon("Gastly", 37000, 21),
    new GymPokemon("Haunter", 38000, 21),
    new GymPokemon("Haunter", 40000, 23),
    new GymPokemon("Gengar", 42000, 25)], GameConstants.Badge.Fog, 500, GameConstants.Badge.Plain, "I see... Your journey has taken you to far-away places. And you have witnessed much more than me. I envy you for that... Here is the Fog Badge..");
gymList["Cianwood City"] = new Gym("Chuck", "Cianwood City", [new GymPokemon("Primeape", 87000, 29),
    new GymPokemon("Poliwrath", 93000, 31)], GameConstants.Badge.Storm, 500, GameConstants.Badge.Fog, "Here is the Storm Badge. Wahahah! I enjoyed battling you! But a loss is a loss! From now on, I'm going to train 24 hours a day!");
gymList["Olivine City"] = new Gym("Jasmine", "Olivine City", [new GymPokemon("Magnemite", 67000, 30),
    new GymPokemon("Magnemite", 68000, 30),
    new GymPokemon("Steelix", 72000, 35)], GameConstants.Badge.Mineral, 500, GameConstants.Badge.Storm, "...You are a better Trainer than me, in both skill and kindness. In accordance with League rules, I confer upon you this Mineral Badge.");
gymList["Mahogany Town"] = new Gym("Pryce", "Mahogany Town", [new GymPokemon("Seel", 70000, 30),
    new GymPokemon("Dewgong", 72500, 32),
    new GymPokemon("Piloswine", 76000, 34)], GameConstants.Badge.Glacier, 500, GameConstants.Badge.Mineral, "I am impressed by your prowess. With your strong will, I know you will overcome all life's obstacles. You are worthy of this Glacier Badge!");
gymList["Blackthorn City"] = new Gym("Clair", "Blackthorn City", [new GymPokemon("Dragonair", 65000, 38),
    new GymPokemon("Dragonair", 65000, 38),
    new GymPokemon("Gyarados", 78000, 38),
    new GymPokemon("Kingdra", 80000, 41)], GameConstants.Badge.Rising, 500, GameConstants.Badge.Glacier, "Here, this is the Rising Badge... Hurry up! Take it!");
//Johto Elite 4
gymList["Elite Will"] = new Gym("Will", "Elite Will", [new GymPokemon("Xatu", 45330, 40),
    new GymPokemon("Jynx", 48300, 41),
    new GymPokemon("Exeggutor", 52000, 41),
    new GymPokemon("Slowbro", 57000, 41),
    new GymPokemon("Xatu", 60250, 42),], GameConstants.Badge.Elite_Will, 7500, GameConstants.Badge.Rising, "Even though I was defeated, I won't change my course. I will continue battling until I stand above all Trainers! Now move on and experience the true ferocity of the Elite Four.");
gymList["Elite Koga"] = new Gym("Koga2", "Elite Koga", [new GymPokemon("Ariados", 45330, 40),
    new GymPokemon("Venomoth", 48300, 41),
    new GymPokemon("Forretress", 52000, 43),
    new GymPokemon("Muk", 57000, 42),
    new GymPokemon("Crobat", 60250, 44),], GameConstants.Badge.Elite_Koga, 7500, GameConstants.Badge.Elite_Will, "I subjected you to everything I could muster. But my efforts failed. I must hone my skills. Go on to the next room, and put your abilities to the test!");
gymList["Elite Bruno2"] = new Gym("Bruno2", "Elite Bruno2", [new GymPokemon("Hitmontop", 45330, 42),
    new GymPokemon("Hitmonlee", 48300, 42),
    new GymPokemon("Hitmonchan", 52000, 42),
    new GymPokemon("Onix", 57000, 43),
    new GymPokemon("Machamp", 60250, 46),], GameConstants.Badge.Elite_Bruno2, 7500, GameConstants.Badge.Elite_Koga, "Having lost, I have no right to say anything… Go face your next challenge!");
gymList["Elite Karen"] = new Gym("Karen", "Elite Karen", [new GymPokemon("Umbreon", 48300, 42),
    new GymPokemon("Vileplume", 52000, 42),
    new GymPokemon("Gengar", 57000, 45),
    new GymPokemon("Murkrow", 60250, 44),
    new GymPokemon("Houndoom", 66000, 47),], GameConstants.Badge.Elite_Karen, 7500, GameConstants.Badge.Elite_Bruno2, "Strong Pokémon. Weak Pokémon. That is only the selfish perception of people. Truly skilled Trainers should try to win with the Pokémon they love best. I like your style. You understand what's important. Go on — — the Champion is waiting.");
gymList["Champion Lance"] = new Gym("Lance2", "Champion Lance", [new GymPokemon("Gyarados", 58300, 44),
    new GymPokemon("Dragonite", 62000, 49),
    new GymPokemon("Dragonite", 64000, 49),
    new GymPokemon("Aerodactyl", 60250, 48),
    new GymPokemon("Dragonite", 70000, 50),], GameConstants.Badge.Elite_JohtoChampion, 7500, GameConstants.Badge.Elite_Karen, "…It's over. But it's an odd feeling. I’m not angry that I lost. In fact, I feel happy. Happy that I witnessed the rise of a great new Champion!");
///<reference path="Gym.ts"/>
class Champion extends Gym {
    constructor(leaderName, town, pokemons, badgeReward, moneyReward, badgeReq, rewardMessage) {
        super(leaderName, town, pokemons, badgeReward, moneyReward, badgeReq, rewardMessage);
    }
    setPokemon(starter) {
        this.pokemons = [
            new GymPokemon("Pidgeot", 52340, 59),
            new GymPokemon("Alakazam", 56320, 57),
            new GymPokemon("Rhydon", 58340, 59),
        ];
        switch (starter) {
            case GameConstants.Starter.Bulbasaur: {
                this.pokemons.push(new GymPokemon("Exeggutor", 57520, 59));
                this.pokemons.push(new GymPokemon("Gyarados", 63040, 61));
                this.pokemons.push(new GymPokemon("Charizard", 70000, 63));
                break;
            }
            case GameConstants.Starter.Charmander: {
                this.pokemons.push(new GymPokemon("Arcanine", 65340, 59));
                this.pokemons.push(new GymPokemon("Gyarados", 63040, 61));
                this.pokemons.push(new GymPokemon("Blastoise", 70000, 63));
                break;
            }
            case GameConstants.Starter.Squirtle: {
                this.pokemons.push(new GymPokemon("Gyarados", 63040, 59));
                this.pokemons.push(new GymPokemon("Arcanine", 65340, 61));
                this.pokemons.push(new GymPokemon("Venusaur", 70000, 63));
                break;
            }
        }
    }
}
gymList["Champion Blue"] = new Champion("Blue", "Champion Blue", [], GameConstants.Badge.Elite_Champion, 10000, GameConstants.Badge.Elite_Lance, "Why? Why did I lose? I never made any mistakes raising my Pokémon… Darn it! You're the new Pokémon League Champion! Although I don't like to admit it…");
/**
 * Created by dennis on 05-07-17.
 */
class GymBattle extends Battle {
    /**
     * Award the player with exp, and go to the next pokemon
     */
    static defeatPokemon() {
        player.gainMoney(this.enemyPokemon().money);
        player.gainExp(this.enemyPokemon().exp, this.enemyPokemon().level, false);
        BreedingHelper.progressEggs(Math.floor(Math.sqrt(this.gym.badgeReq * 3 + 1)));
        player.gainShards(this.enemyPokemon());
        this.index(this.index() + 1);
        if (this.index() >= this.gym.pokemons.length) {
            GymRunner.gymWon(this.gym);
        }
        else {
            this.generateNewEnemy();
        }
    }
    /**
     * Generate a new enemy based on the current route and region.
     * Reset the counter.
     */
    static generateNewEnemy() {
        this.counter = 0;
        this.enemyPokemon(PokemonFactory.generateTrainerPokemon(this.gym.town, this.index()));
    }
}
GymBattle.index = ko.observable(0);
GymBattle.totalPokemons = ko.observable(0);
GymBattle.pokemonsDefeatedComputable = ko.computed(function () {
    return GymBattle.index();
});
GymBattle.pokemonsUndefeatedComputable = ko.computed(function () {
    return GymBattle.totalPokemons() - GymBattle.index();
});
/**
 * Created by dennis on 05-07-17.
 */
class GymRunner {
    static startGym(gym) {
        this.gymObservable(gym);
        if (Gym.isUnlocked(gym)) {
            if (gym instanceof Champion) {
                gym.setPokemon(player.starter);
            }
            Game.gameState(GameConstants.GameState.idle);
            GymBattle.gym = gym;
            GymBattle.totalPokemons(gym.pokemons.length);
            GymBattle.index(0);
            GymBattle.generateNewEnemy();
            Game.gameState(GameConstants.GameState.gym);
            GymRunner.timeLeft(GameConstants.GYM_TIME);
            this.resetGif();
            setTimeout(function () {
                GymRunner.timeLeft(GameConstants.GYM_TIME);
                GymBattle.index(0);
                GymBattle.generateNewEnemy();
                $('#gymCountdownView').fadeOut(300);
                let $img = $('#gif-go');
                $img.hide();
            }, GameConstants.GYM_COUNTDOWN);
        }
        else {
            Notifier.notify(gym.leaderName + " does not deem you a worthy opponent yet...<br>Perhaps you can convince them with more gym badges", GameConstants.NotificationOption.danger);
        }
    }
    static resetGif() {
        let $img = $('#gif-go');
        $img.show();
        setTimeout(function () {
            $img.attr('src', 'assets/gifs/go.gif');
        }, 0);
    }
    static tick() {
        if (this.timeLeft() < 0) {
            GymRunner.gymLost();
        }
        this.timeLeft(this.timeLeft() - GameConstants.GYM_TICK);
        this.timeLeftPercentage(Math.floor(this.timeLeft() / GameConstants.GYM_TIME * 100));
    }
    static gymLost() {
        Notifier.notify("It appears you are not strong enough to defeat " + GymBattle.gym.leaderName, GameConstants.NotificationOption.danger);
        Game.gameState(GameConstants.GameState.town);
    }
    static gymWon(gym) {
        Notifier.notify("Congratulations, you defeated " + GymBattle.gym.leaderName + "!", GameConstants.NotificationOption.success);
        this.gymObservable(gym);
        player.gainMoney(gym.moneyReward);
        if (!player.hasBadge(gym.badgeReward)) {
            player.gainBadge(gym.badgeReward);
            $('#receiveBadgeModal').modal('show');
        }
        GameHelper.incrementObservable(player.statistics.gymsDefeated[Statistics.getGymIndex(gym.town)]);
        player.town(TownList[gym.town]);
        MapHelper.updateAllRoutes();
        Game.gameState(GameConstants.GameState.town);
    }
}
GymRunner.timeLeft = ko.observable(GameConstants.GYM_TIME);
GymRunner.timeLeftPercentage = ko.observable(100);
GymRunner.gymObservable = ko.observable(gymList["Pewter City"]);
GymRunner.timeLeftSeconds = ko.computed(function () {
    return (Math.ceil(GymRunner.timeLeft() / 10) / 10).toFixed(1);
});
document.addEventListener("DOMContentLoaded", function (event) {
    $('#receiveBadgeModal').on('hidden.bs.modal', function () {
        if (GymBattle.gym.badgeReward == GameConstants.Badge.Soul) {
            player.gainKeyItem("Safari ticket");
        }
    });
});
/**
 * Created by dennis on 03-07-17.
 */
class Shop {
    constructor(items) {
        let itemList = [];
        for (let item of items) {
            itemList.push(ItemList[item]);
        }
        this.items = ko.observableArray(itemList);
    }
}
///<reference path="Shop.ts"/>
class ShopHandler {
    static showShop(shop) {
        this.setSelected(0);
        this.resetAmount();
        this.shopObservable(shop);
        for (let i = 0; i < shop.items().length; i++) {
            let item = shop.items()[i];
            item.price(Math.round(item.basePrice * player.itemMultipliers[item.name()]));
        }
    }
    static setSelected(i) {
        this.selected(i);
    }
    static buyItem() {
        let item = this.shopObservable().items()[ShopHandler.selected()];
        item.buy(this.amount());
        ShopHandler.resetAmount();
    }
    static resetAmount() {
        let input = $("input[name='amountOfItems']");
        input.val(1).change();
    }
    static increaseAmount(n) {
        let input = $("input[name='amountOfItems']");
        let newVal = (parseInt(input.val().toString()) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static maxAmount(n) {
        const item = this.shopObservable().items()[ShopHandler.selected()];
        const input = $("input[name='amountOfItems']");
        if (!item || !item.isAvailable()) {
            return input.val(0).change();
        }
        let amt = 1;
        for (amt; player.hasCurrency(item.totalPrice(amt), item.currency); amt++) { }
        input.val(--amt).change();
    }
    static calculateCss(i) {
        if (this.selected() == i) {
            return "shopItem clickable btn btn-secondary active";
        }
        else {
            return "shopItem clickable btn btn-secondary";
        }
    }
    static calculateButtonCss() {
        let item = this.shopObservable().items()[ShopHandler.selected()];
        if (item && !(item.isAvailable() && player.hasCurrency(item.totalPrice(this.amount()), item.currency))
            || this.amount() < 1) {
            return "btn btn-danger smallButton smallFont";
        }
        else {
            return "btn btn-success smallButton smallFont";
        }
    }
}
ShopHandler.shopObservable = ko.observable(new Shop([]));
ShopHandler.selected = ko.observable(0);
ShopHandler.amount = ko.observable(1);
///<reference path="../shop/ShopHandler.ts"/>
class Item {
    constructor(name, basePrice, priceMultiplier, currency) {
        this.name = ko.observable(name);
        this.basePrice = basePrice;
        this.currency = currency;
        this.price = ko.observable(this.basePrice);
    }
    totalPrice(amount) {
        if (this.name() == GameConstants.Pokeball[GameConstants.Pokeball.Pokeball]) {
            return this.basePrice * amount;
        }
        else {
            let res = (this.price() * (1 - Math.pow(GameConstants.ITEM_PRICE_MULTIPLIER, amount))) / (1 - GameConstants.ITEM_PRICE_MULTIPLIER);
            return Math.floor(res);
        }
    }
    buy(n) {
        if (n <= 0) {
            return;
        }
        if (!this.isAvailable()) {
            Notifier.notify(`${this.name()} is sold out!`, GameConstants.NotificationOption.danger);
            return;
        }
        let multiple = n > 1 ? "s" : "";
        if (player.hasCurrency(this.totalPrice(n), this.currency)) {
            player.payCurrency(this.totalPrice(n), this.currency);
            this.gain(n);
            this.increasePriceMultiplier(n);
            Notifier.notify("You bought " + n + " " + this.name() + multiple, GameConstants.NotificationOption.success);
        }
        else {
            let curr = "currency";
            switch (this.currency) {
                case GameConstants.Currency.money:
                    curr = "money";
                    break;
                case GameConstants.Currency.questPoint:
                    curr = "quest points";
                    break;
                case GameConstants.Currency.dungeontoken:
                    curr = "dungeon tokens";
                    break;
            }
            Notifier.notify(`You don't have enough ${curr} to buy ${n} ${this.name() + multiple}`, GameConstants.NotificationOption.danger);
        }
    }
    gain(n) {
        player.gainItem(this.name(), n);
    }
    isAvailable() {
        return true;
    }
    increasePriceMultiplier(n = 1) {
        player.itemMultipliers[this.name()] = player.itemMultipliers[this.name()] * Math.pow(GameConstants.ITEM_PRICE_MULTIPLIER, n);
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.name()]));
    }
    decreasePriceMultiplier(n = 1) {
        player.itemMultipliers[this.name()] = Math.max(1, player.itemMultipliers[this.name()] / Math.pow(GameConstants.ITEM_PRICE_DEDUCT, n));
        this.price(Math.round(this.basePrice * player.itemMultipliers[this.name()]));
    }
}
const ItemList = {};
///<reference path="Item.ts"/>
class BattleItem extends Item {
    constructor(type) {
        let basePrice = GameConstants.ItemPrice[GameConstants.BattleItemType[type]];
        let priceMultiplier = 1;
        super(GameConstants.BattleItemType[type], basePrice, priceMultiplier, GameConstants.Currency.money);
        this.type = type;
    }
    use() {
    }
}
ItemList['xAttack'] = new BattleItem(GameConstants.BattleItemType.xAttack);
ItemList['xClick'] = new BattleItem(GameConstants.BattleItemType.xClick);
ItemList['xExp'] = new BattleItem(GameConstants.BattleItemType.xExp);
ItemList['Token_collector'] = new BattleItem(GameConstants.BattleItemType.Token_collector);
ItemList['Item_magnet'] = new BattleItem(GameConstants.BattleItemType.Item_magnet);
ItemList['Lucky_incense'] = new BattleItem(GameConstants.BattleItemType.Lucky_incense);
class EggItem extends Item {
    constructor(type) {
        let basePrice = GameConstants.ItemPrice.Egg;
        let priceMultiplier = 1;
        super(GameConstants.EggItemType[type], basePrice, priceMultiplier, GameConstants.Currency.questPoint);
        this.type = type;
    }
    use() {
        if (this.type === GameConstants.EggItemType.Pokemon_egg) {
            return;
        }
        if (player.itemList[this.name()]() <= 0) {
            return;
        }
        let success;
        if (this.type === GameConstants.EggItemType.Mystery_egg) {
            success = player.gainEgg(BreedingHelper.createRandomEgg());
        }
        else {
            let etype = GameConstants.EggType[GameConstants.EggItemType[this.type].split("_")[0]];
            success = player.gainEgg(BreedingHelper.createTypedEgg(etype));
        }
        if (success) {
            player.loseItem(this.name(), 1);
        }
    }
}
ItemList['Fire_egg'] = new EggItem(GameConstants.EggItemType.Fire_egg);
ItemList['Water_egg'] = new EggItem(GameConstants.EggItemType.Water_egg);
ItemList['Grass_egg'] = new EggItem(GameConstants.EggItemType.Grass_egg);
ItemList['Fighting_egg'] = new EggItem(GameConstants.EggItemType.Fighting_egg);
ItemList['Electric_egg'] = new EggItem(GameConstants.EggItemType.Electric_egg);
ItemList['Dragon_egg'] = new EggItem(GameConstants.EggItemType.Dragon_egg);
ItemList['Pokemon_egg'] = new EggItem(GameConstants.EggItemType.Pokemon_egg);
ItemList['Mystery_egg'] = new EggItem(GameConstants.EggItemType.Mystery_egg);
///<reference path="Item.ts"/>
class EnergyRestore extends Item {
    constructor(type) {
        let basePrice = GameConstants.ItemPrice[GameConstants.EnergyRestoreSize[type]];
        let priceMultiplier = 1;
        super(GameConstants.EnergyRestoreSize[type], basePrice, priceMultiplier, GameConstants.Currency.money);
        this.type = type;
    }
    use() {
        if (player.itemList[this.name()]() <= 0) {
            return;
        }
        if (Underground.energy === Underground.getMaxEnergy()) {
            Notifier.notify("Your mining energy is already full!", GameConstants.NotificationOption.danger);
            return;
        }
        Underground.gainEnergyThroughItem(this.type);
        player.loseItem(this.name(), 1);
    }
}
ItemList['SmallRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.SmallRestore);
ItemList['MediumRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.MediumRestore);
ItemList['LargeRestore'] = new EnergyRestore(GameConstants.EnergyRestoreSize.LargeRestore);
///<reference path="Item.ts"/>
class EvolutionStone extends Item {
    constructor(type) {
        let basePrice = GameConstants.ItemPrice.EvolutionStone;
        let priceMultiplier = 1;
        super(GameConstants.StoneType[type], basePrice, priceMultiplier, GameConstants.Currency.questPoint);
        this.type = type;
    }
    gain(n) {
        player.gainItem(GameConstants.StoneType[this.type], n);
    }
    use(pokemon) {
        let shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_STONE);
        let evolution = EvolutionStone.computeEvolution(this.type, pokemon);
        player.capturePokemon(evolution, shiny, false);
        return shiny;
    }
    static computeEvolution(type, pokemon) {
        // Assume stones and evolutions in pokemonList are consistent in ordering
        let pkmObj = PokemonHelper.getPokemonByName(pokemon);
        let index = pkmObj.evoLevel.indexOf(GameConstants.StoneType[type]);
        return pkmObj.evolutionByIndex(index, true);
    }
}
ItemList['Fire_stone'] = new EvolutionStone(GameConstants.StoneType.Fire_stone);
ItemList['Water_stone'] = new EvolutionStone(GameConstants.StoneType.Water_stone);
ItemList['Thunder_stone'] = new EvolutionStone(GameConstants.StoneType.Thunder_stone);
ItemList['Leaf_stone'] = new EvolutionStone(GameConstants.StoneType.Leaf_stone);
ItemList['Moon_stone'] = new EvolutionStone(GameConstants.StoneType.Moon_stone);
ItemList['Sun_stone'] = new EvolutionStone(GameConstants.StoneType.Sun_stone);
ItemList['Trade_stone'] = new EvolutionStone(GameConstants.StoneType.Trade_stone);
ItemList['Dragon_scale'] = new EvolutionStone(GameConstants.StoneType.Dragon_scale);
ItemList['Metal_coat'] = new EvolutionStone(GameConstants.StoneType.Metal_coat);
ItemList['Kings_rock'] = new EvolutionStone(GameConstants.StoneType.Kings_rock);
ItemList['Upgrade'] = new EvolutionStone(GameConstants.StoneType.Upgrade);
ItemList['Time_stone'] = new EvolutionStone(GameConstants.StoneType.Time_stone);
class ItemHandler {
    static useItem(name) {
        ItemList[name].use();
        player.itemList[name](player.itemList[name] - 1);
    }
    static resetAmount() {
        let input = $("input[name='amountOfStones']");
        input.val(1).change();
    }
    static increaseAmount(n) {
        let input = $("input[name='amountOfItems']");
        let newVal = (parseInt(input.val().toString()) || 0) + n;
        input.val(newVal > 1 ? newVal : 1).change();
    }
    static useStones() {
        if (this.pokemonSelected() == "") {
            Notifier.notify("No Pokémon selected", GameConstants.NotificationOption.danger);
            return;
        }
        let amountTotal = Math.min(this.amountSelected(), player.itemList[this.stoneSelected()]());
        if (amountTotal == 0) {
            Notifier.notify("You don't have any stones left...", GameConstants.NotificationOption.danger);
            return;
        }
        let amountUsed = 0;
        for (let i = 0; i < amountTotal; i++) {
            player.itemList[this.stoneSelected()](player.itemList[this.stoneSelected()]() - 1);
            amountUsed++;
            if (ItemList[this.stoneSelected()].use(this.pokemonSelected())) {
                // Stop when a shiny is encountered
                break;
            }
        }
        let multiple = amountUsed == 1 ? "" : "s";
        Notifier.notify("You used " + amountUsed + " " + this.stoneSelected() + multiple, GameConstants.NotificationOption.success);
    }
}
ItemHandler.stoneSelected = ko.observable("Fire_stone");
ItemHandler.pokemonSelected = ko.observable("");
ItemHandler.amountSelected = ko.observable(1);
ItemHandler.amount = ko.observable(1);
class PokeBlock extends Item {
    constructor(color) {
        let basePrice = GameConstants.ItemPrice.PokeBlock;
        let priceMultiplier = 1;
        super(name, basePrice, priceMultiplier, GameConstants.Currency.money);
        this.type = color;
    }
    use() {
    }
}
ItemList['Black'] = new PokeBlock(GameConstants.PokeBlockColor.Black);
ItemList['Red'] = new PokeBlock(GameConstants.PokeBlockColor.Red);
ItemList['Gold'] = new PokeBlock(GameConstants.PokeBlockColor.Gold);
ItemList['Purple'] = new PokeBlock(GameConstants.PokeBlockColor.Purple);
ItemList['Gray'] = new PokeBlock(GameConstants.PokeBlockColor.Gray);
ItemList['White'] = new PokeBlock(GameConstants.PokeBlockColor.White);
///<reference path="Item.ts"/>
class Pokeball extends Item {
    constructor(type, currency) {
        let basePrice = GameConstants.ItemPrice[GameConstants.Pokeball[type]];
        let priceMultiplier = 1;
        super(GameConstants.Pokeball[type], basePrice, priceMultiplier, currency);
        this.type = type;
    }
    gain(amt) {
        player.gainPokeballs(this.type, amt);
        GameHelper.incrementObservable(player.statistics.pokeballsBought[this.type], amt);
    }
    use() {
    }
}
ItemList["Pokeball"] = new Pokeball(GameConstants.Pokeball.Pokeball, GameConstants.Currency.money);
ItemList["Greatball"] = new Pokeball(GameConstants.Pokeball.Greatball, GameConstants.Currency.money);
ItemList["Ultraball"] = new Pokeball(GameConstants.Pokeball.Ultraball, GameConstants.Currency.money);
ItemList["Masterball"] = new Pokeball(GameConstants.Pokeball.Masterball, GameConstants.Currency.questPoint);
class PokemonItem extends Item {
    constructor(pokemon) {
        let basePrice = GameConstants.ItemPrice[GameConstants.PokemonItemType[pokemon]];
        let priceMultiplier = 1;
        super(GameConstants.PokemonItemType[pokemon], basePrice, priceMultiplier, GameConstants.Currency.questPoint);
        this.type = pokemon;
    }
    gain() {
        player.capturePokemon(this.name(), PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SHOP));
    }
    use() {
    }
}
ItemList['Eevee'] = new PokemonItem(GameConstants.PokemonItemType.Eevee);
ItemList['Porygon'] = new PokemonItem(GameConstants.PokemonItemType.Porygon);
ItemList['Jynx'] = new PokemonItem(GameConstants.PokemonItemType.Jynx);
ItemList['Mr. Mime'] = new PokemonItem(GameConstants.PokemonItemType['Mr. Mime']);
ItemList['Lickitung'] = new PokemonItem(GameConstants.PokemonItemType.Lickitung);
ItemList['Togepi'] = new PokemonItem(GameConstants.PokemonItemType.Togepi);
class Vitamin extends Item {
    constructor(type) {
        let basePrice = GameConstants.ItemPrice[GameConstants.VitaminType[type]];
        let priceMultiplier = 1;
        super(GameConstants.VitaminType[type], basePrice, priceMultiplier, GameConstants.Currency.money);
        this.type = type;
    }
    use() {
    }
}
ItemList['RareCandy'] = new Vitamin(GameConstants.VitaminType.RareCandy);
ItemList['Protein'] = new Vitamin(GameConstants.VitaminType.Protein);
class buyKeyItem extends Item {
    constructor(type) {
        let basePrice = GameConstants.ItemPrice[GameConstants.KeyItemType[type]];
        let priceMultiplier = 1;
        super(GameConstants.KeyItemType[type], basePrice, priceMultiplier, GameConstants.Currency.questPoint);
        this.type = type;
    }
    totalPrice(amt) {
        return this.basePrice;
    }
    gain(amt) {
        player.gainKeyItem(GameConstants.KeyItemType[this.type].replace("_", " "));
    }
    use() {
    }
    isAvailable() {
        return super.isAvailable() && !player.hasKeyItem(this.name().replace("_", " "));
    }
}
ItemList['Dungeon_ticket'] = new buyKeyItem(GameConstants.KeyItemType.Dungeon_ticket);
ItemList['Explorer_kit'] = new buyKeyItem(GameConstants.KeyItemType.Explorer_kit);
class KeyItem {
    constructor(name, description, unlockReq) {
        this.name = ko.observable(name);
        this.description = ko.observable(description);
        if (this.isUnlocked() || unlockReq == undefined) {
            this.unlockReq = null;
            return;
        }
        this.unlockReq = ko.computed(unlockReq);
        this.unlocker = this.unlockReq.subscribe(() => {
            if (this.unlockReq()) {
                player.gainKeyItem(this.name());
                this.unlocker.dispose();
            }
        });
    }
    isUnlocked() {
        return player.hasKeyItem(this.name());
    }
}
class KeyItemHandler {
    static initialize() {
        KeyItemHandler.keyItemList = [];
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Teachy tv", "A television set that is tuned to a program with useful tips for novice TRAINERS")));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Coin case", "A case for holding money. It can hold up to 1,000,000 coins")));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Pokeball bag", "A tiny bag that can hold up to 4 different types of PokéBalls")));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Town map", "A very convenient map that can be viewed anytime. It even shows you your present location in the region", function () {
            return player.routeKillsObservable(1)() > player.routeKillsNeeded - 1;
        })));
        // TODO obtain somewhere at the start
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Factory key", "This pass serves as an ID card for gaining access to the Pokéball factory that lies along Route 13")));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Dungeon ticket", "This ticket grants access to all dungeons in the Kanto region,<br/><strong>Tip:</strong> You gain Dungeon Tokens by capturing Pokémon")));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Super rod", "The best fishing rod for catching wild water Pokémon", function () {
            return player.routeKillsObservable(12)() > player.routeKillsNeeded - 1;
        })));
        // TODO obtain somewhere at the start
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Holo caster", "A device that allows users to receive and view hologram clips at any time. It’s also used to chat with others")));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Mystery egg", "A mysterious Egg obtained from Mr. Pokémon. What is in the Egg is unknown", function () {
            return player.maxLevelPokemonList()().length > 0;
        })));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Safari ticket", "This ticket grants access to the Safari Zone in Fuchsia City")));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Wailmer pail", "This is a tool for watering Berries you planted to make them grow more quickly", function () {
            return MapHelper.accessToRoute(14, 1) && player.berryList[0]() >= 5;
        })));
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Explorer kit", "A bag filled with convenient tools for exploring. It provides access to the Underground")));
        // TODO buy for 500 quest points
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Event calendar", "This calendar will keep you up to date on the latest events")));
        // TODO obtain after first prestige
        KeyItemHandler.keyItemList.push(ko.observable(new KeyItem("Shard case", "A case specifically designed for holding shards", function () {
            return false;
        })));
        let item = KeyItemHandler.getKeyItemByName("Teachy tv");
        KeyItemHandler.selectedItem(item);
    }
    static getKeyItemByName(name) {
        for (let i = 0; i < KeyItemHandler.keyItemList.length; i++) {
            if (KeyItemHandler.keyItemList[i]().name() == name) {
                return KeyItemHandler.keyItemList[i]();
            }
        }
    }
    static getKeyItemObservableByName(name) {
        for (let i = 0; i < KeyItemHandler.keyItemList.length; i++) {
            if (KeyItemHandler.keyItemList[i]().name() == name) {
                return KeyItemHandler.keyItemList[i];
            }
        }
    }
    static hover(name) {
        KeyItemHandler.inspectedItem(KeyItemHandler.getKeyItemByName(name));
    }
    static hoverRelease() {
        KeyItemHandler.inspectedItem(KeyItemHandler.selectedItem());
    }
    static click(name) {
        let item = KeyItemHandler.getKeyItemByName(name);
        KeyItemHandler.selectedItem(item);
    }
}
KeyItemHandler.inspectedItem = ko.observable(null);
KeyItemHandler.selectedItem = ko.observable(null);
class OakItem {
    constructor(id, unlockReq, description, baseBonus, stepBonus, expGain) {
        this.id = id;
        this.unlockReq = unlockReq;
        this.description = ko.observable(description);
        this.baseBonus = baseBonus;
        this.stepBonus = stepBonus;
        this.expGain = expGain;
        this.level = ko.observable(0);
        this.isActive = ko.observable(false);
    }
    isUnlocked() {
        return player.caughtPokemonList.length >= this.unlockReq;
    }
    expPercentage() {
        return this.getNormalizedPlayerExp() / this.getNormalizedRequiredExp() * 100;
    }
    expProgress() {
        if (OakItemRunner.selectedItem().canUpgrade()) {
            return "Cost: " + GameConstants.OAKITEM_MONEY_COST[OakItemRunner.selectedItem().level()];
        }
        return OakItemRunner.inspectedItem().getNormalizedPlayerExp() + "/" + OakItemRunner.inspectedItem().getNormalizedRequiredExp();
    }
    getNormalizedPlayerExp() {
        let previousExp = GameConstants.OAKITEM_XP_REQUIREMENT[this.level() - 1] || 0;
        return Math.floor((player.getOakItemExp(this.id) - previousExp) / this.expGain);
    }
    getNormalizedRequiredExp() {
        let previousExp = GameConstants.OAKITEM_XP_REQUIREMENT[this.level() - 1] || 0;
        return Math.ceil((GameConstants.OAKITEM_XP_REQUIREMENT[this.level()] - previousExp) / this.expGain);
    }
    use() {
        if (this.isActive()) {
            GameHelper.incrementObservable(player.statistics.oakItemUses[this.id]);
        }
        if (this.isMaxLevel() || !this.isActive()) {
            return;
        }
        let expGain = Math.min(this.maxExp() - player.getOakItemExp(this.id), this.expGain);
        player.gainOakItemExp(this.id, expGain);
    }
    upgrade() {
        if (this.canUpgrade()) {
            player.payMoney(GameConstants.OAKITEM_MONEY_COST[this.level()]);
            player.gainOakItemExp(this.id, 1);
            this.calculateLevel();
        }
    }
    canUpgrade() {
        return this.canUpgradeExp() && this.canUpgradeMoney();
    }
    canUpgradeExp() {
        return player.getOakItemExp(this.id) == this.maxExp();
    }
    canUpgradeMoney() {
        return player.hasMoney(GameConstants.OAKITEM_MONEY_COST[this.level()]);
    }
    calculateBonus() {
        return ko.computed(function () {
            return this.baseBonus + this.stepBonus * this.level();
        }, this);
    }
    calculateExpObservable() {
        return ko.computed(function () {
            return this.isMaxLevel() ? "Max" : player.getOakItemExp(this.id);
        }, this);
    }
    calculateLevel() {
        let level = 0;
        for (let i = 0; i < GameConstants.OAKITEM_XP_REQUIREMENT.length; i++) {
            if (player.getOakItemExp(this.id) > GameConstants.OAKITEM_XP_REQUIREMENT[i]) {
                level = i + 1;
            }
        }
        this.level(level);
        return level;
    }
    maxExp() {
        return GameConstants.OAKITEM_XP_REQUIREMENT[this.level()];
    }
    isMaxLevel() {
        return this.level() == GameConstants.OAKITEM_MAX_LEVEL;
    }
}
class OakItemRunner {
    static initialize() {
        OakItemRunner.oakItemList = [];
        OakItemRunner.oakItemList.push(ko.observable(new OakItem(GameConstants.OakItem.Magic_Ball, 20, "Gives a bonus to your catchrate", 5, 1, 2)));
        OakItemRunner.oakItemList.push(ko.observable(new OakItem(GameConstants.OakItem.Amulet_Coin, 30, "Gain more coins from battling", 25, 5, 1)));
        OakItemRunner.oakItemList.push(ko.observable(new OakItem(GameConstants.OakItem.Poison_Barb, 40, "Clicks do more damage", 25, 5, 3)));
        OakItemRunner.oakItemList.push(ko.observable(new OakItem(GameConstants.OakItem.Exp_Share, 50, "Gain more exp from battling", 15, 3, 1)));
        OakItemRunner.oakItemList.push(ko.observable(new OakItem(GameConstants.OakItem.Sprayduck, 60, "Makes your berries grow faster", 25, 5, 3)));
        OakItemRunner.oakItemList.push(ko.observable(new OakItem(GameConstants.OakItem.Shiny_Charm, 70, "Encounter more shinies", 50, 100, 150)));
        // TODO implement use!
        // TODO implement functionality
        OakItemRunner.oakItemList.push(ko.observable(new OakItem(GameConstants.OakItem.Blaze_Cassette, 80, "Hatch eggs faster", 50, 10, 10)));
        // TODO implement use!
        // TODO implement functionality
        OakItemRunner.oakItemList.push(ko.observable(new OakItem(GameConstants.OakItem.Cell_Battery, 90, "More passive mining energy regen", 25, 5, 50)));
        // OakItemRunner.oakItemList must preserve the ordering of items in GameConstants.OakItem enum
        if (!OakItemRunner.oakItemList.every((f, i) => f().id == i)) {
            throw new Error("Oak items are out of order!");
        }
        let item = OakItemRunner.getOakItemObject(GameConstants.OakItem.Magic_Ball);
        OakItemRunner.inspectedItem = ko.observable(item);
        OakItemRunner.selectedItem = ko.observable(item);
    }
    static loadOakItems() {
        let oakItems = JSON.parse(JSON.stringify(player._oakItemsEquipped));
        for (let i = 0; i < oakItems.length; i++) {
            OakItemRunner.activateOakItem(OakItemRunner.getOakItemObject(oakItems[i]).id);
        }
        for (let i = 0; i < OakItemRunner.oakItemList.length; i++) {
            OakItemRunner.oakItemList[i]().calculateLevel();
        }
    }
    static hover(id) {
        OakItemRunner.inspectedItem(OakItemRunner.getOakItemObject(id));
    }
    static hoverRelease() {
        OakItemRunner.inspectedItem(OakItemRunner.selectedItem());
    }
    static click(id) {
        let item = OakItemRunner.getOakItemObject(id);
        OakItemRunner.selectedItem(item);
        if (item.isUnlocked()) {
            OakItemRunner.activateOakItem(item.id);
        }
    }
    static use(id) {
        OakItemRunner.getOakItemObject(id).use();
    }
    static calculateBonus(id) {
        return OakItemRunner.getOakItemObject(id).calculateBonus()();
    }
    static getOakItemObject(id) {
        return OakItemRunner.oakItemList[id]();
    }
    static setOakItemsEquipped() {
        player._oakItemsEquipped = [];
        for (let i = 0; i < OakItemRunner.oakItemList.length; i++) {
            let oakObj = OakItemRunner.oakItemList[i]();
            if (oakObj.isActive()) {
                player._oakItemsEquipped.push(oakObj.id);
            }
        }
    }
    static activateOakItem(id) {
        if (player.calculateOakItemSlots()() == 1) {
            OakItemRunner.deactivateAllOakItems();
            OakItemRunner.getOakItemObject(id).isActive(true);
        }
        else {
            if (OakItemRunner.getOakItemObject(id).isActive()) {
                OakItemRunner.getOakItemObject(id).isActive(false);
            }
            else {
                if (OakItemRunner.getTotalActiveOakItems() < player.calculateOakItemSlots()()) {
                    OakItemRunner.getOakItemObject(id).isActive(true);
                }
                else {
                    Notifier.notify("You can only have " + player.calculateOakItemSlots()() + " Oak items active at the same time", GameConstants.NotificationOption.warning);
                }
            }
        }
        OakItemRunner.setOakItemsEquipped();
    }
    static getTotalActiveOakItems() {
        let count = 0;
        for (let i = 0; i < OakItemRunner.oakItemList.length; i++) {
            if (OakItemRunner.oakItemList[i]().isActive()) {
                count++;
            }
        }
        return count;
    }
    static deactivateAllOakItems() {
        for (let i = 0; i < OakItemRunner.oakItemList.length; i++) {
            OakItemRunner.oakItemList[i]().isActive(false);
        }
        player.oakItemsEquipped = [];
    }
    static isActive(id) {
        for (let i = 0; i < OakItemRunner.oakItemList.length; i++) {
            if (OakItemRunner.oakItemList[i]().id == id) {
                return OakItemRunner.oakItemList[i]().isActive();
            }
        }
    }
    static isUnlocked(id) {
        for (let i = 0; i < OakItemRunner.oakItemList.length; i++) {
            if (OakItemRunner.oakItemList[i]().id == id) {
                return OakItemRunner.oakItemList[i]().isUnlocked();
            }
        }
    }
}
var TypeColor = GameConstants.TypeColor;
class PokedexHelper {
    static getBackgroundColors(name) {
        let pokemon = PokemonHelper.getPokemonByName(name);
        if (!PokedexHelper.pokemonSeen(pokemon.id)()) {
            return "grey";
        }
        if (pokemon.type2 == GameConstants.PokemonType.None) {
            return TypeColor[pokemon.type1];
        }
        return 'linear-gradient(90deg,' + TypeColor[pokemon.type1] + ' 50%, ' + TypeColor[pokemon.type2] + ' 50%)';
    }
    /**
     * Returns true if you have seen the pokemon
     * @param {number} id
     * @returns {boolean}
     */
    static pokemonSeen(id) {
        return ko.computed(function () {
            return player.defeatedAmount[id]() > 0 || player.caughtAmount[id]() > 0;
        });
    }
    static populateTypeFilters() {
        var options = $("#pokedex-filter-type1");
        $.each(GameConstants.PokemonType, function () {
            if (isNaN(Number(this)) && this != GameConstants.PokemonType.None) {
                options.append($("<option />").val(GameConstants.PokemonType[this]).text(this));
            }
        });
        options = $("#pokedex-filter-type2");
        $.each(GameConstants.PokemonType, function () {
            if (isNaN(Number(this)) && this != GameConstants.PokemonType.None) {
                options.append($("<option />").val(GameConstants.PokemonType[this]).text(this));
            }
        });
    }
    static updateList() {
        PokedexHelper.filteredList(PokedexHelper.getList());
    }
    static getList() {
        let filter = PokedexHelper.getFilters();
        const highestDefeated = player.defeatedAmount.reduce((highest, pokemon, index) => pokemon() && index > highest ? index : highest, 0);
        const highestCaught = player.caughtPokemonList.reduce((highest, pokemon) => pokemon.id > highest ? pokemon.id : highest, 0);
        const highestDex = Math.max(highestDefeated, highestCaught);
        return pokemonList.filter(function (pokemon) {
            if ((filter['name'] || "") != "" && pokemon.name.toLowerCase().indexOf(filter['name'].toLowerCase()) == -1) {
                return false;
            }
            let type1 = parseInt(filter['type1'] || -1);
            if (type1 != -1 && pokemon.type.indexOf(GameConstants.PokemonType[type1]) == -1) {
                return false;
            }
            let type2 = parseInt(filter['type2'] || -1);
            if (type2 != -1 && pokemon.type.indexOf(GameConstants.PokemonType[type2]) == -1) {
                return false;
            }
            if (filter['caught'] && player.caughtAmount[pokemon.id]() == 0) {
                return false;
            }
            if (filter['shiny'] && !player.alreadyCaughtPokemonShiny(pokemon.name)) {
                return false;
            }
            if (filter['uncaught'] && player.caughtAmount[pokemon.id]() !== 0) {
                return false;
            }
            if (pokemon.id > highestDex) {
                return false;
            }
            return true;
        });
    }
    static getFilters() {
        let res = {};
        res['name'] = document.getElementById('nameFilter').value;
        let type1 = document.getElementById('pokedex-filter-type1');
        res['type1'] = type1.options[type1.selectedIndex].value;
        let type2 = document.getElementById('pokedex-filter-type2');
        res['type2'] = type2.options[type2.selectedIndex].value;
        res['caught'] = document.getElementById('pokedex-filter-caught').checked;
        res['uncaught'] = document.getElementById('pokedex-filter-uncaught').checked;
        res['shiny'] = document.getElementById('pokedex-filter-shiny').checked;
        return res;
    }
    static getImage(id, name) {
        let src = "assets/images/";
        if (player.alreadyCaughtPokemonShiny(name)) {
            src += "shiny";
        }
        src += "pokemon/" + id + ".png";
        return src;
    }
}
PokedexHelper.filteredList = ko.observableArray([]);
class PokedexPokemon {
    constructor(name, id, type1, type2, kills, catches, shiny) {
        this.name = name;
        this.id = id;
        this.type1 = type1;
        this.type2 = type2;
        this.kills = kills;
        this.catches = catches;
        this.shiny = shiny;
    }
}
/**
 * Created by dennis on 26-06-17.
 */
class CaughtPokemon {
    constructor(pokemonData, ev, atBo, xp, breeding = false) {
        this.id = pokemonData.id;
        this.name = pokemonData.name;
        this.evolved = ev;
        this.attackBonus = ko.observable(atBo);
        this.exp = ko.observable(xp);
        this.levelObservable = ko.computed(() => {
            return PokemonHelper.calculateLevel(this);
        });
        this.baseAttack = pokemonData.attack;
        this.attack = ko.computed(() => {
            return PokemonHelper.calculateAttack(this.baseAttack, this.attackBonus(), this.levelObservable());
        });
        this.breeding = ko.observable(breeding);
        this.evolver = {};
        this.checkForEvolution();
    }
    toJSON() {
        let keep, plainJS;
        keep = ["name", "evolved", "attackBonus", "exp", "breeding"];
        plainJS = ko.toJS(this);
        return Save.filter(plainJS, keep);
    }
    checkForEvolution(reset = false) {
        // reset if pokemon has just hatched
        if (!!reset) {
            this.evolved = false;
        }
        const pokemonData = pokemonMapId[this.id];
        // pokemon doesn't have an evolution, is already evolved, or currently breeding
        if (!pokemonData.evoLevel || this.evolved || this.breeding()) {
            return;
        }
        pokemonData.evoLevel.forEach((evo, index) => {
            if (evo.constructor === Number) {
                if (this.evolver[index]) {
                    this.evolver[index].dispose();
                }
                // We need to check if the player object has been set first, There has to be a better way though..
                const obtainedAllEvolutions = reset ? !PokemonHelper.getPokemonByName(this.name).evolutionByIndex(index, true, true).some(p => !player.alreadyCaughtPokemon(p)) : false;
                if (obtainedAllEvolutions) {
                    this.evolved = true;
                    return;
                }
                // Get evolutions for current region, else calculate a evolution for any region for when we reach that region
                const evolution = PokemonHelper.getPokemonByName(this.name).evolutionByIndex(index, true) || PokemonHelper.getPokemonByName(this.name).evolutionByIndex(index, false);
                const evoRegion = PokemonHelper.calcNativeRegion(evolution);
                this.evolver[index] = this.levelObservable.subscribe(() => {
                    if (this.levelObservable() >= evo && player.highestRegion >= evoRegion) {
                        Notifier.notify("Your " + this.name + " has evolved into a " + evolution, GameConstants.NotificationOption.success);
                        player.capturePokemon(evolution, false, true);
                        player.caughtAmount[this.id](player._caughtAmount[this.id]() + 1);
                        this.evolved = true;
                        this.evolver[index].dispose();
                    }
                });
            }
        });
    }
}
/**
 * Created by dennis on 26-06-17.
 */
class DataPokemon {
    constructor(id, name, catchRate, evolution, evoLevel, type1, type2, attack, levelType, exp, eggCycles) {
        this.id = id;
        this.name = name;
        this.catchRate = catchRate;
        this.evolution = evolution;
        this.evoLevel = evoLevel;
        this.type1 = type1;
        this.type2 = type2;
        this.attack = attack;
        this.levelType = levelType;
        this.exp = exp;
        this.eggCycles = eggCycles;
        this.shiny = false;
    }
    evolutionByIndex(index, filterMaxRegion, returnAllEvolutions = false) {
        if (!this.evolution) {
            return;
        }
        let evolutions = this.evolution[index].constructor === Array ? this.evolution[index] : [this.evolution[index]];
        if (filterMaxRegion && player) {
            evolutions = evolutions.filter(p => PokemonHelper.calcNativeRegion(p) <= player.highestRegion);
        }
        if (!evolutions.length) {
            return;
        }
        if (returnAllEvolutions) {
            return evolutions;
        }
        return evolutions[Math.floor(Math.random() * evolutions.length)];
    }
}
class Quest {
    constructor(amount, pointsReward) {
        this.amount = amount;
        let randomPointBonus = 0.9 + SeededRand.next() * 0.2; // random between 0.9 and 1.1
        this.pointsReward = Math.ceil(pointsReward * randomPointBonus);
        this.xpReward = pointsReward / 10;
        this.claimed = ko.observable(false);
        this.initial = ko.observable(null);
        this.notified = false;
    }
    endQuest() {
        if (this.isCompleted()) {
            player.gainQuestPoints(this.pointsReward);
            this.claimed(true);
            if (!this.inQuestLine)
                player.completedQuestList[this.index](true);
            let oldLevel = player.questLevel;
            player.questXP += this.xpReward;
            Notifier.notify(`You have completed your quest and claimed ${this.pointsReward} quest points!`, GameConstants.NotificationOption.success);
            QuestHelper.checkCompletedSet();
            if (oldLevel < player.questLevel) {
                Notifier.notify("Your quest level has increased!", GameConstants.NotificationOption.success);
                QuestHelper.refreshQuests(true);
            }
        }
        else {
            this.initial(null);
        }
        player.currentQuests(player.currentQuests().filter(x => x.index != this.index));
    }
    beginQuest() {
        this.initial(this.questFocus());
    }
    set questFocus(value) {
        this._questFocus = value;
        this.createProgressObservables();
    }
    get questFocus() {
        return this._questFocus;
    }
    createProgressObservables() {
        this.progress = ko.computed(function () {
            if (this.initial() !== null) {
                return Math.min(1, (this.questFocus() - this.initial()) / this.amount);
            }
            else {
                return 0;
            }
        }, this);
        this.progressText = ko.computed(function () {
            if (this.initial() !== null) {
                return "" + Math.min((this.questFocus() - this.initial()), this.amount) + "/" + this.amount;
            }
            else {
                return "0/" + this.amount;
            }
        }, this);
        this.isCompleted = ko.computed(function () {
            let completed = this.progress() == 1;
            if (!this.autoComplete && completed && !this.notified) {
                Notifier.notify(`You can complete your quest for ${this.pointsReward} quest points!`, GameConstants.NotificationOption.success);
            }
            return completed;
        }, this);
    }
    complete() {
        this.initial(this.questFocus() - this.amount);
    }
    createAutoCompleter() {
        this.autoComplete = true;
        this.autoCompleter = this.isCompleted.subscribe(() => {
            if (this.isCompleted()) {
                this.endQuest();
                this.autoCompleter.dispose();
            }
        });
    }
    inProgress() {
        return ko.computed(() => {
            return player.currentQuests().map(x => x.index).includes(this.index)
                && !this.isCompleted();
        });
    }
}
/// <reference path="Quest.ts" />
class BuyPokeballsQuest extends Quest {
    constructor(amount, ball, reward) {
        super(amount, reward);
        this.description = `Buy ${amount} Pokeballs.`;
        this.questFocus = player.statistics.pokeballsBought[ball];
    }
}
/// <reference path="Quest.ts" />
class CapturePokemonsQuest extends Quest {
    constructor(capturesNeeded) {
        super(capturesNeeded, capturesNeeded * GameConstants.CAPTURE_POKEMONS_BASE_REWARD);
        this.description = `Capture ${capturesNeeded} pokemon on any route.`;
        this.questFocus = player.statistics.pokemonCaptured;
    }
}
/// <reference path="Quest.ts" />
class CatchShiniesQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.SHINY_BASE_REWARD));
        this.description = `Catch ${amount} shiny pokemon.`;
        this.questFocus = player._shinyCatches;
    }
}
/// <reference path="Quest.ts" />
class DefeatDungeonQuest extends Quest {
    constructor(dungeon, amount) {
        super(amount, DefeatDungeonQuest.calcReward(dungeon, amount));
        this.description = `Defeat the ${dungeon} dungeon ${amount} times.`;
        this.questFocus = player.statistics.dungeonsCleared[Statistics.getDungeonIndex(dungeon)];
    }
    static calcReward(dungeon, amount) {
        let playerDamage = player.pokemonAttackObservable();
        let attacksToDefeatPokemon = Math.ceil(dungeonList[dungeon].baseHealth / playerDamage);
        //Average tiles till boss ~= 13
        return Math.ceil(attacksToDefeatPokemon * 13 * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * GameConstants.ACTIVE_QUEST_MULTIPLIER);
    }
}
/// <reference path="Quest.ts" />
class DefeatGymQuest extends Quest {
    constructor(gymTown, amount) {
        super(amount, DefeatGymQuest.calcReward(gymTown, amount));
        this.description = DefeatGymQuest.getDescription(gymTown, amount);
        this.questFocus = player.statistics.gymsDefeated[Statistics.getGymIndex(gymTown)];
    }
    static getDescription(gymTown, amount) {
        let desc = `Defeat ${gymTown} `;
        if (gymTown.indexOf("Elite") == -1 && gymTown.indexOf("Champion") == -1) {
            desc += "gym ";
        }
        desc += `${amount} times.`;
        return desc;
    }
    static calcReward(gymTown, amount) {
        let gym = gymList[gymTown];
        if (gym instanceof Champion) {
            gym.setPokemon(player.starter);
        }
        let playerDamage = player.pokemonAttackObservable();
        let attacksToWin = 0;
        for (let pokemon of gym.pokemons) {
            attacksToWin += Math.ceil(Math.min(4, pokemon.maxHealth / Math.max(1, playerDamage)));
        }
        return Math.ceil(attacksToWin * GameConstants.DEFEAT_POKEMONS_BASE_REWARD * amount);
    }
}
/// <reference path="Quest.ts" />
class DefeatPokemonsQuest extends Quest {
    constructor(route, killsNeeded) {
        super(killsNeeded, DefeatPokemonsQuest.calcReward(route, killsNeeded));
        this.description = `Defeat ${killsNeeded} pokemon on route ${route}.`;
        this.route = route;
        this.questFocus = player.routeKills[this.route];
    }
    static calcReward(route, killsNeeded) {
        let attacksPerPokemon = Math.ceil(Math.min(4, PokemonFactory.routeHealth(route) / Math.max(1, player.pokemonAttackObservable())));
        return Math.ceil(GameConstants.DEFEAT_POKEMONS_BASE_REWARD * attacksPerPokemon * killsNeeded);
    }
}
/// <reference path="Quest.ts" />
class GainMoneyQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.GAIN_MONEY_BASE_REWARD));
        this.description = `Gain ${amount} PokeDollars.`;
        this.questFocus = player.statistics.totalMoney;
    }
}
/// <reference path="Quest.ts" />
class GainShardsQuest extends Quest {
    constructor(type, amount) {
        super(amount, GainShardsQuest.calcReward(type, amount));
        this.description = `Gain ${amount} ${GameConstants.PokemonType[type]} shards.`;
        this.questFocus = player.statistics.totalShards[type];
    }
    static calcReward(type, amount) {
        // Needs balancing between different types
        return amount * GameConstants.DEFEAT_POKEMONS_BASE_REWARD;
    }
}
/// <reference path="Quest.ts" />
class GainTokensQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.GAIN_TOKENS_BASE_REWARD));
        this.description = `Gain ${amount} dungeon tokens.`;
        this.questFocus = player.statistics.totalTokens;
    }
}
/// <reference path="Quest.ts" />
class HarvestBerriesQuest extends Quest {
    constructor(berryType, amount) {
        super(amount, HarvestBerriesQuest.calcReward(berryType, amount));
        this.description = `Harvest ${amount} ${berryType} berries at the farm.`;
        this.questFocus = player.statistics.berriesHarvested[GameConstants.BerryType[berryType]];
    }
    // TODO: Balance the reward amount better
    static calcReward(berryType, amount) {
        const berry = BerryList[berryType];
        const berryId = GameConstants.BerryType[berryType];
        return Math.ceil(Math.sqrt(amount * berry.harvestTime) * GameConstants.FARM_BERRIES_BASE_REWARD);
    }
}
/// <reference path="Quest.ts" />
class HatchEggsQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.HATCH_EGGS_BASE_REWARD));
        this.description = `Hatch ${amount} Eggs.`;
        this.questFocus = player.statistics.hatchedEggs;
    }
}
/// <reference path="Quest.ts" />
class MineLayersQuest extends Quest {
    constructor(amount) {
        super(amount, Math.ceil(amount * GameConstants.MINE_LAYERS_BASE_REWARD));
        this.description = `Mine ${amount} layers in the underground.`;
        this.questFocus = player.statistics.digDeeper;
    }
}
class QuestHelper {
    static generateQuests(level, refreshes, d) {
        SeededRand.seed(Number(level * (d.getFullYear() + refreshes * 10) * d.getDate() + 1000 * d.getMonth() + 100000 * d.getDate()));
        const QuestTypes = new Set(GameConstants.QuestTypes);
        for (let i = 0; i < GameConstants.QUESTS_PER_SET; i++) {
            let type = SeededRand.fromArray(Array.from(QuestTypes));
            QuestTypes.delete(type);
            let quest = QuestHelper.random(type, i);
            quest.index = i;
            QuestHelper.questList.push(quest);
        }
    }
    static random(type, index) {
        let amount, route, region;
        switch (type) {
            case "DefeatPokemons":
                route = SeededRand.intBetween(1, GameConstants.RegionRoute[player.highestRegion]);
                amount = SeededRand.intBetween(100, 500);
                return new DefeatPokemonsQuest(route, amount);
            case "CapturePokemons":
                amount = SeededRand.intBetween(100, 500);
                return new CapturePokemonsQuest(amount);
            case "GainMoney":
                amount = SeededRand.intBetween(20000, 60000);
                return new GainMoneyQuest(amount);
            case "GainTokens":
                amount = SeededRand.intBetween(1000, 8000);
                return new GainTokensQuest(amount);
            case "GainShards":
                let possibleTypes = [
                    GameConstants.PokemonType.Normal,
                    GameConstants.PokemonType.Poison,
                    GameConstants.PokemonType.Water,
                    GameConstants.PokemonType.Grass,
                    GameConstants.PokemonType.Flying,
                    GameConstants.PokemonType.Fire,
                    GameConstants.PokemonType.Fighting,
                ];
                let type = SeededRand.fromArray(possibleTypes);
                amount = SeededRand.intBetween(200, 600);
                return new GainShardsQuest(type, amount);
            case "HatchEggs":
                amount = SeededRand.intBetween(1, 30);
                return new HatchEggsQuest(amount);
            case "MineLayers":
                amount = SeededRand.intBetween(1, 3);
                return new MineLayersQuest(amount);
            case "CatchShinies":
                return new CatchShiniesQuest(1);
            case "DefeatGym":
                region = SeededRand.intBetween(0, player.highestRegion);
                const gymTown = SeededRand.fromArray(GameConstants.RegionGyms[region]);
                amount = SeededRand.intBetween(5, 20);
                return new DefeatGymQuest(gymTown, amount);
            case "DefeatDungeon":
                // Allow upto highest region
                region = SeededRand.intBetween(0, player.highestRegion);
                const dungeon = SeededRand.fromArray(GameConstants.RegionDungeons[region]);
                amount = SeededRand.intBetween(5, 20);
                return new DefeatDungeonQuest(dungeon, amount);
            case "UsePokeball":
                let possiblePokeballs = [GameConstants.Pokeball.Pokeball, GameConstants.Pokeball.Greatball, GameConstants.Pokeball.Ultraball];
                let pokeball = SeededRand.fromArray(possiblePokeballs);
                amount = SeededRand.intBetween(100, 500);
                return new UsePokeballQuest(pokeball, amount);
            case "UseOakItem":
                let possibleItems = [
                    GameConstants.OakItem.Magic_Ball,
                    GameConstants.OakItem.Amulet_Coin,
                    //GameConstants.OakItem.Poison_Barb,
                    GameConstants.OakItem.Exp_Share,
                ];
                let oakItem = SeededRand.fromArray(possibleItems);
                amount = SeededRand.intBetween(100, 500);
                return new UseOakItemQuest(oakItem, amount);
            case "HarvestBerriesQuest":
                const possibleBerries = Object.keys(BerryList);
                const berryType = SeededRand.fromArray(possibleBerries);
                amount = SeededRand.intBetween(30, 300);
                return new HarvestBerriesQuest(berryType, amount);
        }
    }
    static refreshQuests(free = false) {
        if (free || QuestHelper.canAffordRefresh()) {
            if (!free) {
                player.payMoney(QuestHelper.getRefreshCost());
            }
            player.questRefreshes++;
            QuestHelper.quitAllQuests();
            QuestHelper.clearQuests();
            QuestHelper.generateQuests(player.questLevel, player.questRefreshes, new Date());
        }
        else {
            Notifier.notify("You can't afford to do that!", GameConstants.NotificationOption.danger);
        }
    }
    static canAffordRefresh() {
        return player.money >= QuestHelper.getRefreshCost();
    }
    static clearQuests() {
        // Empty quest list and reset completed quests
        QuestHelper.questList.splice(0, GameConstants.QUESTS_PER_SET);
        for (let elem of player.completedQuestList) {
            elem(false);
        }
    }
    // Returns 0 when all quests are complete, ~1 million when none are
    static getRefreshCost() {
        let notComplete = player.completedQuestList.filter((elem) => { return !elem(); }).length;
        return Math.floor(250000 * Math.LOG10E * Math.log(Math.pow(notComplete, 4) + 1));
    }
    static loadCurrentQuests(saved) {
        for (let i = 0; i < saved().length; i++) {
            QuestHelper.questList()[saved()[i].index].initial(saved()[i].initial());
        }
    }
    // 1000 xp needed to reach level 2, amount needed for next level increases by 20% of previous level
    static levelToXP(level) {
        if (level >= 2) {
            // Sum of geometric series
            let a = 1000, r = 1.2, n = level - 1;
            let sum = a * (Math.pow(r, n) - 1) / (r - 1);
            return Math.ceil(sum);
        }
        else {
            return 0;
        }
    }
    static xpToLevel(xp) {
        let sum = xp, a = 1000, r = 1.2;
        let n = Math.log(1 + ((r - 1) * sum) / a) / Math.log(r);
        return Math.floor(n + 1);
    }
    static canStartNewQuest() {
        // Two conditions for starting new quest:
        // 1. Current quests not exceed maximum slots
        // 2. At least one quest is neither completed nor in-progress
        if (player.currentQuests().length >= this.questSlots()()) {
            return false;
        }
        for (let i = 0; i < QuestHelper.questList().length; i++) {
            if (!(player.completedQuestList[i]() || QuestHelper.questList()[i].isCompleted()
                || QuestHelper.questList()[i].inProgress()())) {
                return true;
            }
        }
        return false;
    }
    static onQuest(index) {
        return ko.observable(player.currentQuests().map(x => x.index).includes(index));
    }
    static beginQuest(index) {
        if (this.canStartNewQuest()) {
            this.questList()[index].beginQuest();
            player.currentQuests.push({
                index: index,
                initial: this.questList()[index].initial(),
            });
            player.currentQuests.sort((x, y) => x.index - y.index);
        }
        else {
            Notifier.notify("You cannot start more quests", GameConstants.NotificationOption.danger);
        }
    }
    static quitAllQuests() {
        let questIndexArr = player.currentQuests().map(x => x.index);
        questIndexArr.forEach(index => {
            this.questList()[index].endQuest();
        });
    }
    static checkCompletedSet() {
        for (let questCompleted of player.completedQuestList) {
            if (!questCompleted()) {
                return;
            }
        }
        //Only reachable if all quests are completed
        QuestHelper.getCompletionReward();
    }
    static getCompletionReward() {
        console.log("All quests Completed!");
    }
    static questSlots() {
        return ko.observable(1);
    }
}
QuestHelper.questList = ko.observableArray();
class QuestLine {
    constructor(name, description) {
        this.name = name;
        this.description = description;
        this.quests = ko.observableArray();
        this.totalQuests = 0;
        this.curQuest = ko.computed(() => {
            let acc = 0;
            return this.quests().map((quest) => { return +quest.isCompleted(); })
                .reduce((acc, iscompleted) => { return acc + iscompleted; }, 0);
        });
        this.curQuestInitial = ko.observable();
        this.curQuestInitial.equalityComparer = () => { return false; }; //Always update subscriptions, even if same data pushed in
        this.curQuestObject = ko.computed(() => {
            this.quests(); //register dependency on this computed so it will update
            if (this.totalQuests > 0 && this.curQuest() < this.totalQuests) {
                return this.quests()[this.curQuest()];
            }
            else {
                return { progress: () => { return 0; }, progressText: () => { return ""; } };
            }
        });
        this.autoBegin = this.curQuest.subscribe((num) => {
            if (this.curQuest() < this.totalQuests) {
                setTimeout(() => { this.beginQuest(this.curQuest()); }, 2000);
            }
        });
    }
    addQuest(quest) {
        this.totalQuests++;
        quest.index = this.totalQuests;
        quest.inQuestLine = true;
        quest.createAutoCompleter();
        this.quests.push(quest);
    }
    beginQuest(index, initial) {
        let quest = this.quests()[index];
        if (typeof initial == "undefined") {
            initial = quest.questFocus();
        }
        quest.initial(initial);
        this.curQuestInitial(quest.initial());
    }
    resumeAt(index, state) {
        if (typeof state != "undefined") {
            for (let i = 0; i < index; i++) {
                this.quests()[i].autoCompleter.dispose();
                this.quests()[i].complete();
            }
            if (index < this.totalQuests) {
                this.beginQuest(index, state);
            }
        }
        else {
            this.beginQuest(0);
        }
    }
}
class QuestLineHelper {
    static createTutorial() {
        this.tutorial = new QuestLine("Tutorial Quests", "A short set of quests to get you going");
        //Defeat Starter
        let defeatStarter = new CapturePokemonsQuest(1);
        //Capture pokemon because start sequence resets route 1 kills to 0, making this quest think it is incomplete
        defeatStarter.pointsReward = 10;
        defeatStarter.description = "Defeat the pokemon. Click to deal damage";
        this.tutorial.addQuest(defeatStarter);
        //Capture 1 pokemon
        let captureOne = new CapturePokemonsQuest(1);
        captureOne.pointsReward = 20;
        captureOne.description = "Capture 1 pokemon. When you defeat a pokemon, a pokeball is thrown and you have a chance to capture it.";
        this.tutorial.addQuest(captureOne);
        //Kill 5 on route 2
        let routeTwo = new DefeatPokemonsQuest(2, 5);
        routeTwo.pointsReward = 30;
        routeTwo.description = "Defeat 5 pokemon on route 2. Click route 2 on the map to move there and begin fighting.";
        this.tutorial.addQuest(routeTwo);
        //Defeat Pewter Gym
        let pewter = new DefeatGymQuest(GameConstants.KantoGyms[0], 1);
        pewter.pointsReward = 40;
        pewter.description = "Defeat Pewter City Gym. Click the town on the map to move there, then click the Gym button to start the battle.";
        this.tutorial.addQuest(pewter);
        //Buy pokeballs
        let buyPokeballs = new BuyPokeballsQuest(30, GameConstants.Pokeball.Pokeball, 50);
        buyPokeballs.pointsReward = 50;
        buyPokeballs.description = "Buy 30 pokeballs. You can find these in the Pewter City Shop.";
        this.tutorial.addQuest(buyPokeballs);
        //Kill 10 on route 3
        let routeThree = new DefeatPokemonsQuest(3, 10);
        routeThree.pointsReward = 100;
        this.tutorial.addQuest(routeThree);
        this.tutorialTracker = this.tutorial.curQuestInitial.subscribe((newInitial) => {
            player.tutorialProgress(QuestLineHelper.tutorial.curQuest());
            player.tutorialState = newInitial;
        });
        this.tutorialCompleter = this.tutorial.curQuest.subscribe((quest) => {
            if (quest == QuestLineHelper.tutorial.totalQuests) {
                QuestLineHelper.tutorialTracker.dispose();
                player.tutorialState = null;
                player.tutorialProgress(quest);
                player.tutorialComplete(true);
            }
        });
    }
}
/// <reference path="Quest.ts" />
class UseOakItemQuest extends Quest {
    constructor(item, amount) {
        super(amount, amount * GameConstants.USE_OAK_ITEM_BASE_REWARD);
        this.description = `Gain the benefit from the ${GameConstants.humanifyString(GameConstants.OakItem[item])} ${amount} times.`;
        this.questFocus = player.statistics.oakItemUses[item];
    }
}
/// <reference path="Quest.ts" />
class UsePokeballQuest extends Quest {
    constructor(pokeball, amount) {
        // Reward for Greatballs is 4x Pokeballs, Ultraballs are 9x Pokeballs
        super(amount, Math.ceil(amount * (pokeball + 1) * (pokeball + 1) * GameConstants.DEFEAT_POKEMONS_BASE_REWARD));
        this.description = `Use ${amount} ${GameConstants.Pokeball[pokeball]}s.`;
        this.questFocus = player.statistics.pokeballsUsed[pokeball];
    }
}
/// <reference path="../../libs/motio.d.ts" />
class Safari {
    static load() {
        this.grid = [];
        this.playerXY.x = 0;
        this.playerXY.y = 0;
        Safari.lastDirection = "up";
        Safari.inBattle(false);
        Safari.balls(this.calculateStartPokeballs());
        for (let i = 0; i < GameConstants.Safari.SizeY; i++) {
            let row = Array.apply(null, Array(GameConstants.Safari.SizeX)).map(Number.prototype.valueOf, 0);
            this.grid.push(row);
        }
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new TreeBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new FenceBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new WaterBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new SandBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.addRandomBody(new GrassBody());
        Safari.show();
    }
    static addRandomBody(body) {
        let x = Safari.getRandomCoord(GameConstants.Safari.SizeX - 2);
        let y = Safari.getRandomCoord(GameConstants.Safari.SizeY - 2);
        if (body.type === 'fence') {
            x = Math.max(0, x - 3);
            y = Math.max(0, y - 3);
        }
        let res = Safari.canAddBody(x, y, body);
        if (res || body.type === 'grass') {
            Safari.addBody(x, y, body);
        }
    }
    static getRandomCoord(max) {
        return Math.floor(Math.random() * (max - 3)) + 1;
    }
    static canAddBody(x, y, body) {
        if (x == 0 ||
            y == 0 ||
            y + body.maxY() >= GameConstants.Safari.SizeY ||
            x + body.maxX() >= GameConstants.Safari.SizeX) {
            return false;
        }
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if ((i + y) < GameConstants.Safari.SizeY && (j + x) < GameConstants.Safari.SizeX) {
                    if (body.grid[i][j] !== 0) {
                        if (this.grid[i + y][j + x] !== 0) {
                            return false;
                        }
                    }
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    static addBody(x, y, body) {
        for (let i = 0; i < body.grid.length; i++) {
            for (let j = 0; j < body.grid[i].length; j++) {
                if (body.grid[i][j] !== 0) {
                    if ((i + y) < GameConstants.Safari.SizeY && (j + x) < GameConstants.Safari.SizeX) {
                        if (this.grid[i + y][j + x] === 0) {
                            this.grid[i + y][j + x] = body.grid[i][j];
                        }
                    }
                }
            }
        }
    }
    static show() {
        let html = "";
        for (let i = 0; i < this.grid.length; i++) {
            html += "<div class='row m-0'>";
            for (let j = 0; j < this.grid[0].length; j++) {
                html += Safari.square(i, j);
            }
            html += "</div>";
        }
        $("#safariBattleBody").hide();
        $("#safariBody").html(html).show();
        Safari.addPlayer(Math.floor(GameConstants.Safari.SizeX - 1) / 2, GameConstants.Safari.SizeY - 1);
    }
    static square(i, j) {
        let img = 'assets/images/safari/' + this.grid[i][j] + '.png';
        let divId = "safari-" + j + "-" + i;
        return "<div id='" + divId + "' style=background-image:url('" + img + "') class='col-sm-1 safariSquare'></div>";
    }
    static addPlayer(i, j) {
        let topLeft = $(`#safari-0-0`).offset();
        let offset = {
            top: 32 * j + topLeft.top,
            left: 32 * i + topLeft.left
        };
        $("#safariBody").append("<div id='sprite'></div>");
        $("#sprite").css('background', "url('assets/images/safari/walk" + Safari.lastDirection + ".png')");
        $("#sprite").css('position', 'absolute');
        $("#sprite").offset(offset);
        Safari.playerXY.x = i;
        Safari.playerXY.y = j;
        Safari.origin = offset;
    }
    static move(dir) {
        if (!Safari.walking && !Safari.isMoving && !Safari.inBattle()) {
            Safari.queue = [];
            Safari.walking = true;
            Safari.queue.unshift(dir);
            Safari.startMoving(dir);
        }
        else {
            if (dir) {
                Safari.setNextDirection(dir);
            }
        }
    }
    static startMoving(dir) {
        Safari.nextDirection = dir;
        if (!Safari.isMoving) {
            if (Safari.sprite.frame == 2) {
                Safari.sprite.to(0, true, function () { Safari.step(dir); });
            }
            else {
                Safari.step(dir);
            }
        }
    }
    static step(direction) {
        Safari.lastDirection = direction;
        Safari.sprite.toggle();
        let directionOffset = Safari.directionToXY(direction);
        Safari.isMoving = true;
        let newPos = {
            x: Safari.playerXY.x + directionOffset.x,
            y: Safari.playerXY.y + directionOffset.y
        };
        if (Safari.canMove(newPos.x, newPos.y)) {
            let next = $(`#safari-${newPos.x}-${newPos.y}`).offset();
            let offset = {
                top: `+=${directionOffset.y * 32}`,
                left: `+=${directionOffset.x * 32}`
            };
            $("#sprite").css("background", "url('assets/images/safari/walk" + direction + ".png')");
            Safari.playerXY.x = newPos.x;
            Safari.playerXY.y = newPos.y;
            $('#sprite').animate(offset, 250, "linear", function () {
                Safari.checkBattle();
                Safari.isMoving = false;
                if (Safari.walking) {
                    if (!Safari.checkBattle() && Safari.queue[0]) {
                        Safari.step(Safari.queue[0]);
                    }
                }
            });
        }
        else {
            $("#sprite").css("background", "url('assets/images/safari/walk" + direction + ".png')");
            setTimeout(function () {
                Safari.walking = false;
                Safari.isMoving = false;
                if (Safari.queue[0]) {
                    Safari.isMoving = true;
                    Safari.walking = true;
                    Safari.step(Safari.queue[0]);
                }
            }, 250);
        }
    }
    static directionToXY(dir) {
        let x = 0;
        let y = 0;
        switch (dir) {
            case "left":
                x = -1;
                break;
            case "up":
                y = -1;
                break;
            case "right":
                x = 1;
                break;
            case "down":
                y = 1;
                break;
        }
        return { x: x, y: y };
    }
    static canMove(x, y) {
        for (let i = 0; i < GameConstants.LEGAL_WALK_BLOCKS.length; i++) {
            if (Safari.grid[y] && Safari.grid[y][x] === GameConstants.LEGAL_WALK_BLOCKS[i]) {
                return true;
            }
        }
        return false;
    }
    static setNextDirection(direction) {
        if (direction != Safari.lastDirection) {
            if (Safari.queue[0] != direction) {
                if (Safari.queue.length == 1) {
                    Safari.queue.unshift(direction);
                }
                else {
                    Safari.queue[0] = direction;
                }
            }
            ;
            Safari.nextDirection = direction;
            Safari.walking = true;
        }
    }
    static stop(dir) {
        for (let i = 0; i < Safari.queue.length; i++) {
            if (Safari.queue[i] == dir) {
                Safari.queue.splice(i, 1);
            }
        }
        if (!Safari.queue[0]) {
            Safari.walking = false;
        }
        ;
    }
    static openModal() {
        if (player.hasKeyItem("Safari ticket")) {
            Game.gameState(GameConstants.GameState.safari);
            Safari.load();
            $('#safariModal').modal({ backdrop: 'static', keyboard: false });
        }
        else {
            Notifier.notify("You do not have access to that location", GameConstants.NotificationOption.warning);
        }
    }
    static checkBattle() {
        let battle = false;
        if (Safari.grid[Safari.playerXY.y][Safari.playerXY.x] === 10) {
            battle = Math.random() * GameConstants.SAFARI_BATTLE_CHANCE <= 1;
        }
        if (battle && !Safari.inBattle()) {
            SafariBattle.load();
            return true;
        }
        return false;
    }
    static calculateStartPokeballs() {
        return GameConstants.SAFARI_BASE_POKEBALL_COUNT;
    }
}
Safari.player = new Point(12, 20);
Safari.lastDirection = "up";
Safari.walking = false;
Safari.isMoving = false;
Safari.queue = [];
Safari.playerXY = { "x": 0, "y": 0 };
Safari.inBattle = ko.observable(false);
Safari.balls = ko.observable();
document.addEventListener("DOMContentLoaded", function (event) {
    $('#safariModal').on('hidden.bs.modal', function () {
        MapHelper.moveToTown("Fuchsia City");
    });
    $('#safariModal').on('shown.bs.modal', function () {
        let element = document.querySelector('#sprite');
        Safari.sprite = new Motio(element, {
            fps: 8,
            frames: 4
        }).on('frame', function () {
            if (Safari.sprite.frame % 2 == 0) {
                Safari.sprite.pause();
            }
        });
    });
});
class SafariBattle {
    static get enemy() {
        return SafariBattle._enemy();
    }
    static set enemy(pokemon) {
        SafariBattle._enemy(pokemon);
    }
    static load() {
        SafariBattle.enemy = SafariPokemon.random();
        Safari.inBattle(true);
        Notifier.notify("Battle", GameConstants.NotificationOption.info);
        SafariBattle.showBattleBars();
        SafariBattle.text("What will you do?");
        SafariBattle.unlockButtons();
        SafariBattle.escapeAttempts = 0;
    }
    static showBattleBars() {
        /*
        let html =  "<div id='battleBars' class='container-fluid'>";
        for( let i = 0; i<10; i++){
            html += "<div id=battleBar"+i + " class='battleBar'></div>";
        }

        html += "</div>";
        $("#safariBody").html(html);
        $(".battleBar").animate({
            width: "50%"
        }, 1000, "linear");
        */
        SafariBattle.show();
    }
    static show() {
        $("#safariBody").hide();
        $("#safariBattleBody").show();
    }
    static throwBall() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            Safari.balls(Safari.balls() - 1);
            let gameOver = Safari.balls() == 0;
            SafariBattle.text("You throw a ball...");
            let enemyImg = $('#safariEnemy').offset();
            enemyImg.left += 48;
            let p = SafariBattle.dropParticle('<div><img id="safariBall" src="assets/images/safari/pokeball.png"></div>', $('#safariPlayer').offset(), enemyImg, 0.75, 'cubic-bezier(0,0,0.4,1)', true).css('z-index', 9999);
            setTimeout(function () {
                $('#safariEnemy').addClass('safariCapture');
                setTimeout(function () {
                    $('#safariEnemy > img').css('opacity', '0');
                    p.addClass('bounce');
                    setTimeout(function () {
                        const random = Math.random();
                        const catchF = SafariBattle.enemy.catchFactor / 100;
                        const index = catchF >= 1 ? 3 : Math.floor(4 * (1 - Math.max(random, catchF)) / (1 - catchF));
                        if (index != 0) {
                            SafariBattle.startRoll(index);
                        }
                        setTimeout(function () {
                            const oakBonus = OakItemRunner.isActive(GameConstants.OakItem.Magic_Ball) ?
                                OakItemRunner.calculateBonus(GameConstants.OakItem.Magic_Ball) : 0;
                            if (random * 100 < SafariBattle.enemy.catchFactor + oakBonus) {
                                SafariBattle.capturePokemon();
                                $('#safariBall').css('filter', 'brightness(0.4) grayscale(100%)');
                                setTimeout(function () {
                                    p.remove();
                                    gameOver ? SafariBattle.gameOver() : SafariBattle.endBattle();
                                }, 2000);
                            }
                            else {
                                $('#safariEnemy > img').css('opacity', '1');
                                $('#safariEnemy').removeClass('safariCapture');
                                SafariBattle.text(GameConstants.SAFARI_CATCH_MESSAGES[index]);
                                p.remove();
                                setTimeout(function () {
                                    gameOver ? SafariBattle.gameOver() : SafariBattle.enemyTurn();
                                }, 1000);
                            }
                        }, (200 + 1200 * index));
                    }, 1700);
                }, 750);
            }, 750);
        }
    }
    static capturePokemon() {
        SafariBattle.text(`GOTCHA!<br> ${SafariBattle.enemy.name} was caught!`);
        player.capturePokemon(SafariBattle.enemy.name, SafariBattle.enemy.shiny);
    }
    static throwBait() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text("You throw some bait at " + SafariBattle.enemy.name);
            SafariBattle.enemy.eating = Math.max(SafariBattle.enemy.eating, Math.floor(Math.random() * 5 + 2));
            SafariBattle.enemy.angry = 0;
            let enemy = $('#safariEnemy').offset();
            enemy.left += 30;
            enemy.top += 70;
            SafariBattle.dropParticle('<img src="assets/images/safari/bait.png">', $('#safariPlayer').offset(), enemy, 1, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(SafariBattle.enemyTurn, 1500);
        }
    }
    static throwRock() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            SafariBattle.text("You throw a rock at " + SafariBattle.enemy.name);
            SafariBattle.enemy.angry = Math.max(SafariBattle.enemy.angry, Math.floor(Math.random() * 5 + 2));
            SafariBattle.enemy.eating = 0;
            let enemy = $('#safariEnemy').offset();
            enemy.left += 40;
            enemy.top += 10;
            SafariBattle.dropParticle('<img src="assets/images/safari/rock.png">', $('#safariPlayer').offset(), enemy, 0.8, 'cubic-bezier(0,0,0.4,1)').css('z-index', 9999);
            setTimeout(function () {
                let hitSplash = $('<ptcl>').html("<img src='assets/images/safari/hit.png'>").children().appendTo('body');
                hitSplash.offset(enemy).css({ 'opacity': 0.8, 'z-index': 9998 });
                hitSplash.fadeOut(400, function () { hitSplash.remove(); });
                setTimeout(function () {
                    let newOffset = {
                        top: enemy.top + 4,
                        left: enemy.left - 20
                    };
                    let ang = $('<ptcl>').html("<img src='assets/images/safari/angry.png'>").children().appendTo('body');
                    ang.css('position', 'absolute').css('z-index', 9999);
                    ang.offset(newOffset);
                    ang.addClass('pulse');
                    setTimeout(function () {
                        newOffset.top -= 10;
                        newOffset.left += 60;
                        ang.offset(newOffset);
                        setTimeout(function () {
                            ang.remove();
                        }, 350);
                    }, 350);
                }, 300);
            }, 800);
            setTimeout(SafariBattle.enemyTurn, 2000);
        }
    }
    static run() {
        if (!SafariBattle.busy) {
            SafariBattle.busy = true;
            if (Math.random() * 100 < (30 + 15 * SafariBattle.escapeAttempts)) {
                SafariBattle.text("You flee.");
                setTimeout(SafariBattle.endBattle, 1500);
            }
            else {
                SafariBattle.text("You can't escape...");
                setTimeout(SafariBattle.enemyTurn, 1000);
            }
        }
    }
    static enemyTurn() {
        // Enemy turn to flee;
        let random = Math.floor(Math.random() * 100);
        if (random < SafariBattle.enemy.escapeFactor) {
            SafariBattle.text(SafariBattle.enemy.name + " has fled.");
            setTimeout(SafariBattle.endBattle, 1000);
        }
        else if (SafariBattle.enemy.eating > 0) {
            SafariBattle.text(SafariBattle.enemy.name + " is eating.");
        }
        else if (SafariBattle.enemy.angry > 0) {
            SafariBattle.text(SafariBattle.enemy.name + " is angry!");
        }
        else {
            SafariBattle.text(SafariBattle.enemy.name + " is watching carefully...");
        }
        SafariBattle.enemy.eating = Math.max(0, SafariBattle.enemy.eating - 1);
        SafariBattle.enemy.angry = Math.max(0, SafariBattle.enemy.angry - 1);
        setTimeout(function () {
            SafariBattle.text("What will you do?");
            SafariBattle.busy = false;
            SafariBattle.unlockButtons();
        }, 1500);
        console.log(`Catch chance: ${SafariBattle.enemy.catchFactor}%`);
        console.log(`Escape chance: ${SafariBattle.enemy.escapeFactor}%`);
    }
    static lockButtons() {
        $('.safariOption button').attr('disabled', true);
    }
    static unlockButtons() {
        $('.safariOption button').attr('disabled', false);
    }
    static endBattle() {
        Safari.inBattle(false);
        SafariBattle.busy = false;
        $("#safariBattleBody").hide();
        $("#safariBody").show();
    }
    static gameOver() {
        SafariBattle.text(GameConstants.SAFARI_OUT_OF_BALLS);
        setTimeout(function () {
            Safari.inBattle(false);
            SafariBattle.busy = false;
            $("#safariModal").modal('toggle');
        }, 2000);
    }
    static dropParticle(html, pos, target, time = 2, top, persistentParticle = false) {
        let p = $('<ptcl>').html(html).children().appendTo('body');
        p.css('position', 'absolute');
        p.offset(pos);
        if (!top)
            top = 'cubic-bezier(0.6, -0.3, 0.7, 0)';
        p[0].style.transition = 'left ' + time + 's linear, top ' + time + 's ' + top;
        p.offset(target);
        if (!persistentParticle) {
            setTimeout(function () {
                p.fadeOut();
            }, time * 1000 - 200);
            setTimeout(function () {
                p.remove();
            }, time * 1000);
        }
        return p;
    }
    ;
}
SafariBattle._enemy = ko.observable();
SafariBattle.busy = false;
SafariBattle.text = ko.observable("What will you do?");
SafariBattle.escapeAttempts = 0;
SafariBattle.startRoll = function (n) {
    if (n == 4) {
        n--;
    }
    $('#safariBall').addClass('safari-roll-left');
    setTimeout(function () { SafariBattle.safariRoll(n - 1); }, 1200);
};
SafariBattle.safariRoll = function (n) {
    if (n != 0) {
        $('#safariBall').toggleClass('safari-roll-left').toggleClass('safari-roll-right');
        setTimeout(function () { SafariBattle.safariRoll(n - 1); }, 1200);
    }
};
class SafariBody {
    constructor() {
    }
    getTileNeighbours(x, y) {
        let ret = Array(4); //["N", "E", "S", "W"]
        let cross = Array(4); //["NE", "SE", "SW", "NW"]
        if (x === 0) {
            ret[3] = false;
        }
        else {
            ret[3] = this.grid[y][x - 1] !== 0;
        }
        if (y === 0) {
            ret[0] = false;
        }
        else {
            ret[0] = this.grid[y - 1][x] !== 0;
        }
        if (x === this.grid[0].length - 1) {
            ret[1] = false;
        }
        else {
            ret[1] = this.grid[y][x + 1] !== 0;
        }
        if (y === this.grid.length - 1) {
            ret[2] = false;
        }
        else {
            ret[2] = this.grid[y + 1][x] !== 0 && this.grid[y + 1][x] !== undefined;
        }
        if (ret.equals([true, true, true, true])) {
            cross[0] = this.grid[y - 1][x + 1] !== 0;
            cross[1] = this.grid[y + 1][x + 1] !== 0;
            cross[2] = this.grid[y + 1][x - 1] !== 0;
            cross[3] = this.grid[y - 1][x - 1] !== 0;
        }
        return {
            plus: ret,
            cross: cross
        };
    }
    //duplicated in DungeonMap
    static shuffle(a) {
        let j, x, i;
        for (i = a.length; i; i--) {
            j = Math.floor(Math.random() * i);
            x = a[i - 1];
            a[i - 1] = a[j];
            a[j] = x;
        }
    }
    maxY() {
        return this.grid.length;
    }
    maxX() {
        let max = 0;
        for (let row of this.grid) {
            if (row.length > max) {
                max = row.length;
            }
        }
        return max;
    }
}
class SandBody extends SafariBody {
    constructor(x = SandBody.randomInt(), y = SandBody.randomInt(), type = "sand") {
        super();
        this.edgeDetectCheck = 15;
        this.type = type;
        this.grid = this.generateCube(x, y);
        this.edgeDetect();
    }
    static randomInt() {
        return Math.floor(Math.random() * 3) + 3;
    }
    generateCube(sizeX, sizeY) {
        let body = [];
        for (let i = 0; i < sizeY; i++) {
            let row = Array.apply(null, Array(sizeX)).map(Number.prototype.valueOf, 0);
            body.push(row);
        }
        let amount = this.type === 'fence' ? 20 : 4;
        for (let i = 0; i < amount; i++) {
            let x = Math.floor(Math.random() * (sizeX - 2));
            let y = Math.floor(Math.random() * (sizeY - 2));
            body = SandBody.addCube(x, y, body);
        }
        return body;
    }
    static addCube(x, y, body) {
        if (Math.random() >= 0.5) {
            body[y + 2][x] = 15;
            body[y + 2][x + 1] = 15;
            body[y][x + 2] = 15;
            body[y + 1][x + 2] = 15;
            body[y + 2][x + 2] = 15;
        }
        body[y][x] = 15;
        body[y + 1][x] = 15;
        body[y][x + 1] = 15;
        body[y + 1][x + 1] = 15;
        return body;
    }
    edgeDetect() {
        for (var i = 0; i < this.grid.length; i++) {
            for (var j = 0; j < this.grid[i].length; j++) {
                if (this.grid[i][j] === this.edgeDetectCheck) {
                    this.grid[i][j] = this.getNumber(this.getTileNeighbours(j, i));
                }
            }
        }
    }
    getNumber(neighbours) {
        let plus = neighbours.plus;
        let cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 11;
        }
        if (plus.equals([false, true, true, true])) {
            return 12;
        }
        if (plus.equals([false, false, true, true])) {
            return 13;
        }
        if (plus.equals([true, true, true, false])) {
            return 14;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 21;
            }
            if (!cross[1]) {
                return 22;
            }
            if (!cross[2]) {
                return 23;
            }
            if (!cross[3]) {
                return 24;
            }
            return 15;
        }
        if (plus.equals([true, false, true, true])) {
            return 16;
        }
        if (plus.equals([true, true, false, false])) {
            return 17;
        }
        if (plus.equals([true, true, false, true])) {
            return 18;
        }
        if (plus.equals([true, false, false, true])) {
            return 19;
        }
        return 10;
    }
}
class FenceBody extends SandBody {
    constructor() {
        super(7, 7, 'fence');
        this.edgeDetectCheck = 0;
        this.openFence();
    }
    getNumber(neighbours) {
        let plus = neighbours.plus;
        let cross = neighbours.cross;
        if (plus.equals([false, true, true, false])) {
            return 25;
        }
        if (plus.equals([false, true, true, true])) {
            return 26;
        }
        if (plus.equals([false, false, true, true])) {
            return 27;
        }
        if (plus.equals([true, true, true, false])) {
            return 28;
        }
        if (plus.equals([true, true, true, true])) {
            if (!cross[0]) {
                return 33;
            }
            if (!cross[1]) {
                return 34;
            }
            if (!cross[2]) {
                return 35;
            }
            if (!cross[3]) {
                return 36;
            }
            return 10;
        }
        if (plus.equals([true, false, true, true])) {
            return 29;
        }
        if (plus.equals([true, true, false, false])) {
            return 30;
        }
        if (plus.equals([true, true, false, true])) {
            return 31;
        }
        if (plus.equals([true, false, false, true])) {
            return 32;
        }
        return 10;
    }
    openFence() {
        let options = [26, 28, 29, 31];
        let pick = options[Math.floor(Math.random() * options.length)];
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === pick) {
                    this.grid[i][j] = 0;
                }
            }
        }
    }
}
class WaterBody extends SafariBody {
    constructor() {
        super();
        let x = Math.floor(Math.random() * 3) + 3;
        let y = Math.floor(Math.random() * 3) + 3;
        let body = [];
        for (let i = 0; i < y; i++) {
            let row = [];
            for (let j = 0; j < x; j++) {
                if (i === 0) {
                    if (j === 0) {
                        row.push(1);
                    }
                    else if (j < x - 1) {
                        row.push(2);
                    }
                    else if (j === x - 1) {
                        row.push(3);
                    }
                }
                else if (i < y - 1) {
                    if (j === 0) {
                        row.push(4);
                    }
                    else if (j < x - 1) {
                        row.push(5);
                    }
                    else if (j === x - 1) {
                        row.push(6);
                    }
                }
                else if (i === y - 1) {
                    if (j === 0) {
                        row.push(7);
                    }
                    else if (j < x - 1) {
                        row.push(8);
                    }
                    else if (j === x - 1) {
                        row.push(9);
                    }
                }
            }
            body.push(row);
        }
        this.grid = body;
        this.type = 'water';
    }
}
class GrassBody extends SafariBody {
    constructor() {
        super();
        let x = Math.floor(Math.random() * 3) + 4;
        let y = Math.floor(Math.random() * 3) + 4;
        let body = [];
        for (let i = 0; i < y; i++) {
            let row = [];
            for (let j = 0; j < x; j++) {
                if (j < x * 2 / 3 - 1) {
                    row.push(10);
                }
                else {
                    row.push(0);
                }
            }
            SafariBody.shuffle(row);
            body.push(row);
        }
        this.grid = body;
        this.fillHoles();
        this.type = 'grass';
    }
    fillHoles() {
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (i !== 0 && i !== this.grid.length - 1) {
                        if (this.grid[i - 1][j] === 10 && this.grid[i + 1][j] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
        for (let i = 0; i < this.grid.length; i++) {
            for (let j = 0; j < this.grid[0].length; j++) {
                if (this.grid[i][j] === 0) {
                    if (j !== 0 && j !== this.grid[0].length - 1) {
                        if (this.grid[i][j - 1] === 10 && this.grid[i][j + 1] === 10) {
                            this.grid[i][j] = 10;
                        }
                    }
                }
            }
        }
    }
}
class TreeBody extends SafariBody {
    constructor() {
        super();
        this.grid = [[37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48]];
        this.type = 'tree';
    }
}
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array)
        return false;
    // compare lengths - can save a lot of time
    if (this.length != array.length)
        return false;
    for (var i = 0, l = this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i]))
                return false;
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
};
class SafariPokemon {
    constructor(name) {
        let data = PokemonHelper.getPokemonByName(name);
        this.name = data.name;
        this.id = data.id;
        this.type1 = data.type1;
        this.type2 = data.type2;
        this.shiny = PokemonFactory.generateShiny(GameConstants.SHINY_CHANCE_SAFARI);
        this.baseCatchFactor = data.catchRate * 100 / 1275;
        this.baseEscapeFactor = 40;
        this.angry = 0;
        this.eating = 0;
    }
    get catchFactor() {
        let catchF = this.baseCatchFactor;
        if (this.eating > 0) {
            catchF /= 2;
        }
        if (this.angry > 0) {
            catchF *= 2;
        }
        return Math.min(100, catchF);
    }
    get escapeFactor() {
        if (this.eating > 0) {
            return this.baseEscapeFactor / 4;
        }
        if (this.angry > 0) {
            return this.baseEscapeFactor * 2;
        }
        return this.baseEscapeFactor;
    }
    static random() {
        let rand = Math.random() * SafariPokemon.listWeight;
        let i = 0;
        for (let pokemon of SafariPokemon.list) {
            i += pokemon.weight;
            if (rand < i) {
                return new SafariPokemon(pokemon.name);
            }
        }
    }
}
// Lower weighted pokemon will appear less frequently, equally weighted are equally likely to appear
SafariPokemon.list = [
    { name: "Nidoran(F)", weight: 15 },
    { name: "Nidorina", weight: 10 },
    { name: "Nidoran(M)", weight: 25 },
    { name: "Nidorino", weight: 10 },
    { name: "Exeggcute", weight: 20 },
    { name: "Paras", weight: 5 },
    { name: "Parasect", weight: 15 },
    { name: "Rhyhorn", weight: 10 },
    { name: "Chansey", weight: 4 },
    { name: "Scyther", weight: 4 },
    { name: "Pinsir", weight: 4 },
    { name: "Kangaskhan", weight: 15 },
    { name: "Tauros", weight: 10 },
    { name: "Cubone", weight: 10 },
    { name: "Marowak", weight: 5 },
    { name: "Tangela", weight: 4 },
];
SafariPokemon.listWeight = SafariPokemon.list.reduce((sum, pokemon) => { return sum += pokemon.weight; }, 0);
class Setting {
    // Leave options array empty to allow all options.
    constructor(name, displayName, options, defaultValue) {
        this.name = name;
        this.displayName = displayName;
        this.options = options;
        this.defaultValue = defaultValue;
        this.observableValue = ko.observable(this.defaultValue);
        this.set(defaultValue);
    }
    set(value) {
        if (this.validValue(value)) {
            this.value = value;
            this.observableValue(value);
        }
        else {
            console.log(value + " is not a valid value for setting " + this.name);
        }
    }
    validValue(value) {
        if (!this.isUnlocked(value)) {
            return false;
        }
        if (this.options.length === 0) {
            return true;
        }
        for (let i = 0; i < this.options.length; i++) {
            if (this.options[i].value === value) {
                return true;
            }
        }
        return false;
    }
    isSelected(value) {
        return ko.computed(function () {
            return this.observableValue() === value;
        }, this);
    }
    isUnlocked(value) {
        return true;
    }
}
/// <reference path="Setting.ts" />
class MultipleChoiceSetting extends Setting {
    constructor(name, displayName, options, defaultValue) {
        super(name, displayName, options, defaultValue);
    }
}
/// <reference path="MultipleChoiceSetting.ts" />
class BooleanSetting extends MultipleChoiceSetting {
    constructor(name, displayName, defaultValue) {
        super(name, displayName, [
            new GameConstants.Option("On", true),
            new GameConstants.Option("Off", false)
        ], defaultValue);
    }
    toggle() {
        this.set(!this.value);
    }
}
/// <reference path="Setting.ts" />
/// <reference path="BooleanSetting.ts"/>
/// <reference path="MultipleChoiceSetting.ts"/>
class Settings {
    static add(setting) {
        if (!this.getSetting(setting.name)) {
            this.list.push(setting);
        }
    }
    static load(dict) {
        for (let name in dict) {
            let value = dict[name];
            this.setSettingByName(name, value);
        }
    }
    static setSettingByName(name, value) {
        let setting = this.getSetting(name);
        if (setting) {
            setting.set(value);
        }
        else {
            console.log(`Setting ${name} does not exist`);
        }
    }
    static getSetting(name) {
        for (let i = 0; i < this.list.length; i++) {
            if (this.list[i].name == name) {
                return this.list[i];
            }
        }
        return false;
    }
    static save() {
        let dict = {};
        for (let i = 0; i < this.list.length; i++) {
            dict[this.list[i].name] = this.list[i].value;
        }
        return JSON.stringify(dict);
    }
}
Settings.list = [];
Settings.add(new MultipleChoiceSetting('theme', 'Theme', [
    new GameConstants.Option('Cerulean', 'cerulean'),
    new GameConstants.Option('Cosmo', 'cosmo'),
    new GameConstants.Option('Cyborg', 'cyborg'),
    new GameConstants.Option('Darkly', 'darkly'),
    new GameConstants.Option('Flatly', 'flatly'),
    new GameConstants.Option('Journal', 'journal'),
    new GameConstants.Option('Litera', 'litera'),
    new GameConstants.Option('Lumen', 'lumen'),
    new GameConstants.Option('Lux', 'lux'),
    new GameConstants.Option('Materia', 'materia'),
    new GameConstants.Option('Minty', 'minty'),
    new GameConstants.Option('Pulse', 'pulse'),
    new GameConstants.Option('Sandstone', 'sandstone'),
    new GameConstants.Option('Simplex', 'simplex'),
    new GameConstants.Option('Sketchy', 'sketchy'),
    new GameConstants.Option('Slate', 'slate'),
    new GameConstants.Option('Solar', 'solar'),
    new GameConstants.Option('Spacelab', 'spacelab'),
    new GameConstants.Option('Superhero', 'superhero'),
    new GameConstants.Option('United', 'united'),
    new GameConstants.Option('Yeti (default)', 'yeti'),
], 'yeti'));
///<reference path="../shop/Shop.ts"/>
///<reference path="../items/Pokeball.ts"/>
///<reference path="../items/BattleItem.ts"/>
///<reference path="../items/EnergyRestore.ts"/>
///<reference path="../items/EvolutionStone.ts"/>
///<reference path="../items/PokeBlock.ts"/>
///<reference path="../items/Vitamin.ts"/>
class Town {
    constructor(name, routes, shop, dungeon, dungeonReq) {
        this._name = ko.observable(name);
        this._gym = ko.observable(gymList[name]);
        this._reqRoutes = routes;
        this._shop = ko.observable(shop);
        this._dungeon = ko.observable(dungeon);
        this.dungeonReq = dungeonReq;
        this.startingTown = GameConstants.StartingTowns.indexOf(this._name()) > -1;
    }
    get name() {
        return this._name;
    }
    get reqRoutes() {
        return this._reqRoutes;
    }
    get gym() {
        return this._gym;
    }
    get shop() {
        return this._shop;
    }
    get dungeon() {
        return this._dungeon;
    }
    hasRouteReq() {
        for (let i of this.reqRoutes) {
            if (player.routeKills[i]() < player.routeKillsNeeded) {
                return false;
            }
        }
        return true;
    }
    hasDungeonReq() {
        if (this.dungeonReq != undefined) {
            return 0 < player.statistics.dungeonsCleared[Statistics.getDungeonIndex(this.dungeonReq)]();
        }
        else {
            return true;
        }
    }
    isUnlocked() {
        return this.hasRouteReq() && this.hasDungeonReq();
    }
}
class DungeonTown extends Town {
    constructor(name, routes, badge) {
        super(name, routes, null, dungeonList[name]);
        this.badgeReq = badge;
    }
    isUnlocked() {
        return (this.hasRouteReq() && player.hasBadge(this.badgeReq));
    }
}
const TownList = {};
//Kanto Towns
let PewterCityShop = new Shop(["Pokeball", "Token_collector", "xExp", "Dungeon_ticket"]);
TownList["Pewter City"] = new Town("Pewter City", [2], PewterCityShop);
let CeruleanCityShop = new Shop(["Water_stone", "xAttack", "Water_egg"]);
TownList["Cerulean City"] = new Town("Cerulean City", [4], CeruleanCityShop, dungeonList["Cerulean Cave"]);
let VermillionCityShop = new Shop(["Thunder_stone", "xExp", "Electric_egg"]);
TownList["Vermillion City"] = new Town("Vermillion City", [6], VermillionCityShop);
let CeladonCityShop = new Shop(["Eevee", "Porygon", "Jynx", "Mr. Mime", "Lickitung"]);
TownList["Celadon City"] = new Town("Celadon City", [8], CeladonCityShop);
let SaffronCityShop = new Shop(["Moon_stone", "xClick", "Leaf_stone", "Fighting_egg"]);
TownList["Saffron City"] = new Town("Saffron City", [5], SaffronCityShop);
let FuchsiaCityShop = new Shop(["Ultraball", "Trade_stone", "xExp", "Dragon_egg"]);
TownList["Fuchsia City"] = new Town("Fuchsia City", [18], FuchsiaCityShop);
let CinnabarIslandShop = new Shop(["Fire_stone", "Fire_egg", "SmallRestore", "Explorer_kit"]);
TownList["Cinnabar Island"] = new Town("Cinnabar Island", [20], CinnabarIslandShop, dungeonList["Pokemon Mansion"]);
let ViridianCityShop = new Shop(["xAttack", "xClick", "Mystery_egg"]);
TownList["Viridian City"] = new Town("Viridian City", [1], ViridianCityShop);
TownList["Pallet Town"] = new Town("Pallet Town", []);
let LavenderTownShop = new Shop(["Greatball", "Item_magnet", "Lucky_incense", "Grass_egg"]);
TownList["Lavender Town"] = new Town("Lavender Town", [10], LavenderTownShop, dungeonList["Pokemon Tower"]);
//Kanto Dungeons
TownList["Viridian Forest"] = new DungeonTown("Viridian Forest", [1]);
TownList["Digletts Cave"] = new DungeonTown("Digletts Cave", [1], GameConstants.Badge.Boulder);
TownList["Mt. Moon"] = new DungeonTown("Mt. Moon", [3], GameConstants.Badge.Boulder);
TownList["Rock Tunnel"] = new DungeonTown("Rock Tunnel", [9], GameConstants.Badge.Cascade);
TownList["Power Plant"] = new DungeonTown("Power Plant", [9], GameConstants.Badge.Cascade);
TownList["Pokemon Tower"] = new DungeonTown("Pokemon Tower", [10], GameConstants.Badge.Cascade);
TownList["Seafoam Islands"] = new DungeonTown("Seafoam Islands", [19], GameConstants.Badge.Soul);
TownList["Victory Road"] = new DungeonTown("Victory Road", [22], GameConstants.Badge.Earth);
TownList["Cerulean Cave"] = new DungeonTown("Cerulean Cave", [4], GameConstants.Badge.Elite_Champion);
TownList["Pokemon Mansion"] = new DungeonTown("Pokemon Mansion", [20], GameConstants.Badge.Soul);
//Johto Towns
let NewBarkTownShop = new Shop(["Pokeball"]);
TownList["New Bark Town"] = new Town("New Bark Town", [], NewBarkTownShop);
let CherrygroveCityShop = new Shop(["Greatball"]);
TownList["Cherrygrove City"] = new Town("Cherrygrove City", [29], CherrygroveCityShop);
let VioletCityShop = new Shop(["MediumRestore", "Togepi"]);
TownList["Violet City"] = new Town("Violet City", [31], VioletCityShop, dungeonList["Sprout Tower"]);
let AzaleaTownShop = new Shop(["Kings_rock"]);
TownList["Azalea Town"] = new Town("Azalea Town", [33], AzaleaTownShop, dungeonList["Slowpoke Well"]);
let GoldenrodCityShop = new Shop(["Sun_stone", "Upgrade"]);
TownList["Goldenrod City"] = new Town("Goldenrod City", [34], GoldenrodCityShop);
TownList["Ecruteak City"] = new Town("Ecruteak City", [37]);
let OlivineCityShop = new Shop(["Metal_coat"]);
TownList["Olivine City"] = new Town("Olivine City", [39], OlivineCityShop);
TownList["Cianwood City"] = new Town("Cianwood City", [41]);
TownList["Mahogany Town"] = new Town("Mahogany Town", [42], null, null, "Mt Mortar");
let BlackthornCityShop = new Shop(["LargeRestore", "Dragon_scale"]);
TownList["Blackthorn City"] = new Town("Blackthorn City", [44], BlackthornCityShop, null, "Ice Path");
//Johto Dungeons
TownList["Sprout Tower"] = new DungeonTown("Sprout Tower", [31]);
TownList["Ruins of Alph"] = new DungeonTown("Ruins of Alph", [32]);
TownList["Union Cave"] = new DungeonTown("Union Cave", [32]);
TownList["Slowpoke Well"] = new DungeonTown("Slowpoke Well", [33]);
TownList["Ilex Forest"] = new DungeonTown("Ilex Forest", [33]);
TownList["Burned Tower"] = new DungeonTown("Burned Tower", [37]);
TownList["Tin Tower"] = new DungeonTown("Tin Tower", [37]);
TownList["Whirl Islands"] = new DungeonTown("Whirl Islands", [41]);
TownList["Mt Mortar"] = new DungeonTown("Mt Mortar", [42]);
TownList["Ice Path"] = new DungeonTown("Ice Path", [44]);
TownList["Dark Cave"] = new DungeonTown("Dark Cave", [45]);
TownList["Mt Silver"] = new DungeonTown("Mt Silver", [28], GameConstants.Badge.Elite_Karen);
///<reference path="Town.ts"/>
class PokemonLeague extends Town {
    constructor(name, routes, shop, dungeonReq, gyms) {
        super(name, routes, shop, null, dungeonReq);
        this.gym(null);
        this.gymList = ko.observableArray();
        for (let gym of gyms) {
            this.gymList.push(ko.observable(gymList[gym]));
        }
    }
    setupGymTowns() {
        for (let gym of this.gymList()) {
            TownList[gym().town] = TownList[this.name()];
        }
    }
}
let indigoPlateauGyms = ["Elite Lorelei", "Elite Bruno", "Elite Agatha", "Elite Lance", "Champion Blue"];
TownList["Indigo Plateau"] = new PokemonLeague("Indigo Plateau", [23], new Shop(["Masterball", "RareCandy"]), "Victory Road", indigoPlateauGyms);
TownList["Indigo Plateau"].setupGymTowns();
let indigoPlateau2Gyms = ["Elite Will", "Elite Koga", "Elite Bruno2", "Elite Karen", "Champion Lance"];
TownList["Indigo Plateau 2.0"] = new PokemonLeague("Indigo Plateau 2.0", [27], new Shop(["Protein"]), null, indigoPlateau2Gyms);
TownList["Indigo Plateau 2.0"].setupGymTowns();
///<reference path="PokemonLeague.ts"/>
/*
class IndigoPlateau extends PokemonLeague {

    constructor(shop?: Shop) {
        super("Indigo Plateau", [23], shop, null, "Victory Road");
        this.gym(null);
        this.gymList = ko.observableArray<KnockoutObservable<Gym>>();
        this.gymList.push(ko.observable(gymList["Elite Lorelei"]));
        this.gymList.push(ko.observable(gymList["Elite Bruno"]));
        this.gymList.push(ko.observable(gymList["Elite Agatha"]));
        this.gymList.push(ko.observable(gymList["Elite Lance"]));
        this.gymList.push(ko.observable(gymList["Champion Blue"]));

        //todo add champion
    }

}
*/
/*
TownList["Elite Lorelei"] = TownList["Indigo Plateau"];
TownList["Elite Bruno"] = TownList["Indigo Plateau"];
TownList["Elite Agatha"] = TownList["Indigo Plateau"];
TownList["Elite Lance"] = TownList["Indigo Plateau"];
TownList["Champion Blue"] = TownList["Indigo Plateau"];
*/ 
class TypeHelper {
    //@formatter:on
    static getAttackModifier(a1, a2, d1, d2) {
        if (a1 == GameConstants.PokemonType.None || d1 == GameConstants.PokemonType.None) {
            return 1;
        }
        let attackType1 = GameConstants.PokemonType[a1];
        let attackType2 = GameConstants.PokemonType[a2];
        let defendType1 = GameConstants.PokemonType[d1];
        let defendType2 = GameConstants.PokemonType[d2];
        let list = player.shardUpgrades;
        //TODO factor in shard value
        let m1 = TypeHelper.typeMatrix[attackType1][defendType1];
        m1 += (list[attackType1][this.valueToType(m1)]() * GameConstants.SHARD_UPGRADE_STEP);
        let m2 = 1, m3 = 1, m4 = 1;
        if (d2 != GameConstants.PokemonType.None) {
            m2 = TypeHelper.typeMatrix[attackType1][defendType2];
            m2 += (list[attackType1][this.valueToType(m2)]() * GameConstants.SHARD_UPGRADE_STEP);
        }
        if (a2 != GameConstants.PokemonType.None) {
            m3 = TypeHelper.typeMatrix[attackType2][defendType1];
            m3 += (list[attackType2][this.valueToType(m3)]() * GameConstants.SHARD_UPGRADE_STEP);
        }
        if (a2 != GameConstants.PokemonType.None && d2 != GameConstants.PokemonType.None) {
            let m4 = TypeHelper.typeMatrix[attackType2][defendType2];
            m4 += (list[attackType2][this.valueToType(m4)]() * GameConstants.SHARD_UPGRADE_STEP);
        }
        return m1 * m2 * m3 * m4;
    }
    static typeToValue(type) {
        return GameConstants.TypeEffectivenessValue[GameConstants.TypeEffectivenessValue[type]];
    }
    static valueToType(value) {
        switch (value) {
            case GameConstants.TypeEffectivenessValue.Immune:
                return GameConstants.TypeEffectiveness.Immune;
            case GameConstants.TypeEffectivenessValue.NotVery:
                return GameConstants.TypeEffectiveness.NotVery;
            case GameConstants.TypeEffectivenessValue.Normal:
                return GameConstants.TypeEffectiveness.Normal;
            case GameConstants.TypeEffectivenessValue.Very:
                return GameConstants.TypeEffectiveness.Very;
        }
    }
}
//@formatter:off
TypeHelper.typeMatrix = [
    //                E              F
    //                L              I                   P
    // N              E              G    P    G    F    S                   D
    // O         W    C    G         H    O    R    L    Y              G    R         S    F  <- Defending type
    // R    F    A    T    R         T    I    O    Y    C         R    H    A    D    T    A
    // M    I    T    R    A    I    I    S    U    I    H    B    O    O    G    A    E    I   Attack type
    // A    R    E    I    S    C    N    O    N    N    I    U    C    S    O    R    E    R        |
    // L    E    R    C    S    E    G    N    D    G    C    G    K    T    N    K    L    Y        v
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 0, 1, 1, 0.5, 1],
    [1, 0.5, 0.5, 1, 2, 2, 1, 1, 1, 1, 1, 2, 0.5, 1, 0.5, 1, 2, 1],
    [1, 2, 0.5, 1, 0.5, 1, 1, 1, 2, 1, 1, 1, 2, 1, 0.5, 1, 1, 1],
    [1, 1, 2, 0.5, 0.5, 1, 1, 1, 0, 2, 1, 1, 1, 1, 0.5, 1, 1, 1],
    [1, 0.5, 2, 1, 0.5, 1, 1, 0.5, 2, 0.5, 1, 0.5, 2, 1, 0.5, 1, 0.5, 1],
    [1, 0.5, 0.5, 1, 2, 0.5, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 0.5, 1],
    [2, 1, 1, 1, 1, 2, 1, 0.5, 1, 0.5, 0.5, 0.5, 2, 0, 1, 2, 2, 0.5],
    [1, 1, 1, 1, 2, 1, 1, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 1, 1, 0, 2],
    [1, 2, 1, 2, 0.5, 1, 1, 2, 1, 0, 1, 0.5, 2, 1, 1, 1, 2, 1],
    [1, 1, 1, 0.5, 2, 1, 2, 1, 1, 1, 1, 2, 0.5, 1, 1, 1, 0.5, 1],
    [1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 0.5, 1, 1, 1, 1, 0, 0.5, 1],
    [1, 0.5, 1, 1, 2, 1, 0.5, 0.5, 1, 0.5, 2, 1, 1, 0.5, 1, 2, 0.5, 0.5],
    [1, 2, 1, 1, 1, 2, 0.5, 1, 0.5, 2, 1, 2, 1, 1, 1, 1, 0.5, 1],
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 0.5, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0.5, 0],
    [1, 1, 1, 1, 1, 1, 0.5, 1, 1, 1, 2, 1, 1, 2, 1, 0.5, 1, 0.5],
    [1, 0.5, 0.5, 0.5, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 0.5, 2],
    [1, 0.5, 1, 1, 1, 1, 2, 0.5, 1, 1, 1, 1, 1, 1, 2, 2, 0.5, 1],
];
TypeHelper.typeColors = [
    "595c3b",
    "b10818",
    "294a94",
    "b57b31",
    "4a944a",
    "42a59c",
    "b54a4a",
    "7b42c6",
    "946b4a",
    "218cb5",
    "ce6363",
    "8cb521",
    "a58c4a",
    "605a72",
    "8c424a",
    "4a6b84",
    "737373",
    "d694ce" // Fairy
];
TypeHelper.typeColorsLocked = [
    "d3d4c4",
    "fb9d9d",
    "99b6ff",
    "ffda99",
    "aff1a7",
    "b5efef",
    "f1bba7",
    "e7ccff",
    "e3d1b5",
    "99dfff",
    "ffb5ad",
    "dbf99f",
    "e3d1b5",
    "c8c3d5",
    "e7b1b1",
    "bcccdc",
    "cccccc",
    "ffc6e7" // Fairy
];
class DailyDeal {
    constructor() {
        this.item1 = DailyDeal.randomItem();
        this.amount1 = DailyDeal.randomAmount();
        this.item2 = DailyDeal.randomItem();
        this.amount2 = DailyDeal.randomAmount();
    }
    static randomItem() {
        return UndergroundItem.list[Math.floor(UndergroundItem.list.length * SeededRand.next())];
    }
    static randomAmount() {
        return Math.floor(3 * SeededRand.next()) + 1;
    }
    static generateDeals(maxDeals, date) {
        SeededRand.seedWithDate(date);
        for (let i = 0; i < maxDeals; i++) {
            let deal = new DailyDeal();
            if (deal.isValid()) {
                DailyDeal.list.push(deal);
            }
        }
    }
    isValid() {
        return ((this.item1.name !== this.item2.name) && !DailyDeal.reverseDealExists(this.item1.name, this.item2.name) && !this.item1.isStone());
    }
    static reverseDealExists(name1, name2) {
        for (let deal of DailyDeal.list) {
            if (deal.item2.name == name1) {
                if (deal.item1.name == name2) {
                    return true;
                }
                else {
                    return DailyDeal.reverseDealExists(deal.item1.name, name2);
                }
            }
        }
        return false;
    }
    static canUse(i) {
        let deal = DailyDeal.list[i];
        let index = player.mineInventoryIndex(deal.item1.id);
        if (index > -1) {
            return player._mineInventory()[index].amount() >= deal.amount1;
        }
        else {
            return false;
        }
    }
    static use(i) {
        let deal = DailyDeal.list[i];
        let item1Index = player.mineInventoryIndex(deal.item1.id);
        if (DailyDeal.canUse(i)) {
            let amt = player._mineInventory()[item1Index].amount();
            player._mineInventory()[item1Index].amount(amt - deal.amount1);
            Underground.gainMineItem(deal.item2.id, deal.amount2);
            //player._statistics.dailyDealsUsed(player._statistics.dailyDealsUsed()+1);
        }
    }
}
DailyDeal.list = [];
class Mine {
    static loadMine() {
        let tmpGrid = [];
        let tmpRewardGrid = [];
        Mine.rewardNumbers = [];
        Mine.itemsFound = ko.observable(0);
        Mine.itemsBuried = 0;
        for (let i = 0; i < this.sizeY; i++) {
            let row = [];
            let rewardRow = [];
            for (let j = 0; j < this.sizeX; j++) {
                row.push(ko.observable(Math.min(5, Math.max(1, Math.floor(Math.random() * 2 + Math.random() * 3) + 1))));
                rewardRow.push(0);
            }
            tmpGrid.push(row);
            tmpRewardGrid.push(rewardRow);
        }
        Mine.grid = tmpGrid;
        Mine.rewardGrid = tmpRewardGrid;
        for (let i = 0; i < Underground.getMaxItems(); i++) {
            let item = UndergroundItem.getRandomItem();
            let x = Mine.getRandomCoord(this.sizeX, item.space[0].length);
            let y = Mine.getRandomCoord(this.sizeY, item.space.length);
            let res = Mine.canAddReward(x, y, item);
            if (res) {
                Mine.addReward(x, y, item);
            }
        }
        Mine.loadingNewLayer = false;
        Underground.showMine();
    }
    static getRandomCoord(max, size) {
        return Math.floor(Math.random() * (max - size - 1)) + 1;
    }
    static canAddReward(x, y, reward) {
        if (Mine.alreadyHasRewardId(reward.id)) {
            return false;
        }
        if (y + reward.space.length >= this.sizeY || x + reward.space[0].length >= this.sizeX) {
            return false;
        }
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    if (Mine.rewardGrid[i + y][j + x] !== 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
    static alreadyHasRewardId(id) {
        for (let row of Mine.rewardGrid) {
            for (let item of row) {
                if (item.value === id) {
                    return true;
                }
            }
        }
        return false;
    }
    static addReward(x, y, reward) {
        for (let i = 0; i < reward.space.length; i++) {
            for (let j = 0; j < reward.space[i].length; j++) {
                if (reward.space[i][j] !== 0) {
                    Mine.rewardGrid[i + y][j + x] = {
                        x: j,
                        y: i,
                        value: reward.space[i][j],
                        revealed: 0
                    };
                }
            }
        }
        Mine.itemsBuried++;
        Mine.rewardNumbers.push(reward.id);
    }
    static click(i, j) {
        if (Mine.toolSelected() == Mine.Tool.Hammer) {
            Mine.hammer(i, j);
        }
        else {
            Mine.chisel(i, j);
        }
    }
    static hammer(x, y) {
        if (Underground.energy >= Underground.HAMMER_ENERGY) {
            if (x < 0 || y < 0) {
                return;
            }
            let hasMined = false;
            for (let i = -1; i < 2; i++) {
                for (let j = -1; j < 2; j++) {
                    if (Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)]() > 0) {
                        hasMined = true;
                    }
                    Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)](Math.max(0, Mine.grid[Mine.normalizeY(x + i)][Mine.normalizeX(y + j)]() - 1));
                }
            }
            if (hasMined) {
                Underground.energy = Underground.energy - Underground.HAMMER_ENERGY;
            }
        }
    }
    static chisel(x, y) {
        if (Mine.grid[x][y]() > 0) {
            if (Underground.energy >= Underground.CHISEL_ENERGY) {
                Mine.grid[Mine.normalizeY(x)][Mine.normalizeX(y)](Math.max(0, Mine.grid[Mine.normalizeY(x)][Mine.normalizeX(y)]() - 2));
                Underground.energy = Underground.energy - Underground.CHISEL_ENERGY;
            }
        }
    }
    static normalizeX(x) {
        return Math.min(this.sizeX - 1, Math.max(0, x));
    }
    static normalizeY(y) {
        return Math.min(this.sizeY - 1, Math.max(0, y));
    }
    static checkItemsRevealed() {
        for (let i = 0; i < Mine.rewardNumbers.length; i++) {
            if (Mine.checkItemRevealed(Mine.rewardNumbers[i])) {
                Underground.gainMineItem(Mine.rewardNumbers[i]);
                Notifier.notify("You found a " + Underground.getMineItemById(Mine.rewardNumbers[i]).name, GameConstants.NotificationOption.success);
                Mine.itemsFound(Mine.itemsFound() + 1);
                GameHelper.incrementObservable(player.statistics.digItems);
                Mine.rewardNumbers.splice(i, 1);
                i--;
                Mine.checkCompleted();
            }
        }
    }
    static checkItemRevealed(id) {
        for (let i = 0; i < this.sizeX; i++) {
            for (let j = 0; j < this.sizeY; j++) {
                if (Mine.rewardGrid[j][i] != 0) {
                    if (Mine.rewardGrid[j][i].value == id) {
                        if (Mine.rewardGrid[j][i].revealed === 0) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
    static checkCompleted() {
        if (Mine.itemsFound() >= Mine.itemsBuried) {
            setTimeout(Mine.completed, 1500);
            Mine.loadingNewLayer = true;
            GameHelper.incrementObservable(player.statistics.digDeeper);
            if (OakItemRunner.isActive(GameConstants.OakItem.Cell_Battery)) {
                OakItemRunner.use(GameConstants.OakItem.Cell_Battery);
            }
        }
    }
    static completed() {
        Notifier.notify("You dig deeper...", GameConstants.NotificationOption.info);
        ko.cleanNode(document.getElementById("mineBody"));
        Mine.loadMine();
        ko.applyBindings(null, document.getElementById("mineBody"));
    }
    static loadSavedMine(mine) {
        this.grid = mine.grid.map((row) => {
            return row.map((num) => {
                return ko.observable(num);
            });
        });
        this.rewardGrid = mine.rewardGrid;
        this.itemsFound = ko.observable(mine.itemsFound);
        this.itemsBuried = mine.itemsBuried;
        this.rewardNumbers = mine.rewardNumbers;
        this.loadingNewLayer = false;
        Underground.showMine();
    }
    static serialize() {
        let mine = {
            grid: this.grid,
            rewardGrid: this.rewardGrid,
            itemsFound: this.itemsFound,
            itemsBuried: this.itemsBuried,
            rewardNumbers: this.rewardNumbers
        };
        return ko.toJSON(mine);
    }
}
Mine.sizeX = 25;
Mine.sizeY = 12;
// 0 represents the Mine.Tool.Chisel but it's not loaded here yet.
Mine.toolSelected = ko.observable(0);
Mine.loadingNewLayer = true;
(function (Mine) {
    let Tool;
    (function (Tool) {
        Tool[Tool["Chisel"] = 0] = "Chisel";
        Tool[Tool["Hammer"] = 1] = "Hammer";
    })(Tool = Mine.Tool || (Mine.Tool = {}));
})(Mine || (Mine = {}));
class SeededRand {
    static next() {
        this.state = (this.state * this.MULTIPLIER + this.OFFSET) % this.MOD;
        return this.state / this.MOD;
    }
    static seedWithDate(d) {
        this.state = Number((d.getFullYear() - 1900) * d.getDate() + 1000 * d.getMonth() + 100000 * d.getDate());
    }
    static seed(state) {
        this.state = state;
    }
    static intBetween(min, max) {
        return Math.floor((max - min + 1) * SeededRand.next() + min);
    }
    static fromArray(arr) {
        return arr[SeededRand.intBetween(0, arr.length - 1)];
    }
}
SeededRand.state = 12345;
SeededRand.MOD = 233280;
SeededRand.OFFSET = 49297;
SeededRand.MULTIPLIER = 9301;
class Underground {
    static getMaxEnergy() {
        return Underground.BASE_ENERGY_MAX + this.getUpgrade(Underground.Upgrades.Energy_Max).calculateBonus();
    }
    static getMaxItems() {
        return Underground.BASE_ITEMS_MAX + this.getUpgrade(Underground.Upgrades.Items_Max).calculateBonus();
    }
    static getEnergyGain() {
        return Underground.BASE_ENERGY_GAIN + this.getUpgrade(Underground.Upgrades.Energy_Gain).calculateBonus();
    }
    static getEnergyRegenTime() {
        return Underground.BASE_ENERGY_REGEN_TIME - this.getUpgrade(Underground.Upgrades.Energy_Regen_Time).calculateBonus();
    }
    static getDailyDealsMax() {
        return Underground.BASE_DAILY_DEALS_MAX + this.getUpgrade(Underground.Upgrades.Daily_Deals_Max).calculateBonus();
    }
    static getUpgrade(upgrade) {
        for (let i = 0; i < this.upgradeList.length; i++) {
            if (this.upgradeList[i].name == upgrade) {
                return this.upgradeList[i];
            }
        }
    }
    static showMine() {
        let html = "";
        let itemsFound = "Mine.itemsFound() + '/' + Mine.itemsBuried + ' items found'";
        html += "</div>";
        for (let i = 0; i < Mine.grid.length; i++) {
            html += "<div class='row'>";
            for (var j = 0; j < Mine.grid[0].length; j++) {
                html += Underground.mineSquare(Mine.grid[i][j](), i, j);
            }
            html += "</div>";
        }
        html += "<div class='row'>";
        html += "<button onClick='Mine.toolSelected(Mine.Tool.Hammer)' class='btn btn-danger'>Hammer (" + Underground.HAMMER_ENERGY + " energy)</button>";
        html += "<button onClick='Mine.toolSelected(Mine.Tool.Chisel)' class='btn btn-info'>Chisel (" + Underground.CHISEL_ENERGY + " energy)</button>";
        html += "<h3 data-bind='text: Mine.itemsFound()+" + '"/"' + "+Mine.itemsBuried+" + '" items found"' + "'></h3>";
        html += "</div>";
        $("#mineBody").html(html);
    }
    static mineSquare(amount, i, j) {
        if (Mine.rewardGrid[i][j] != 0 && Mine.grid[i][j]() === 0) {
            Mine.rewardGrid[i][j].revealed = 1;
            return "<img src='assets/images/underground/" + Mine.rewardGrid[i][j].value + "/" + Mine.rewardGrid[i][j].value + "-" + Mine.rewardGrid[i][j].y + "-" + Mine.rewardGrid[i][j].x + ".png' data-bind='css: Underground.rewardCssClass' data-i='" + i + "' data-j='" + j + "'>";
        }
        else {
            return "<div data-bind='css: Underground.calculateCssClass(" + i + "," + j + ")()' data-i='" + i + "' data-j='" + j + "'></div>";
        }
    }
    static calculateCssClass(i, j) {
        return ko.computed(function () {
            return "col-sm-1 rock" + Math.max(Mine.grid[i][j](), 0) + " mineSquare " + Mine.Tool[Mine.toolSelected()] + "Selected";
        }, this, {
            disposeWhen: function () {
                if (Mine.grid[i][j]() == 0) {
                    if (Mine.rewardGrid[i][j] != 0 && Mine.rewardGrid[i][j].revealed != 1) {
                        Mine.rewardGrid[i][j].revealed = 1;
                        $("div[data-i=" + i + "][data-j=" + j + "]").replaceWith("<img src='assets/images/underground/" + Mine.rewardGrid[i][j].value + "/" + Mine.rewardGrid[i][j].value + "-" + Mine.rewardGrid[i][j].y + "-" + Mine.rewardGrid[i][j].x + ".png' data-bind='css: Underground.rewardCssClass' data-i='" + i + "' data-j='" + j + "'>");
                        ko.applyBindings(null, $("img[data-i=" + i + "][data-j=" + j + "]")[0]);
                        Mine.checkItemsRevealed();
                    }
                }
                return false;
            },
        });
    }
    static gainMineItem(id, num = 1) {
        let index = player.mineInventoryIndex(id);
        let item = Underground.getMineItemById(id);
        if (item.isStone()) {
            let evostone = ItemList[item.valueType];
            evostone.gain(num);
            return;
        }
        if (index == -1) {
            let tempItem = {
                name: item.name,
                amount: ko.observable(num),
                id: id,
                value: item.value,
                valueType: item.valueType
            };
            player._mineInventory.push(tempItem);
        }
        else {
            let amt = player._mineInventory()[index].amount();
            player._mineInventory()[index].amount(amt + num);
        }
    }
    static getMineItemById(id) {
        for (let item of UndergroundItem.list) {
            if (item.id == id) {
                return item;
            }
        }
    }
    static gainEnergy() {
        if (this.energy < this.getMaxEnergy()) {
            let multiplier = 1;
            if (OakItemRunner.isActive(GameConstants.OakItem.Cell_Battery)) {
                multiplier += (OakItemRunner.calculateBonus(GameConstants.OakItem.Cell_Battery) / 100);
            }
            this.energy = Math.min(this.getMaxEnergy(), this.energy + (multiplier * this.getEnergyGain()));
            if (this.energy === this.getMaxEnergy()) {
                Notifier.notify("Your mining energy has reached maximum capacity!", GameConstants.NotificationOption.success);
            }
        }
    }
    static gainEnergyThroughItem(item) {
        // Restore a percentage of maximum energy
        let effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        let gain = Math.min(this.getMaxEnergy() - this.energy, effect * this.getMaxEnergy());
        this.energy = this.energy + gain;
        Notifier.notify("You restored " + gain + " mining energy!", GameConstants.NotificationOption.success);
    }
    static sellMineItem(id) {
        for (let i = 0; i < player._mineInventory().length; i++) {
            let item = player._mineInventory()[i];
            if (item.id == id) {
                if (item.amount() > 0) {
                    let success = Underground.gainProfit(item);
                    if (success) {
                        let amt = item.amount();
                        player._mineInventory()[i].amount(amt - 1);
                    }
                    return;
                }
            }
        }
    }
    static gainProfit(item) {
        let success = true;
        switch (item.valueType) {
            case "Diamond":
                player.diamonds += item.value;
                break;
            case "Mine Egg":
                success = player.gainEgg(BreedingHelper.createFossilEgg(item.name));
                break;
            default:
                let type = item.valueType.charAt(0).toUpperCase() + item.valueType.slice(1); //Capitalizes string
                let typeNum = GameConstants.PokemonType[type];
                player._shardsCollected[typeNum](player._shardsCollected[typeNum]() + GameConstants.PLATE_VALUE);
        }
        return success;
    }
    static openUndergroundModal() {
        if (player.hasKeyItem("Explorer kit")) {
            Game.gameState(GameConstants.GameState.paused);
            $('#mineModal').modal('show');
        }
        else {
            Notifier.notify("You do not have access to that location", GameConstants.NotificationOption.warning);
        }
    }
    static calculateItemEffect(item) {
        let effect = GameConstants.EnergyRestoreEffect[GameConstants.EnergyRestoreSize[item]];
        return effect * this.getMaxEnergy();
    }
    static load(saveObject) {
        if (!saveObject) {
            console.log("Underground not loaded.");
            return;
        }
        let upgrades = saveObject['upgrades'];
        for (let item in Underground.Upgrades) {
            if (isNaN(Number(item))) {
                Underground.getUpgrade(Underground.Upgrades[item]).level = upgrades[item] || 0;
            }
        }
        this.energy = saveObject['energy'] || 0;
    }
    static save() {
        let undergroundSave = {};
        let upgradesSave = {};
        for (let item in Underground.Upgrades) {
            if (isNaN(Number(item))) {
                upgradesSave[item] = Underground.getUpgrade(Underground.Upgrades[item]).level;
            }
        }
        undergroundSave['upgrades'] = upgradesSave;
        undergroundSave['energy'] = this.energy;
        return undergroundSave;
    }
    // Knockout getters/setters
    static get energy() {
        return this._energy();
    }
    static set energy(value) {
        this._energy(value);
    }
}
Underground.saveKey = "underground";
Underground.energyTick = ko.observable(60);
Underground.counter = 0;
Underground._energy = ko.observable(0);
Underground.upgradeList = [];
Underground.rewardCssClass = ko.pureComputed(function () {
    return "col-sm-1 mineReward mineSquare " + Mine.Tool[Mine.toolSelected()] + "Selected";
});
$(document).ready(function () {
    $("body").on('click', '.mineSquare', function () {
        Mine.click(parseInt(this.dataset.i), parseInt(this.dataset.j));
    });
    $('#mineModal').on('hidden.bs.modal', function () {
        if (player.route() == 11) {
            Game.gameState(GameConstants.GameState.fighting);
        }
        else {
            MapHelper.moveToRoute(11, GameConstants.Region.kanto);
        }
    });
});
(function (Underground) {
    let Upgrades;
    (function (Upgrades) {
        Upgrades[Upgrades["Energy_Max"] = 0] = "Energy_Max";
        Upgrades[Upgrades["Items_Max"] = 1] = "Items_Max";
        Upgrades[Upgrades["Energy_Gain"] = 2] = "Energy_Gain";
        Upgrades[Upgrades["Energy_Regen_Time"] = 3] = "Energy_Regen_Time";
        Upgrades[Upgrades["Daily_Deals_Max"] = 4] = "Daily_Deals_Max";
    })(Upgrades = Underground.Upgrades || (Underground.Upgrades = {}));
    Underground.BASE_ENERGY_MAX = 50;
    Underground.BASE_ITEMS_MAX = 3;
    Underground.BASE_ENERGY_GAIN = 3;
    Underground.BASE_ENERGY_REGEN_TIME = 60;
    Underground.BASE_DAILY_DEALS_MAX = 3;
    Underground.HAMMER_ENERGY = 3;
    Underground.CHISEL_ENERGY = 1;
})(Underground || (Underground = {}));
class UndergroundItem {
    constructor(name, id, space, value = 1, valueType = "Diamond") {
        this.name = name;
        this.id = id;
        this.space = space;
        this.value = value;
        this.valueType = valueType;
    }
    static addItem(name, id, space, ...rest) {
        UndergroundItem.list.push(new UndergroundItem(name, id, space, ...rest));
    }
    static initialize() {
        this.addItem("Helix Fossil", 1, [[0, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1]], 0, "Mine Egg");
        this.addItem("Dome Fossil", 2, [[2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [2, 2, 2, 2, 2], [0, 2, 2, 2, 0]], 0, "Mine Egg");
        this.addItem("Old Amber", 3, [[0, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 3], [3, 3, 3, 0]], 0, "Mine Egg");
        // this.addItem("Root Fossil", 4, [[0,0,4,4,4], [0,0,4,4,4], [4,0,0,4,4], [4,4,4,4,4], [0,4,4,4,0]], 3);
        // this.addItem("Claw Fossil", 5, [[5,5,5,0,0], [5,5,5,5,0], [0,5,5,5,5], [0,0,0,5,5]], 3);
        // this.addItem("Armor Fossil", 6, [[0,6,6,6,0], [0,6,6,6,0], [6,6,6,6,6], [0,6,6,6,0]], 3);
        // this.addItem("Skull Fossil", 7, [[7,7,7,7], [7,7,7,7], [7,7,7,7], [0,7,7,0]], 3);
        this.addItem("Rare Bone", 8, [[8, 0, 0, 0, 0, 8], [8, 8, 8, 8, 8, 8], [8, 0, 0, 0, 0, 8]], 3);
        this.addItem("Star Piece", 9, [[0, 9, 0], [9, 9, 9], [0, 9, 0]], 5);
        this.addItem("Revive", 10, [[0, 10, 0], [10, 10, 10,], [0, 10, 0]], 2);
        this.addItem("Max Revive", 11, [[11, 11, 11], [11, 11, 11], [11, 11, 11]], 4);
        this.addItem("Iron Ball", 12, [[12, 12, 12], [12, 12, 12], [12, 12, 12]], 2);
        this.addItem("Heart Scale", 13, [[13, 0], [13, 13]], 10);
        this.addItem("Light Clay", 14, [[14, 0, 14, 0], [14, 14, 14, 0], [14, 14, 14, 14], [0, 14, 0, 14]], 2);
        this.addItem("Odd Keystone", 15, [[15, 15, 15, 15], [15, 15, 15, 15], [15, 15, 15, 15], [15, 15, 15, 15]], 6);
        this.addItem("Hard Stone", 16, [[16, 16], [16, 16]], 4);
        this.addItem("Fire Stone", 17, [[17, 17, 17], [17, 17, 17], [17, 17, 17]], 1, "Fire_stone");
        this.addItem("Water Stone", 18, [[18, 18, 18], [18, 18, 18], [18, 18, 0]], 1, "Water_stone");
        this.addItem("Thunder Stone", 19, [[0, 19, 19], [19, 19, 19], [19, 19, 0]], 1, "Thunder_stone");
        this.addItem("Leaf Stone", 20, [[0, 20, 0], [20, 20, 20], [20, 20, 20], [0, 20, 0]], 1, "Leaf_stone");
        this.addItem("Moon Stone", 21, [[0, 21, 21, 21], [21, 21, 21, 0]], 1, "Moon_stone");
        this.addItem("Sun Stone", 22, [[0, 22, 0,], [22, 22, 22], [22, 22, 22]], 1, "Sun_stone");
        this.addItem("Oval Stone", 23, [[23, 23, 23], [23, 23, 23], [23, 23, 23]], 3);
        this.addItem("Everstone", 24, [[24, 24, 24], [24, 24, 24]], 3);
        this.addItem("Smooth Rock", 25, [[25, 25, 25], [25, 25, 25], [25, 25, 25]], 2);
        this.addItem("Heat Rock", 26, [[26, 26, 26], [26, 26, 26]], 2);
        this.addItem("Icy Rock", 27, [[27, 27, 27], [27, 27, 27], [27, 27, 27]], 2);
        this.addItem("Damp Rock", 28, [[28, 28, 28], [28, 28, 28], [28, 0, 28]], 2);
        this.addItem("Draco Plate", 29, [[29, 29, 29, 29], [29, 29, 29, 29], [29, 29, 29, 29]], 100, "dragon");
        this.addItem("Dread Plate", 30, [[30, 30, 30, 30], [30, 30, 30, 30], [30, 30, 30, 30]], 100, "dark");
        this.addItem("Earth Plate", 31, [[31, 31, 31, 31], [31, 31, 31, 31], [31, 31, 31, 31]], 100, "ground");
        this.addItem("Fist Plate", 32, [[32, 32, 32, 32], [32, 32, 32, 32], [32, 32, 32, 32]], 100, "fighting");
        this.addItem("Flame Plate", 33, [[33, 33, 33, 33], [33, 33, 33, 33], [33, 33, 33, 33]], 100, "fire");
        this.addItem("Icicle Plate", 34, [[34, 34, 34, 34], [34, 34, 34, 34], [34, 34, 34, 34]], 100, "ice");
        this.addItem("Insect Plate", 35, [[35, 35, 35, 35], [35, 35, 35, 35], [35, 35, 35, 35]], 100, "bug");
        this.addItem("Iron Plate", 36, [[36, 36, 36, 36], [36, 36, 36, 36], [36, 36, 36, 36]], 100, "steel");
        this.addItem("Meadow Plate", 37, [[37, 37, 37, 37], [37, 37, 37, 37], [37, 37, 37, 37]], 100, "grass");
        this.addItem("Mind Plate", 38, [[38, 38, 38, 38], [38, 38, 38, 38], [38, 38, 38, 38]], 100, "psychic");
        this.addItem("Sky Plate", 39, [[39, 39, 39, 39], [39, 39, 39, 39], [39, 39, 39, 39]], 100, "flying");
        this.addItem("Splash Plate", 40, [[40, 40, 40, 40], [40, 40, 40, 40], [40, 40, 40, 40]], 100, "water");
        this.addItem("Spooky Plate", 41, [[41, 41, 41, 41], [41, 41, 41, 41], [41, 41, 41, 41]], 100, "ghost");
        this.addItem("Stone Plate", 42, [[42, 42, 42, 42], [42, 42, 42, 42], [42, 42, 42, 42]], 100, "rock");
        this.addItem("Toxic Plate", 43, [[43, 43, 43, 43], [43, 43, 43, 43], [43, 43, 43, 43]], 100, "poison");
        this.addItem("Zap Plate", 44, [[44, 44, 44, 44], [44, 44, 44, 44], [44, 44, 44, 44]], 100, "electric");
        this.addItem("Pixie Plate", 45, [[45, 45, 45, 45], [45, 45, 45, 45], [45, 45, 45, 45]], 100, "fairy");
    }
    static getRandomItem() {
        let i = Math.floor(Math.random() * (UndergroundItem.list.length));
        return UndergroundItem.list[i] || UndergroundItem.list[0];
    }
    isStone() {
        return ItemList[this.valueType] instanceof EvolutionStone;
    }
    static getFullResourceName(valuetype, amt) {
        if (valuetype != "Diamond" && amt >= 50) {
            valuetype += " shard";
        }
        if (amt > 1) {
            valuetype += "s";
        }
        return GameConstants.humanifyString(valuetype);
    }
}
UndergroundItem.list = [];
class UndergroundUpgrade extends Upgrade {
    constructor(name, displayName, maxLevel, costList, bonusList, increasing = true) {
        super(name, displayName, maxLevel, costList, bonusList, increasing);
    }
    canBuy() {
        return super.canBuy() && player.hasKeyItem("Explorer kit");
    }
}
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Max, "Max Energy", 10, CostFactory.createArray(GameHelper.createArray(50, 500, 50), GameConstants.Currency.diamond), GameHelper.createArray(0, 100, 10)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Items_Max, "Max items", 4, CostFactory.createArray(GameHelper.createArray(200, 800, 200), GameConstants.Currency.diamond), GameHelper.createArray(0, 4, 1)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Gain, "Energy restored", 17, CostFactory.createArray(GameHelper.createArray(100, 1700, 100), GameConstants.Currency.diamond), GameHelper.createArray(0, 17, 1)));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Energy_Regen_Time, "Energy regen time", 20, CostFactory.createArray(GameHelper.createArray(20, 400, 20), GameConstants.Currency.diamond), GameHelper.createArray(0, 20, 1), false));
Underground.upgradeList.push(new UndergroundUpgrade(Underground.Upgrades.Daily_Deals_Max, "Daily deals", 2, CostFactory.createArray(GameHelper.createArray(150, 300, 150), GameConstants.Currency.diamond), GameHelper.createArray(0, 2, 1)));
class Preload {
    static hideSplashScreen(fast = false) {
        if (fast) {
            $('.loader').hide();
        }
        else {
            $('.loader').fadeOut("slow");
        }
    }
    static load(skipWait = false) {
        if (skipWait) {
            return new Promise(resolve => {
                //If you want to skip waiting, resolve immediately
                resolve();
                Preload.loadSplashScreen();
                Preload.loadSplashScreen();
                Preload.loadBackground();
                Preload.loadMap();
                Preload.loadTowns();
                Preload.hideSplashScreen(true);
            });
        }
        else {
            return new Promise(resolve => {
                Promise.all([Preload.loadSplashScreen(),
                    Preload.loadSplashScreen(),
                    Preload.loadBackground(),
                    Preload.loadMap(),
                    Preload.loadTowns(),
                    // Preload.loadPokemon(),
                    Preload.minimumTime()
                ]).then(() => {
                    resolve();
                }).catch((reason => {
                    console.log(reason);
                }));
            });
        }
    }
    static loadTowns() {
        let p = Array();
        for (let name in TownList) {
            if (name.indexOf("Elite") !== -1 || name.indexOf("Champion") !== -1) {
                continue;
            }
            p.push(new Promise(resolve => {
                let img = new Image();
                img.onload = () => resolve();
                img.src = `assets/images/towns/${name}.png`;
            }));
        }
        return Promise.all(p);
    }
    static loadSplashScreen() {
        return new Promise(resolve => {
            let img = new Image();
            img.onload = () => {
                let loader = $('#loader');
                loader.css('background', 'url(assets/images/background.png) top');
                loader.css('background-size', 'cover');
                resolve();
            };
            img.src = 'assets/images/background.png';
        });
    }
    static loadBackground() {
        return new Promise(resolve => {
            let img = new Image();
            img.onload = () => {
                let body = $('body');
                body.css('background', 'url(assets/images/background.png) top');
                body.css('background-size', 'cover');
                resolve();
            };
            img.src = 'assets/images/background.png';
        });
    }
    static loadPokemon() {
        let p = Array();
        for (let i = 1; i <= GameConstants.AMOUNT_OF_POKEMONS; i++) {
            p.push(new Promise(resolve => {
                let img = new Image();
                img.onload = () => resolve();
                img.src = `assets/images/pokemon/${i}.png`;
            }));
        }
        return Promise.all(p);
    }
    static minimumTime() {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve();
            }, GameConstants.MIN_LOAD_TIME);
        });
    }
    static loadMap() {
        /*
        return new Promise<number>(resolve => {
            let img = new Image();
            img.onload = () => {
                document.querySelector('image')
                    .setAttributeNS('http://www.w3.org/1999/xlink', 'href', 'assets/images/kanto.png');
                resolve();
            };
            img.src = 'assets/images/kanto.png';
        })
        */
    }
}
class MapHelper {
    static returnToMap() {
        if (player.currentTown()) {
            return this.moveToTown(player.currentTown());
        }
        if (player.route()) {
            return this.moveToRoute(player.route(), player.region);
        }
    }
    static hasBadgeReq(route, region) {
        return player.hasBadge(GameConstants.routeBadgeRequirements[region][route]);
    }
    static hasDungeonReq(route, region) {
        let dungeonReq = GameConstants.routeDungeonRequirements[region][route];
        return dungeonReq == undefined || 0 < player.statistics.dungeonsCleared[Statistics.getDungeonIndex(dungeonReq)]();
    }
    static hasRouteKillReq(route, region) {
        let reqList = GameConstants.routeRequirements[region][route];
        if (reqList == undefined) {
            return true;
        }
        for (let i = 0; i < reqList.length; i++) {
            let route = reqList[i];
            if (player.routeKillsObservable(route)() < player.routeKillsNeeded) {
                return false;
            }
        }
        return true;
    }
    static calculateRouteCssClass(route, region) {
        if (player.route() == route && player.region == region) {
            return "currentRoute";
        }
        if (MapHelper.accessToRoute(route, region)) {
            return "unlockedRoute";
        }
        return "lockedRoute";
    }
    static calculateTownCssClass(town) {
        if (player.hasKeyItem(town)) {
            return "city unlockedTown";
        }
        if (player.currentTown() == town) {
            return "city currentTown";
        }
        if (MapHelper.accessToTown(town)) {
            if (dungeonList.hasOwnProperty(town)) {
                if (DungeonRunner.dungeonCompleted(dungeonList[town], false)) {
                    return "dungeon completedDungeon";
                }
                return "dungeon unlockedDungeon";
            }
            return "city unlockedTown";
        }
        if (dungeonList.hasOwnProperty(town)) {
            return "dungeon";
        }
        return "city";
    }
    static accessToTown(townName) {
        let town = TownList[townName];
        if (!town)
            return false;
        return town.isUnlocked();
    }
    ;
    static moveToTown(townName) {
        if (MapHelper.accessToTown(townName)) {
            Game.gameState(GameConstants.GameState.idle);
            player.route(0);
            player.town(TownList[townName]);
            player.currentTown(townName);
            //this should happen last, so all the values all set beforehand
            Game.gameState(GameConstants.GameState.town);
            Game.applyRouteBindings();
        }
        else {
            Notifier.notify("You don't have access to that location yet.", GameConstants.NotificationOption.warning);
        }
    }
    ;
    static updateAllRoutes() {
        for (let i = 0; i < GameConstants.AMOUNT_OF_ROUTES_KANTO; i++) {
            // TODO fix for multiple regions
            if (MapHelper.accessToRoute(i, GameConstants.Region.kanto)) {
                $("[data-route='" + i + "']").removeClass('currentRoute').removeClass('lockedRoute').addClass('unlockedRoute');
            }
        }
    }
    static validRoute(route, region) {
        switch (region) {
            case GameConstants.Region.kanto:
                return route > 0 && route < 26;
            case GameConstants.Region.johto:
                return route > 25 && route < 49;
        }
    }
    static openShipModal() {
        let openModal = () => { $("#ShipModal").modal('show'); };
        switch (player.region) {
            case 0:
                if (TownList["Vermillion City"].isUnlocked() && player.highestRegion > 0) {
                    openModal();
                    return;
                }
            case 1:
                if (TownList["Olivine City"].isUnlocked()) {
                    openModal();
                    return;
                }
        }
        Notifier.notify("You cannot access this dock yet", GameConstants.NotificationOption.warning);
    }
    static ableToTravel() {
        return player.caughtPokemonList.length >= GameConstants.pokemonsNeededToTravel[player.highestRegion];
    }
    static travelToNextRegion() {
        if (MapHelper.ableToTravel()) {
            player.highestRegion++;
            MapHelper.moveToTown(GameConstants.StartingTowns[player.highestRegion]);
            player.region = player.highestRegion;
        }
    }
}
MapHelper.moveToRoute = function (route, region) {
    if (isNaN(route))
        return;
    let genNewEnemy = false;
    if (route != player.route()) {
        genNewEnemy = true;
    }
    if (this.accessToRoute(route, region)) {
        player.route(route);
        player.region = region;
        player.currentTown('');
        if (genNewEnemy) {
            Battle.generateNewEnemy();
        }
        Game.gameState(GameConstants.GameState.fighting);
        Game.applyRouteBindings();
    }
    else {
        Notifier.notify("You don't have access to that route yet.", GameConstants.NotificationOption.warning);
    }
};
MapHelper.accessToRoute = function (route, region) {
    return MapHelper.hasBadgeReq(route, region) && MapHelper.hasDungeonReq(route, region) && MapHelper.hasRouteKillReq(route, region);
};
